
FreeRTOS_SemaphoreFromISR.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002a84  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08002d24  08002d24  00012d24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08002d6c  08002d6c  00012d6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08002d70  08002d70  00012d70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000014  20000000  08002d74  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000a50  20000014  08002d88  00020014  2**2
                  ALLOC
  7 ._user_heap_stack 00000604  20000a64  08002d88  00020a64  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
  9 .debug_line   0000f349  00000000  00000000  00020042  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   0002226b  00000000  00000000  0002f38b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00003ce9  00000000  00000000  000515f6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000fc8  00000000  00000000  000552e0  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0017771f  00000000  00000000  000562a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00001460  00000000  00000000  001cd9c8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    0000b1d9  00000000  00000000  001cee28  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00039387  00000000  00000000  001da001  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007b  00000000  00000000  00213388  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00002d44  00000000  00000000  00213404  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	20000014 	.word	0x20000014
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08002d0c 	.word	0x08002d0c

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	20000018 	.word	0x20000018
 80002dc:	08002d0c 	.word	0x08002d0c

080002e0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80002e0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000318 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80002e4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80002e6:	e003      	b.n	80002f0 <LoopCopyDataInit>

080002e8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80002e8:	4b0c      	ldr	r3, [pc, #48]	; (800031c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80002ea:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80002ec:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80002ee:	3104      	adds	r1, #4

080002f0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80002f0:	480b      	ldr	r0, [pc, #44]	; (8000320 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80002f2:	4b0c      	ldr	r3, [pc, #48]	; (8000324 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80002f4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80002f6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80002f8:	d3f6      	bcc.n	80002e8 <CopyDataInit>
  ldr  r2, =_sbss
 80002fa:	4a0b      	ldr	r2, [pc, #44]	; (8000328 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80002fc:	e002      	b.n	8000304 <LoopFillZerobss>

080002fe <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80002fe:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000300:	f842 3b04 	str.w	r3, [r2], #4

08000304 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000304:	4b09      	ldr	r3, [pc, #36]	; (800032c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000306:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000308:	d3f9      	bcc.n	80002fe <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800030a:	f000 f9e3 	bl	80006d4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800030e:	f002 fcc5 	bl	8002c9c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000312:	f000 f81f 	bl	8000354 <main>
  bx  lr    
 8000316:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000318:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 800031c:	08002d74 	.word	0x08002d74
  ldr  r0, =_sdata
 8000320:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000324:	20000014 	.word	0x20000014
  ldr  r2, =_sbss
 8000328:	20000014 	.word	0x20000014
  ldr  r3, = _ebss
 800032c:	20000a64 	.word	0x20000a64

08000330 <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000330:	e7fe      	b.n	8000330 <ADC3_IRQHandler>
	...

08000334 <SemaphoreTest>:
  */
static void SemaphoreTest(void const *argument)
{ 
  for(;;)
  {
    if (osSemaphore != NULL)
 8000334:	4c06      	ldr	r4, [pc, #24]	; (8000350 <SemaphoreTest+0x1c>)
{ 
 8000336:	b508      	push	{r3, lr}
    if (osSemaphore != NULL)
 8000338:	6820      	ldr	r0, [r4, #0]
 800033a:	b900      	cbnz	r0, 800033e <SemaphoreTest+0xa>
 800033c:	e7fe      	b.n	800033c <SemaphoreTest+0x8>
    {
      /* Try to obtain the semaphore */
      if(osSemaphoreWait(osSemaphore , 0) == osOK)
 800033e:	2100      	movs	r1, #0
 8000340:	f001 fa54 	bl	80017ec <osSemaphoreWait>
 8000344:	2800      	cmp	r0, #0
 8000346:	d1f7      	bne.n	8000338 <SemaphoreTest+0x4>
      {
        BSP_LED_Toggle(LED1);
 8000348:	f000 f966 	bl	8000618 <BSP_LED_Toggle>
 800034c:	e7f4      	b.n	8000338 <SemaphoreTest+0x4>
 800034e:	bf00      	nop
 8000350:	200009c8 	.word	0x200009c8

08000354 <main>:
{
 8000354:	b580      	push	{r7, lr}
 8000356:	b09c      	sub	sp, #112	; 0x70
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000358:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800035c:	f3bf 8f6f 	isb	sy
__STATIC_INLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000360:	4b50      	ldr	r3, [pc, #320]	; (80004a4 <main+0x150>)
 8000362:	2100      	movs	r1, #0
 8000364:	f8c3 1250 	str.w	r1, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000368:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800036c:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000370:	695a      	ldr	r2, [r3, #20]
 8000372:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8000376:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000378:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800037c:	f3bf 8f6f 	isb	sy
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8000380:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000384:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000388:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800038c:	f643 76e0 	movw	r6, #16352	; 0x3fe0
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000390:	f3c2 04c9 	ubfx	r4, r2, #3, #10
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000394:	f3c2 324e 	ubfx	r2, r2, #13, #15
 8000398:	07a5      	lsls	r5, r4, #30
 800039a:	0152      	lsls	r2, r2, #5
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800039c:	ea02 0c06 	and.w	ip, r2, r6
 80003a0:	4628      	mov	r0, r5
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80003a2:	4621      	mov	r1, r4
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80003a4:	ea4c 0700 	orr.w	r7, ip, r0
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 80003a8:	3901      	subs	r1, #1
 80003aa:	f100 4040 	add.w	r0, r0, #3221225472	; 0xc0000000
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80003ae:	f8c3 7260 	str.w	r7, [r3, #608]	; 0x260
      } while (ways-- != 0U);
 80003b2:	1c4f      	adds	r7, r1, #1
 80003b4:	d1f6      	bne.n	80003a4 <main+0x50>
 80003b6:	3a20      	subs	r2, #32
    } while(sets-- != 0U);
 80003b8:	f112 0f20 	cmn.w	r2, #32
 80003bc:	d1ee      	bne.n	800039c <main+0x48>
 80003be:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 80003c2:	695a      	ldr	r2, [r3, #20]
 80003c4:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80003c8:	615a      	str	r2, [r3, #20]
 80003ca:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80003ce:	f3bf 8f6f 	isb	sy
  HAL_Init();
 80003d2:	f000 f9c3 	bl	800075c <HAL_Init>
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_OscInitTypeDef RCC_OscInitStruct;
  HAL_StatusTypeDef ret = HAL_OK;
  
  /*!< Supply configuration update enable */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80003d6:	2002      	movs	r0, #2
 80003d8:	f000 fb68 	bl	8000aac <HAL_PWREx_ConfigSupply>

  /* The voltage scaling allows optimizing the power consumption when the device is
     clocked below the maximum system frequency, to update the voltage scaling value
     regarding system frequency refer to product datasheet.  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80003dc:	2300      	movs	r3, #0
 80003de:	9300      	str	r3, [sp, #0]
 80003e0:	4b31      	ldr	r3, [pc, #196]	; (80004a8 <main+0x154>)
 80003e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80003e4:	f022 0201 	bic.w	r2, r2, #1
 80003e8:	62da      	str	r2, [r3, #44]	; 0x2c
 80003ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80003ec:	f003 0301 	and.w	r3, r3, #1
 80003f0:	9300      	str	r3, [sp, #0]
 80003f2:	4b2e      	ldr	r3, [pc, #184]	; (80004ac <main+0x158>)
 80003f4:	699a      	ldr	r2, [r3, #24]
 80003f6:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 80003fa:	619a      	str	r2, [r3, #24]
 80003fc:	699a      	ldr	r2, [r3, #24]
 80003fe:	f402 4240 	and.w	r2, r2, #49152	; 0xc000
 8000402:	9200      	str	r2, [sp, #0]
 8000404:	9a00      	ldr	r2, [sp, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000406:	699a      	ldr	r2, [r3, #24]
 8000408:	0490      	lsls	r0, r2, #18
 800040a:	d5fc      	bpl.n	8000406 <main+0xb2>
  
  /* Enable HSE Oscillator and activate PLL with HSE as source */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800040c:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000410:	2501      	movs	r5, #1
  RCC_OscInitStruct.HSIState = RCC_HSI_OFF;
  RCC_OscInitStruct.CSIState = RCC_CSI_OFF;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000412:	2202      	movs	r2, #2
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;

  RCC_OscInitStruct.PLL.PLLM = 4;
  RCC_OscInitStruct.PLL.PLLN = 400;
 8000414:	2404      	movs	r4, #4
 8000416:	f44f 71c8 	mov.w	r1, #400	; 0x190
  RCC_OscInitStruct.PLL.PLLR = 2;
  RCC_OscInitStruct.PLL.PLLQ = 4;

  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_1;
  ret = HAL_RCC_OscConfig(&RCC_OscInitStruct);
 800041a:	a809      	add	r0, sp, #36	; 0x24
  RCC_OscInitStruct.PLL.PLLP = 2;
 800041c:	9216      	str	r2, [sp, #88]	; 0x58
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800041e:	e9cd 5309 	strd	r5, r3, [sp, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_OFF;
 8000422:	2300      	movs	r3, #0
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000424:	e9cd 2212 	strd	r2, r2, [sp, #72]	; 0x48
  RCC_OscInitStruct.HSIState = RCC_HSI_OFF;
 8000428:	930c      	str	r3, [sp, #48]	; 0x30
  RCC_OscInitStruct.CSIState = RCC_CSI_OFF;
 800042a:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800042c:	931b      	str	r3, [sp, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLN = 400;
 800042e:	e9cd 4114 	strd	r4, r1, [sp, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000432:	e9cd 4217 	strd	r4, r2, [sp, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_1;
 8000436:	e9cd 4319 	strd	r4, r3, [sp, #100]	; 0x64
  ret = HAL_RCC_OscConfig(&RCC_OscInitStruct);
 800043a:	f000 fb5b 	bl	8000af4 <HAL_RCC_OscConfig>
  if(ret != HAL_OK)
 800043e:	b100      	cbz	r0, 8000442 <main+0xee>
 8000440:	e7fe      	b.n	8000440 <main+0xec>
  
/* Select PLL as system clock source and configure  bus clocks dividers */
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 | \
                                 RCC_CLOCKTYPE_PCLK2  | RCC_CLOCKTYPE_D3PCLK1);

  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000442:	223f      	movs	r2, #63	; 0x3f
 8000444:	2303      	movs	r3, #3
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;  
 8000446:	2108      	movs	r1, #8
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000448:	9003      	str	r0, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2; 
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2; 
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2; 
  ret = HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4);
 800044a:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800044c:	e9cd 2301 	strd	r2, r3, [sp, #4]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;  
 8000450:	2340      	movs	r3, #64	; 0x40
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2; 
 8000452:	f44f 6280 	mov.w	r2, #1024	; 0x400
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;  
 8000456:	e9cd 1304 	strd	r1, r3, [sp, #16]
  ret = HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4);
 800045a:	4621      	mov	r1, r4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2; 
 800045c:	9306      	str	r3, [sp, #24]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2; 
 800045e:	e9cd 2307 	strd	r2, r3, [sp, #28]
  ret = HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4);
 8000462:	f000 fe7b 	bl	800115c <HAL_RCC_ClockConfig>
  if(ret != HAL_OK)
 8000466:	4604      	mov	r4, r0
 8000468:	b100      	cbz	r0, 800046c <main+0x118>
 800046a:	e7fe      	b.n	800046a <main+0x116>
  BSP_LED_Init(LED1);
 800046c:	f000 f88a 	bl	8000584 <BSP_LED_Init>
  BSP_PB_Init(BUTTON_USER, BUTTON_MODE_EXTI); 
 8000470:	4629      	mov	r1, r5
 8000472:	4620      	mov	r0, r4
 8000474:	f000 f8e2 	bl	800063c <BSP_PB_Init>
  osSemaphore = osSemaphoreCreate(osSemaphore(SEM) , 1);
 8000478:	4629      	mov	r1, r5
 800047a:	a801      	add	r0, sp, #4
  osSemaphoreDef(SEM);
 800047c:	9401      	str	r4, [sp, #4]
  osThreadDef(SEM_Thread, SemaphoreTest, osPriorityNormal, 0, semtstSTACK_SIZE);
 800047e:	4d0c      	ldr	r5, [pc, #48]	; (80004b0 <main+0x15c>)
  osSemaphore = osSemaphoreCreate(osSemaphore(SEM) , 1);
 8000480:	f001 f99e 	bl	80017c0 <osSemaphoreCreate>
 8000484:	4b0b      	ldr	r3, [pc, #44]	; (80004b4 <main+0x160>)
 8000486:	4606      	mov	r6, r0
  osThreadDef(SEM_Thread, SemaphoreTest, osPriorityNormal, 0, semtstSTACK_SIZE);
 8000488:	ac09      	add	r4, sp, #36	; 0x24
  osSemaphore = osSemaphoreCreate(osSemaphore(SEM) , 1);
 800048a:	6018      	str	r0, [r3, #0]
  osThreadDef(SEM_Thread, SemaphoreTest, osPriorityNormal, 0, semtstSTACK_SIZE);
 800048c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800048e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000490:	682b      	ldr	r3, [r5, #0]
  osThreadCreate(osThread(SEM_Thread), (void *) osSemaphore);
 8000492:	4631      	mov	r1, r6
 8000494:	a809      	add	r0, sp, #36	; 0x24
  osThreadDef(SEM_Thread, SemaphoreTest, osPriorityNormal, 0, semtstSTACK_SIZE);
 8000496:	6023      	str	r3, [r4, #0]
  osThreadCreate(osThread(SEM_Thread), (void *) osSemaphore);
 8000498:	f001 f956 	bl	8001748 <osThreadCreate>
  osKernelStart();
 800049c:	f001 f94f 	bl	800173e <osKernelStart>
 80004a0:	e7fe      	b.n	80004a0 <main+0x14c>
 80004a2:	bf00      	nop
 80004a4:	e000ed00 	.word	0xe000ed00
 80004a8:	58000400 	.word	0x58000400
 80004ac:	58024800 	.word	0x58024800
 80004b0:	08002d24 	.word	0x08002d24
 80004b4:	200009c8 	.word	0x200009c8

080004b8 <HAL_GPIO_EXTI_Callback>:
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
  osSemaphoreRelease(osSemaphore);
 80004b8:	4b01      	ldr	r3, [pc, #4]	; (80004c0 <HAL_GPIO_EXTI_Callback+0x8>)
 80004ba:	6818      	ldr	r0, [r3, #0]
 80004bc:	f001 b9bc 	b.w	8001838 <osSemaphoreRelease>
 80004c0:	200009c8 	.word	0x200009c8

080004c4 <HAL_InitTick>:
  uint32_t              uwTimclock, uwAPB1Prescaler;
  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  
  /*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80004c4:	280f      	cmp	r0, #15
{
 80004c6:	b510      	push	{r4, lr}
 80004c8:	4604      	mov	r4, r0
 80004ca:	b08a      	sub	sp, #40	; 0x28
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80004cc:	d902      	bls.n	80004d4 <HAL_InitTick+0x10>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 80004ce:	2001      	movs	r0, #1
    return HAL_TIM_Base_Start_IT(&TimHandle);
  }
  
  /* Return function status */
  return HAL_ERROR;
}
 80004d0:	b00a      	add	sp, #40	; 0x28
 80004d2:	bd10      	pop	{r4, pc}
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
 80004d4:	4601      	mov	r1, r0
 80004d6:	2200      	movs	r2, #0
 80004d8:	2036      	movs	r0, #54	; 0x36
 80004da:	f000 f997 	bl	800080c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80004de:	2036      	movs	r0, #54	; 0x36
 80004e0:	f000 f9c6 	bl	8000870 <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 80004e4:	4b18      	ldr	r3, [pc, #96]	; (8000548 <HAL_InitTick+0x84>)
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80004e6:	4669      	mov	r1, sp
 80004e8:	a802      	add	r0, sp, #8
    uwTickPrio = TickPriority;
 80004ea:	601c      	str	r4, [r3, #0]
  __HAL_RCC_TIM6_CLK_ENABLE();
 80004ec:	4b17      	ldr	r3, [pc, #92]	; (800054c <HAL_InitTick+0x88>)
 80004ee:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 80004f2:	f042 0210 	orr.w	r2, r2, #16
 80004f6:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
 80004fa:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80004fe:	f003 0310 	and.w	r3, r3, #16
 8000502:	9301      	str	r3, [sp, #4]
 8000504:	9b01      	ldr	r3, [sp, #4]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000506:	f000 ff83 	bl	8001410 <HAL_RCC_GetClockConfig>
  if (uwAPB1Prescaler == RCC_HCLK_DIV1) 
 800050a:	9b07      	ldr	r3, [sp, #28]
 800050c:	b9c3      	cbnz	r3, 8000540 <HAL_InitTick+0x7c>
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800050e:	f000 ff6d 	bl	80013ec <HAL_RCC_GetPCLK1Freq>
  TimHandle.Instance = TIM6;
 8000512:	4c0f      	ldr	r4, [pc, #60]	; (8000550 <HAL_InitTick+0x8c>)
 8000514:	4b0f      	ldr	r3, [pc, #60]	; (8000554 <HAL_InitTick+0x90>)
 8000516:	6023      	str	r3, [r4, #0]
  TimHandle.Init.Period = (1000000U / 1000U) - 1U;
 8000518:	f240 33e7 	movw	r3, #999	; 0x3e7
 800051c:	60e3      	str	r3, [r4, #12]
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800051e:	4b0e      	ldr	r3, [pc, #56]	; (8000558 <HAL_InitTick+0x94>)
 8000520:	fbb0 f0f3 	udiv	r0, r0, r3
 8000524:	3801      	subs	r0, #1
  TimHandle.Init.ClockDivision = 0;
 8000526:	2300      	movs	r3, #0
  TimHandle.Init.Prescaler = uwPrescalerValue;
 8000528:	6060      	str	r0, [r4, #4]
  if(HAL_TIM_Base_Init(&TimHandle) == HAL_OK)
 800052a:	4620      	mov	r0, r4
  TimHandle.Init.ClockDivision = 0;
 800052c:	6123      	str	r3, [r4, #16]
  TimHandle.Init.CounterMode = TIM_COUNTERMODE_UP;
 800052e:	60a3      	str	r3, [r4, #8]
  if(HAL_TIM_Base_Init(&TimHandle) == HAL_OK)
 8000530:	f001 f8d2 	bl	80016d8 <HAL_TIM_Base_Init>
 8000534:	2800      	cmp	r0, #0
 8000536:	d1ca      	bne.n	80004ce <HAL_InitTick+0xa>
    return HAL_TIM_Base_Start_IT(&TimHandle);
 8000538:	4620      	mov	r0, r4
 800053a:	f000 ff95 	bl	8001468 <HAL_TIM_Base_Start_IT>
 800053e:	e7c7      	b.n	80004d0 <HAL_InitTick+0xc>
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000540:	f000 ff54 	bl	80013ec <HAL_RCC_GetPCLK1Freq>
 8000544:	0040      	lsls	r0, r0, #1
 8000546:	e7e4      	b.n	8000512 <HAL_InitTick+0x4e>
 8000548:	2000000c 	.word	0x2000000c
 800054c:	58024400 	.word	0x58024400
 8000550:	20000030 	.word	0x20000030
 8000554:	40001000 	.word	0x40001000
 8000558:	000f4240 	.word	0x000f4240

0800055c <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);

  HAL_IncTick();
 800055c:	f000 b92c 	b.w	80007b8 <HAL_IncTick>

08000560 <TIM6_DAC_IRQHandler>:
  * @param  None
  * @retval None
  */
void TIM6_DAC_IRQHandler(void)
{
  HAL_TIM_IRQHandler(&TimHandle);
 8000560:	4801      	ldr	r0, [pc, #4]	; (8000568 <TIM6_DAC_IRQHandler+0x8>)
 8000562:	f000 bfa3 	b.w	80014ac <HAL_TIM_IRQHandler>
 8000566:	bf00      	nop
 8000568:	20000030 	.word	0x20000030

0800056c <NMI_Handler>:
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
}
 800056c:	4770      	bx	lr

0800056e <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 800056e:	e7fe      	b.n	800056e <HardFault_Handler>

08000570 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8000570:	e7fe      	b.n	8000570 <MemManage_Handler>

08000572 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8000572:	e7fe      	b.n	8000572 <BusFault_Handler>

08000574 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8000574:	e7fe      	b.n	8000574 <UsageFault_Handler>

08000576 <DebugMon_Handler>:
 8000576:	4770      	bx	lr

08000578 <SysTick_Handler>:
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
  osSystickHandler();
 8000578:	f001 b960 	b.w	800183c <osSystickHandler>

0800057c <EXTI15_10_IRQHandler>:
  * @param  None
  * @retval None
  */
void EXTI15_10_IRQHandler(void)
{
  HAL_GPIO_EXTI_IRQHandler(BUTTON_USER_PIN);
 800057c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000580:	f000 ba88 	b.w	8000a94 <HAL_GPIO_EXTI_IRQHandler>

08000584 <BSP_LED_Init>:
int32_t BSP_LED_Init(Led_TypeDef Led)
{
  int32_t ret = BSP_ERROR_NONE;
  GPIO_InitTypeDef  gpio_init_structure;

  if((Led != LED1) && (Led != LED2) && (Led != LED3))
 8000584:	2802      	cmp	r0, #2
{
 8000586:	b570      	push	{r4, r5, r6, lr}
 8000588:	b088      	sub	sp, #32
  if((Led != LED1) && (Led != LED2) && (Led != LED3))
 800058a:	d83e      	bhi.n	800060a <BSP_LED_Init+0x86>
 800058c:	4b20      	ldr	r3, [pc, #128]	; (8000610 <BSP_LED_Init+0x8c>)
  else
  {
    /* Enable the GPIO LED Clock */
    if(Led == LED1)
    {
      LED1_GPIO_CLK_ENABLE();
 800058e:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
    if(Led == LED1)
 8000592:	bb10      	cbnz	r0, 80005da <BSP_LED_Init+0x56>
      LED1_GPIO_CLK_ENABLE();
 8000594:	f042 0202 	orr.w	r2, r2, #2
 8000598:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 800059c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80005a0:	f003 0302 	and.w	r3, r3, #2
 80005a4:	9300      	str	r3, [sp, #0]
 80005a6:	9b00      	ldr	r3, [sp, #0]
    else
    {
      LED3_GPIO_CLK_ENABLE();
    }
    /* Configure the GPIO_LED pin */
    gpio_init_structure.Pin   = LED_PIN[Led];
 80005a8:	4b1a      	ldr	r3, [pc, #104]	; (8000614 <BSP_LED_Init+0x90>)
    gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
    gpio_init_structure.Pull  = GPIO_NOPULL;
 80005aa:	2400      	movs	r4, #0
 80005ac:	2201      	movs	r2, #1
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;

    HAL_GPIO_Init(LED_PORT[Led], &gpio_init_structure);
 80005ae:	a903      	add	r1, sp, #12
    gpio_init_structure.Pin   = LED_PIN[Led];
 80005b0:	f833 6010 	ldrh.w	r6, [r3, r0, lsl #1]
    HAL_GPIO_Init(LED_PORT[Led], &gpio_init_structure);
 80005b4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80005b8:	6885      	ldr	r5, [r0, #8]
    gpio_init_structure.Pin   = LED_PIN[Led];
 80005ba:	9603      	str	r6, [sp, #12]
    HAL_GPIO_Init(LED_PORT[Led], &gpio_init_structure);
 80005bc:	4628      	mov	r0, r5
    gpio_init_structure.Pull  = GPIO_NOPULL;
 80005be:	e9cd 2404 	strd	r2, r4, [sp, #16]
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80005c2:	2203      	movs	r2, #3
 80005c4:	9206      	str	r2, [sp, #24]
    HAL_GPIO_Init(LED_PORT[Led], &gpio_init_structure);
 80005c6:	f000 f96f 	bl	80008a8 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 80005ca:	4628      	mov	r0, r5
 80005cc:	4622      	mov	r2, r4
 80005ce:	4631      	mov	r1, r6
 80005d0:	f000 fa54 	bl	8000a7c <HAL_GPIO_WritePin>
  int32_t ret = BSP_ERROR_NONE;
 80005d4:	4620      	mov	r0, r4
  }

  return ret;
}
 80005d6:	b008      	add	sp, #32
 80005d8:	bd70      	pop	{r4, r5, r6, pc}
    else if(Led == LED2)
 80005da:	2801      	cmp	r0, #1
 80005dc:	d10a      	bne.n	80005f4 <BSP_LED_Init+0x70>
      LED2_GPIO_CLK_ENABLE();
 80005de:	f042 0210 	orr.w	r2, r2, #16
 80005e2:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 80005e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80005ea:	f003 0310 	and.w	r3, r3, #16
 80005ee:	9301      	str	r3, [sp, #4]
 80005f0:	9b01      	ldr	r3, [sp, #4]
 80005f2:	e7d9      	b.n	80005a8 <BSP_LED_Init+0x24>
      LED3_GPIO_CLK_ENABLE();
 80005f4:	f042 0202 	orr.w	r2, r2, #2
 80005f8:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 80005fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000600:	f003 0302 	and.w	r3, r3, #2
 8000604:	9302      	str	r3, [sp, #8]
 8000606:	9b02      	ldr	r3, [sp, #8]
 8000608:	e7ce      	b.n	80005a8 <BSP_LED_Init+0x24>
    ret = BSP_ERROR_WRONG_PARAM;
 800060a:	f06f 0001 	mvn.w	r0, #1
  return ret;
 800060e:	e7e2      	b.n	80005d6 <BSP_LED_Init+0x52>
 8000610:	58024400 	.word	0x58024400
 8000614:	08002d38 	.word	0x08002d38

08000618 <BSP_LED_Toggle>:
  */
int32_t BSP_LED_Toggle(Led_TypeDef Led)
{
  int32_t ret = BSP_ERROR_NONE;

  if((Led != LED1) && (Led != LED2) && (Led != LED3))
 8000618:	2802      	cmp	r0, #2
{
 800061a:	b508      	push	{r3, lr}
  if((Led != LED1) && (Led != LED2) && (Led != LED3))
 800061c:	d809      	bhi.n	8000632 <BSP_LED_Toggle+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
  }
  else
  {
    HAL_GPIO_TogglePin(LED_PORT[Led], LED_PIN[Led]);
 800061e:	4b06      	ldr	r3, [pc, #24]	; (8000638 <BSP_LED_Toggle+0x20>)
 8000620:	eb03 0280 	add.w	r2, r3, r0, lsl #2
 8000624:	f833 1010 	ldrh.w	r1, [r3, r0, lsl #1]
 8000628:	6890      	ldr	r0, [r2, #8]
 800062a:	f000 fa2c 	bl	8000a86 <HAL_GPIO_TogglePin>
  int32_t ret = BSP_ERROR_NONE;
 800062e:	2000      	movs	r0, #0
  }

  return ret;
}
 8000630:	bd08      	pop	{r3, pc}
    ret = BSP_ERROR_WRONG_PARAM;
 8000632:	f06f 0001 	mvn.w	r0, #1
  return ret;
 8000636:	e7fb      	b.n	8000630 <BSP_LED_Toggle+0x18>
 8000638:	08002d38 	.word	0x08002d38

0800063c <BSP_PB_Init>:
  static BSP_EXTI_LineCallback ButtonCallback[BUTTONn] = {BUTTON_USER_EXTI_Callback};
  static uint32_t  BSP_BUTTON_PRIO [BUTTONn] = {BSP_BUTTON_USER_IT_PRIORITY};
  static const uint32_t BUTTON_EXTI_LINE[BUTTONn] = {BUTTON_USER_EXTI_LINE};

  /* Enable the BUTTON clock */
  BUTTON_USER_GPIO_CLK_ENABLE();
 800063c:	4b1c      	ldr	r3, [pc, #112]	; (80006b0 <BSP_PB_Init+0x74>)
 800063e:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000642:	f042 0204 	orr.w	r2, r2, #4
{
 8000646:	b530      	push	{r4, r5, lr}
  BUTTON_USER_GPIO_CLK_ENABLE();
 8000648:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
{
 800064c:	b087      	sub	sp, #28
  BUTTON_USER_GPIO_CLK_ENABLE();
 800064e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
{
 8000652:	4605      	mov	r5, r0
  BUTTON_USER_GPIO_CLK_ENABLE();
 8000654:	f003 0304 	and.w	r3, r3, #4
 8000658:	9300      	str	r3, [sp, #0]
 800065a:	9b00      	ldr	r3, [sp, #0]

  gpio_init_structure.Pin = BUTTON_PIN [Button];
 800065c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000660:	9301      	str	r3, [sp, #4]
  gpio_init_structure.Pull = GPIO_PULLDOWN;
 8000662:	2302      	movs	r3, #2
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8000664:	e9cd 3303 	strd	r3, r3, [sp, #12]

  if(ButtonMode == BUTTON_MODE_GPIO)
 8000668:	b939      	cbnz	r1, 800067a <BSP_PB_Init+0x3e>
  {
    /* Configure Button pin as input */
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 800066a:	9102      	str	r1, [sp, #8]
    HAL_GPIO_Init(BUTTON_PORT [Button], &gpio_init_structure);
 800066c:	a901      	add	r1, sp, #4
 800066e:	4811      	ldr	r0, [pc, #68]	; (80006b4 <BSP_PB_Init+0x78>)
 8000670:	f000 f91a 	bl	80008a8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
    HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
  }

  return BSP_ERROR_NONE;
}
 8000674:	2000      	movs	r0, #0
 8000676:	b007      	add	sp, #28
 8000678:	bd30      	pop	{r4, r5, pc}
    (void)HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]);
 800067a:	4c0f      	ldr	r4, [pc, #60]	; (80006b8 <BSP_PB_Init+0x7c>)
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 800067c:	a901      	add	r1, sp, #4
    gpio_init_structure.Mode = GPIO_MODE_IT_RISING;
 800067e:	4b0f      	ldr	r3, [pc, #60]	; (80006bc <BSP_PB_Init+0x80>)
    (void)HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]);
 8000680:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8000684:	480b      	ldr	r0, [pc, #44]	; (80006b4 <BSP_PB_Init+0x78>)
    gpio_init_structure.Mode = GPIO_MODE_IT_RISING;
 8000686:	9302      	str	r3, [sp, #8]
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8000688:	f000 f90e 	bl	80008a8 <HAL_GPIO_Init>
    (void)HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]);
 800068c:	490c      	ldr	r1, [pc, #48]	; (80006c0 <BSP_PB_Init+0x84>)
 800068e:	4620      	mov	r0, r4
 8000690:	f000 f903 	bl	800089a <HAL_EXTI_GetHandle>
    (void)HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, ButtonCallback[Button]);
 8000694:	4a0b      	ldr	r2, [pc, #44]	; (80006c4 <BSP_PB_Init+0x88>)
 8000696:	2100      	movs	r1, #0
 8000698:	4620      	mov	r0, r4
 800069a:	f000 f8f7 	bl	800088c <HAL_EXTI_RegisterCallback>
    HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
 800069e:	2200      	movs	r2, #0
 80006a0:	210f      	movs	r1, #15
 80006a2:	2028      	movs	r0, #40	; 0x28
 80006a4:	f000 f8b2 	bl	800080c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 80006a8:	2028      	movs	r0, #40	; 0x28
 80006aa:	f000 f8e1 	bl	8000870 <HAL_NVIC_EnableIRQ>
 80006ae:	e7e1      	b.n	8000674 <BSP_PB_Init+0x38>
 80006b0:	58024400 	.word	0x58024400
 80006b4:	58020800 	.word	0x58020800
 80006b8:	200009cc 	.word	0x200009cc
 80006bc:	11110000 	.word	0x11110000
 80006c0:	1630000d 	.word	0x1630000d
 80006c4:	080006cb 	.word	0x080006cb

080006c8 <BSP_PB_Callback>:
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Button);

  /* This function should be implemented by the user application.
     It is called into this driver when an event on Button is triggered. */
}
 80006c8:	4770      	bx	lr

080006ca <BUTTON_USER_EXTI_Callback>:
/**
  * @brief  Key EXTI line detection callbacks.
  * @retval BSP status
  */
static void BUTTON_USER_EXTI_Callback(void)
{
 80006ca:	b508      	push	{r3, lr}
  BSP_PB_Callback(BUTTON_USER);
 80006cc:	2000      	movs	r0, #0
 80006ce:	f7ff fffb 	bl	80006c8 <BSP_PB_Callback>
}
 80006d2:	bd08      	pop	{r3, pc}

080006d4 <SystemInit>:
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */
    
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80006d4:	491a      	ldr	r1, [pc, #104]	; (8000740 <SystemInit+0x6c>)
  
  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;

  /* Reset HSEON, CSSON , CSION,RC48ON, CSIKERON PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80006d6:	481b      	ldr	r0, [pc, #108]	; (8000744 <SystemInit+0x70>)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80006d8:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 80006dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
{
 80006e0:	b510      	push	{r4, lr}
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80006e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  RCC->CR |= RCC_CR_HSION;
 80006e6:	4b18      	ldr	r3, [pc, #96]	; (8000748 <SystemInit+0x74>)
 80006e8:	681a      	ldr	r2, [r3, #0]
 80006ea:	f042 0201 	orr.w	r2, r2, #1
 80006ee:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 80006f0:	2200      	movs	r2, #0
 80006f2:	611a      	str	r2, [r3, #16]
  RCC->CR &= 0xEAF6ED7FU;
 80006f4:	681c      	ldr	r4, [r3, #0]
 80006f6:	4020      	ands	r0, r4
 80006f8:	6018      	str	r0, [r3, #0]

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80006fa:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80006fc:	61da      	str	r2, [r3, #28]
  
  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80006fe:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x00000000;
 8000700:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00000000;
 8000702:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x00000000;
 8000704:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000706:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x00000000;
 8000708:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */
  
  RCC->PLL2FRACR = 0x00000000;
 800070a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x00000000;
 800070c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800070e:	645a      	str	r2, [r3, #68]	; 0x44
  
  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000710:	6818      	ldr	r0, [r3, #0]
 8000712:	f420 2080 	bic.w	r0, r0, #262144	; 0x40000
 8000716:	6018      	str	r0, [r3, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000718:	661a      	str	r2, [r3, #96]	; 0x60

  /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800071a:	4b0c      	ldr	r3, [pc, #48]	; (800074c <SystemInit+0x78>)
 800071c:	681b      	ldr	r3, [r3, #0]
 800071e:	0c1b      	lsrs	r3, r3, #16
 8000720:	041b      	lsls	r3, r3, #16
 8000722:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000726:	d202      	bcs.n	800072e <SystemInit+0x5a>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000728:	4b09      	ldr	r3, [pc, #36]	; (8000750 <SystemInit+0x7c>)
 800072a:	2201      	movs	r2, #1
 800072c:	601a      	str	r2, [r3, #0]
/*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800072e:	4b09      	ldr	r3, [pc, #36]	; (8000754 <SystemInit+0x80>)
 8000730:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000734:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET;       /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET;       /* Vector Table Relocation in Internal FLASH */
 8000736:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800073a:	608b      	str	r3, [r1, #8]
#endif  


}
 800073c:	bd10      	pop	{r4, pc}
 800073e:	bf00      	nop
 8000740:	e000ed00 	.word	0xe000ed00
 8000744:	eaf6ed7f 	.word	0xeaf6ed7f
 8000748:	58024400 	.word	0x58024400
 800074c:	5c001000 	.word	0x5c001000
 8000750:	51008108 	.word	0x51008108
 8000754:	52004000 	.word	0x52004000

08000758 <HAL_MspInit>:
__weak void HAL_MspInit(void)
{
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 8000758:	4770      	bx	lr
	...

0800075c <HAL_Init>:
{
 800075c:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800075e:	2003      	movs	r0, #3
 8000760:	f000 f842 	bl	80007e8 <HAL_NVIC_SetPriorityGrouping>
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000764:	f000 fc5e 	bl	8001024 <HAL_RCC_GetSysClockFreq>
 8000768:	490f      	ldr	r1, [pc, #60]	; (80007a8 <HAL_Init+0x4c>)
 800076a:	4a10      	ldr	r2, [pc, #64]	; (80007ac <HAL_Init+0x50>)
 800076c:	698b      	ldr	r3, [r1, #24]
 800076e:	f3c3 2303 	ubfx	r3, r3, #8, #4
 8000772:	5cd3      	ldrb	r3, [r2, r3]
 8000774:	f003 031f 	and.w	r3, r3, #31
 8000778:	40d8      	lsrs	r0, r3
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800077a:	698b      	ldr	r3, [r1, #24]
 800077c:	f003 030f 	and.w	r3, r3, #15
 8000780:	5cd3      	ldrb	r3, [r2, r3]
 8000782:	4a0b      	ldr	r2, [pc, #44]	; (80007b0 <HAL_Init+0x54>)
 8000784:	f003 031f 	and.w	r3, r3, #31
 8000788:	fa20 f303 	lsr.w	r3, r0, r3
 800078c:	6013      	str	r3, [r2, #0]
  SystemCoreClock = common_system_clock;
 800078e:	4b09      	ldr	r3, [pc, #36]	; (80007b4 <HAL_Init+0x58>)
 8000790:	6018      	str	r0, [r3, #0]
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000792:	200f      	movs	r0, #15
 8000794:	f7ff fe96 	bl	80004c4 <HAL_InitTick>
 8000798:	4604      	mov	r4, r0
 800079a:	b918      	cbnz	r0, 80007a4 <HAL_Init+0x48>
  HAL_MspInit();
 800079c:	f7ff ffdc 	bl	8000758 <HAL_MspInit>
}
 80007a0:	4620      	mov	r0, r4
 80007a2:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80007a4:	2401      	movs	r4, #1
 80007a6:	e7fb      	b.n	80007a0 <HAL_Init+0x44>
 80007a8:	58024400 	.word	0x58024400
 80007ac:	08002d4c 	.word	0x08002d4c
 80007b0:	20000004 	.word	0x20000004
 80007b4:	20000000 	.word	0x20000000

080007b8 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 80007b8:	4a03      	ldr	r2, [pc, #12]	; (80007c8 <HAL_IncTick+0x10>)
 80007ba:	4b04      	ldr	r3, [pc, #16]	; (80007cc <HAL_IncTick+0x14>)
 80007bc:	6811      	ldr	r1, [r2, #0]
 80007be:	781b      	ldrb	r3, [r3, #0]
 80007c0:	440b      	add	r3, r1
 80007c2:	6013      	str	r3, [r2, #0]
}
 80007c4:	4770      	bx	lr
 80007c6:	bf00      	nop
 80007c8:	20000a60 	.word	0x20000a60
 80007cc:	20000008 	.word	0x20000008

080007d0 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80007d0:	4b01      	ldr	r3, [pc, #4]	; (80007d8 <HAL_GetTick+0x8>)
 80007d2:	6818      	ldr	r0, [r3, #0]
}
 80007d4:	4770      	bx	lr
 80007d6:	bf00      	nop
 80007d8:	20000a60 	.word	0x20000a60

080007dc <HAL_GetREVID>:
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
   return((DBGMCU->IDCODE) >> 16);
 80007dc:	4b01      	ldr	r3, [pc, #4]	; (80007e4 <HAL_GetREVID+0x8>)
 80007de:	6818      	ldr	r0, [r3, #0]
}
 80007e0:	0c00      	lsrs	r0, r0, #16
 80007e2:	4770      	bx	lr
 80007e4:	5c001000 	.word	0x5c001000

080007e8 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80007e8:	4a07      	ldr	r2, [pc, #28]	; (8000808 <HAL_NVIC_SetPriorityGrouping+0x20>)
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80007ea:	0200      	lsls	r0, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80007ec:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80007ee:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80007f2:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80007f6:	041b      	lsls	r3, r3, #16
 80007f8:	0c1b      	lsrs	r3, r3, #16
 80007fa:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80007fe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 8000802:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8000804:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8000806:	4770      	bx	lr
 8000808:	e000ed00 	.word	0xe000ed00

0800080c <HAL_NVIC_SetPriority>:
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800080c:	4b16      	ldr	r3, [pc, #88]	; (8000868 <HAL_NVIC_SetPriority+0x5c>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800080e:	b570      	push	{r4, r5, r6, lr}
 8000810:	68dc      	ldr	r4, [r3, #12]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000812:	f04f 36ff 	mov.w	r6, #4294967295
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000816:	f3c4 2402 	ubfx	r4, r4, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800081a:	f1c4 0507 	rsb	r5, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800081e:	1d23      	adds	r3, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000820:	2d04      	cmp	r5, #4
 8000822:	bf28      	it	cs
 8000824:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000826:	2b06      	cmp	r3, #6
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000828:	fa06 f305 	lsl.w	r3, r6, r5
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800082c:	bf8c      	ite	hi
 800082e:	3c03      	subhi	r4, #3
 8000830:	2400      	movls	r4, #0
  if ((int32_t)(IRQn) >= 0)
 8000832:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000834:	ea21 0303 	bic.w	r3, r1, r3
 8000838:	fa03 f304 	lsl.w	r3, r3, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800083c:	fa06 f404 	lsl.w	r4, r6, r4
 8000840:	ea22 0404 	bic.w	r4, r2, r4
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000844:	ea43 0304 	orr.w	r3, r3, r4
 8000848:	ea4f 1303 	mov.w	r3, r3, lsl #4
 800084c:	b2db      	uxtb	r3, r3
  if ((int32_t)(IRQn) >= 0)
 800084e:	db06      	blt.n	800085e <HAL_NVIC_SetPriority+0x52>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000850:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8000854:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8000858:	f880 3300 	strb.w	r3, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 800085c:	bd70      	pop	{r4, r5, r6, pc}
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800085e:	f000 000f 	and.w	r0, r0, #15
 8000862:	4a02      	ldr	r2, [pc, #8]	; (800086c <HAL_NVIC_SetPriority+0x60>)
 8000864:	5413      	strb	r3, [r2, r0]
 8000866:	e7f9      	b.n	800085c <HAL_NVIC_SetPriority+0x50>
 8000868:	e000ed00 	.word	0xe000ed00
 800086c:	e000ed14 	.word	0xe000ed14

08000870 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8000870:	2800      	cmp	r0, #0
 8000872:	db08      	blt.n	8000886 <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000874:	0942      	lsrs	r2, r0, #5
 8000876:	2301      	movs	r3, #1
 8000878:	f000 001f 	and.w	r0, r0, #31
 800087c:	fa03 f000 	lsl.w	r0, r3, r0
 8000880:	4b01      	ldr	r3, [pc, #4]	; (8000888 <HAL_NVIC_EnableIRQ+0x18>)
 8000882:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8000886:	4770      	bx	lr
 8000888:	e000e100 	.word	0xe000e100

0800088c <HAL_EXTI_RegisterCallback>:
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
  HAL_StatusTypeDef status = HAL_OK;

  /* Check null pointer */
  if (hexti == NULL)
 800088c:	b118      	cbz	r0, 8000896 <HAL_EXTI_RegisterCallback+0xa>
  {
    return HAL_ERROR;
  }

  switch (CallbackID)
 800088e:	b911      	cbnz	r1, 8000896 <HAL_EXTI_RegisterCallback+0xa>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 8000890:	6042      	str	r2, [r0, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000892:	4608      	mov	r0, r1
      break;
 8000894:	4770      	bx	lr

    default:
      status = HAL_ERROR;
 8000896:	2001      	movs	r0, #1
      break;
  }

  return status;
}
 8000898:	4770      	bx	lr

0800089a <HAL_EXTI_GetHandle>:
{
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 800089a:	b110      	cbz	r0, 80008a2 <HAL_EXTI_GetHandle+0x8>
    return HAL_ERROR;
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 800089c:	6001      	str	r1, [r0, #0]

    return HAL_OK;
 800089e:	2000      	movs	r0, #0
 80008a0:	4770      	bx	lr
    return HAL_ERROR;
 80008a2:	2001      	movs	r0, #1
  }
}
 80008a4:	4770      	bx	lr
	...

080008a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80008a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80008ac:	680b      	ldr	r3, [r1, #0]
{
 80008ae:	b085      	sub	sp, #20
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008b0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8000a74 <HAL_GPIO_Init+0x1cc>
          temp |= iocurrent;
        }
        EXTI_CurrentCPU->EMR1 = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80008b4:	f04f 49b0 	mov.w	r9, #1476395008	; 0x58000000
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80008b8:	9301      	str	r3, [sp, #4]
  uint32_t position = 0x00U;
 80008ba:	2300      	movs	r3, #0
        temp = EXTI_CurrentCPU->IMR1;
 80008bc:	f8df c1b8 	ldr.w	ip, [pc, #440]	; 8000a78 <HAL_GPIO_Init+0x1d0>
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80008c0:	9a01      	ldr	r2, [sp, #4]
 80008c2:	40da      	lsrs	r2, r3
 80008c4:	d102      	bne.n	80008cc <HAL_GPIO_Init+0x24>
      }
    }

    position++;
  }
}
 80008c6:	b005      	add	sp, #20
 80008c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80008cc:	2701      	movs	r7, #1
    if (iocurrent != 0x00U)
 80008ce:	9a01      	ldr	r2, [sp, #4]
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80008d0:	409f      	lsls	r7, r3
    if (iocurrent != 0x00U)
 80008d2:	ea17 0502 	ands.w	r5, r7, r2
 80008d6:	f000 80b6 	beq.w	8000a46 <HAL_GPIO_Init+0x19e>
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80008da:	684a      	ldr	r2, [r1, #4]
 80008dc:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 80008e0:	2403      	movs	r4, #3
 80008e2:	f022 0a10 	bic.w	sl, r2, #16
 80008e6:	fa04 f40e 	lsl.w	r4, r4, lr
 80008ea:	f10a 36ff 	add.w	r6, sl, #4294967295
 80008ee:	43e4      	mvns	r4, r4
 80008f0:	2e01      	cmp	r6, #1
 80008f2:	d810      	bhi.n	8000916 <HAL_GPIO_Init+0x6e>
        temp = GPIOx->OSPEEDR;
 80008f4:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80008f6:	ea06 0b04 	and.w	fp, r6, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 80008fa:	68ce      	ldr	r6, [r1, #12]
 80008fc:	fa06 f60e 	lsl.w	r6, r6, lr
 8000900:	ea46 060b 	orr.w	r6, r6, fp
        GPIOx->OSPEEDR = temp;
 8000904:	6086      	str	r6, [r0, #8]
        temp = GPIOx->OTYPER;
 8000906:	6846      	ldr	r6, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000908:	ea26 0707 	bic.w	r7, r6, r7
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800090c:	f3c2 1600 	ubfx	r6, r2, #4, #1
 8000910:	409e      	lsls	r6, r3
 8000912:	4337      	orrs	r7, r6
        GPIOx->OTYPER = temp;
 8000914:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 8000916:	68c7      	ldr	r7, [r0, #12]
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000918:	f1ba 0f02 	cmp.w	sl, #2
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800091c:	688e      	ldr	r6, [r1, #8]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800091e:	ea07 0704 	and.w	r7, r7, r4
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000922:	fa06 f60e 	lsl.w	r6, r6, lr
 8000926:	ea46 0607 	orr.w	r6, r6, r7
      GPIOx->PUPDR = temp;
 800092a:	60c6      	str	r6, [r0, #12]
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800092c:	d114      	bne.n	8000958 <HAL_GPIO_Init+0xb0>
        temp = GPIOx->AFR[position >> 3U];
 800092e:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8000932:	f003 0b07 	and.w	fp, r3, #7
 8000936:	270f      	movs	r7, #15
 8000938:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
 800093c:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = GPIOx->AFR[position >> 3U];
 8000940:	f8da 6020 	ldr.w	r6, [sl, #32]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8000944:	fa07 f70b 	lsl.w	r7, r7, fp
 8000948:	ea26 0707 	bic.w	r7, r6, r7
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800094c:	690e      	ldr	r6, [r1, #16]
 800094e:	fa06 f60b 	lsl.w	r6, r6, fp
 8000952:	433e      	orrs	r6, r7
        GPIOx->AFR[position >> 3U] = temp;
 8000954:	f8ca 6020 	str.w	r6, [sl, #32]
      temp = GPIOx->MODER;
 8000958:	6806      	ldr	r6, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800095a:	4034      	ands	r4, r6
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800095c:	f002 0603 	and.w	r6, r2, #3
 8000960:	fa06 fe0e 	lsl.w	lr, r6, lr
 8000964:	ea4e 0404 	orr.w	r4, lr, r4
      GPIOx->MODER = temp;
 8000968:	6004      	str	r4, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800096a:	00d4      	lsls	r4, r2, #3
 800096c:	d56b      	bpl.n	8000a46 <HAL_GPIO_Init+0x19e>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800096e:	f8d8 40f4 	ldr.w	r4, [r8, #244]	; 0xf4
 8000972:	f023 0603 	bic.w	r6, r3, #3
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8000976:	f003 0703 	and.w	r7, r3, #3
 800097a:	f04f 0e0f 	mov.w	lr, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800097e:	f044 0402 	orr.w	r4, r4, #2
 8000982:	f106 46b0 	add.w	r6, r6, #1476395008	; 0x58000000
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8000986:	00bf      	lsls	r7, r7, #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000988:	f8c8 40f4 	str.w	r4, [r8, #244]	; 0xf4
 800098c:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000990:	f8d8 40f4 	ldr.w	r4, [r8, #244]	; 0xf4
 8000994:	f004 0402 	and.w	r4, r4, #2
 8000998:	9403      	str	r4, [sp, #12]
 800099a:	9c03      	ldr	r4, [sp, #12]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800099c:	fa0e f407 	lsl.w	r4, lr, r7
        temp = SYSCFG->EXTICR[position >> 2U];
 80009a0:	f8d6 a008 	ldr.w	sl, [r6, #8]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80009a4:	ea2a 0e04 	bic.w	lr, sl, r4
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80009a8:	4c31      	ldr	r4, [pc, #196]	; (8000a70 <HAL_GPIO_Init+0x1c8>)
 80009aa:	42a0      	cmp	r0, r4
 80009ac:	d04d      	beq.n	8000a4a <HAL_GPIO_Init+0x1a2>
 80009ae:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80009b2:	42a0      	cmp	r0, r4
 80009b4:	d04b      	beq.n	8000a4e <HAL_GPIO_Init+0x1a6>
 80009b6:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80009ba:	42a0      	cmp	r0, r4
 80009bc:	d049      	beq.n	8000a52 <HAL_GPIO_Init+0x1aa>
 80009be:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80009c2:	42a0      	cmp	r0, r4
 80009c4:	d047      	beq.n	8000a56 <HAL_GPIO_Init+0x1ae>
 80009c6:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80009ca:	42a0      	cmp	r0, r4
 80009cc:	d045      	beq.n	8000a5a <HAL_GPIO_Init+0x1b2>
 80009ce:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80009d2:	42a0      	cmp	r0, r4
 80009d4:	d043      	beq.n	8000a5e <HAL_GPIO_Init+0x1b6>
 80009d6:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80009da:	42a0      	cmp	r0, r4
 80009dc:	d041      	beq.n	8000a62 <HAL_GPIO_Init+0x1ba>
 80009de:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80009e2:	42a0      	cmp	r0, r4
 80009e4:	d03f      	beq.n	8000a66 <HAL_GPIO_Init+0x1be>
 80009e6:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80009ea:	42a0      	cmp	r0, r4
 80009ec:	d03d      	beq.n	8000a6a <HAL_GPIO_Init+0x1c2>
 80009ee:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80009f2:	42a0      	cmp	r0, r4
 80009f4:	bf14      	ite	ne
 80009f6:	240a      	movne	r4, #10
 80009f8:	2409      	moveq	r4, #9
 80009fa:	40bc      	lsls	r4, r7
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80009fc:	03d7      	lsls	r7, r2, #15
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80009fe:	ea44 040e 	orr.w	r4, r4, lr
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000a02:	60b4      	str	r4, [r6, #8]
        temp &= ~(iocurrent);
 8000a04:	ea6f 0605 	mvn.w	r6, r5
        temp = EXTI_CurrentCPU->IMR1;
 8000a08:	f8dc 4000 	ldr.w	r4, [ip]
        temp &= ~(iocurrent);
 8000a0c:	bf54      	ite	pl
 8000a0e:	4034      	andpl	r4, r6
          temp |= iocurrent;
 8000a10:	432c      	orrmi	r4, r5
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000a12:	0397      	lsls	r7, r2, #14
        EXTI_CurrentCPU->IMR1 = temp;
 8000a14:	f8cc 4000 	str.w	r4, [ip]
        temp = EXTI_CurrentCPU->EMR1;
 8000a18:	f8dc 4004 	ldr.w	r4, [ip, #4]
        temp &= ~(iocurrent);
 8000a1c:	bf54      	ite	pl
 8000a1e:	4034      	andpl	r4, r6
          temp |= iocurrent;
 8000a20:	432c      	orrmi	r4, r5
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000a22:	02d7      	lsls	r7, r2, #11
        EXTI->RTSR1 = temp;
 8000a24:	f04f 47b0 	mov.w	r7, #1476395008	; 0x58000000
        EXTI_CurrentCPU->EMR1 = temp;
 8000a28:	f8cc 4004 	str.w	r4, [ip, #4]
        temp = EXTI->RTSR1;
 8000a2c:	f8d9 4000 	ldr.w	r4, [r9]
        temp &= ~(iocurrent);
 8000a30:	bf54      	ite	pl
 8000a32:	4034      	andpl	r4, r6
          temp |= iocurrent;
 8000a34:	432c      	orrmi	r4, r5
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000a36:	0292      	lsls	r2, r2, #10
        EXTI->RTSR1 = temp;
 8000a38:	603c      	str	r4, [r7, #0]
        temp = EXTI->FTSR1;
 8000a3a:	687c      	ldr	r4, [r7, #4]
        temp &= ~(iocurrent);
 8000a3c:	bf54      	ite	pl
 8000a3e:	4034      	andpl	r4, r6
          temp |= iocurrent;
 8000a40:	432c      	orrmi	r4, r5
        EXTI->FTSR1 = temp;
 8000a42:	f8c9 4004 	str.w	r4, [r9, #4]
    position++;
 8000a46:	3301      	adds	r3, #1
 8000a48:	e73a      	b.n	80008c0 <HAL_GPIO_Init+0x18>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000a4a:	2400      	movs	r4, #0
 8000a4c:	e7d5      	b.n	80009fa <HAL_GPIO_Init+0x152>
 8000a4e:	2401      	movs	r4, #1
 8000a50:	e7d3      	b.n	80009fa <HAL_GPIO_Init+0x152>
 8000a52:	2402      	movs	r4, #2
 8000a54:	e7d1      	b.n	80009fa <HAL_GPIO_Init+0x152>
 8000a56:	2403      	movs	r4, #3
 8000a58:	e7cf      	b.n	80009fa <HAL_GPIO_Init+0x152>
 8000a5a:	2404      	movs	r4, #4
 8000a5c:	e7cd      	b.n	80009fa <HAL_GPIO_Init+0x152>
 8000a5e:	2405      	movs	r4, #5
 8000a60:	e7cb      	b.n	80009fa <HAL_GPIO_Init+0x152>
 8000a62:	2406      	movs	r4, #6
 8000a64:	e7c9      	b.n	80009fa <HAL_GPIO_Init+0x152>
 8000a66:	2407      	movs	r4, #7
 8000a68:	e7c7      	b.n	80009fa <HAL_GPIO_Init+0x152>
 8000a6a:	2408      	movs	r4, #8
 8000a6c:	e7c5      	b.n	80009fa <HAL_GPIO_Init+0x152>
 8000a6e:	bf00      	nop
 8000a70:	58020000 	.word	0x58020000
 8000a74:	58024400 	.word	0x58024400
 8000a78:	58000080 	.word	0x58000080

08000a7c <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000a7c:	b10a      	cbz	r2, 8000a82 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8000a7e:	6181      	str	r1, [r0, #24]
  }
}
 8000a80:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8000a82:	0409      	lsls	r1, r1, #16
 8000a84:	e7fb      	b.n	8000a7e <HAL_GPIO_WritePin+0x2>

08000a86 <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8000a86:	6943      	ldr	r3, [r0, #20]
 8000a88:	ea31 0303 	bics.w	r3, r1, r3
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8000a8c:	bf08      	it	eq
 8000a8e:	0409      	lsleq	r1, r1, #16
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
 8000a90:	6181      	str	r1, [r0, #24]
  }
}
 8000a92:	4770      	bx	lr

08000a94 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000a94:	b508      	push	{r3, lr}
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 8000a96:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000a9a:	f8d3 1088 	ldr.w	r1, [r3, #136]	; 0x88
 8000a9e:	4201      	tst	r1, r0
 8000aa0:	d003      	beq.n	8000aaa <HAL_GPIO_EXTI_IRQHandler+0x16>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000aa2:	f8c3 0088 	str.w	r0, [r3, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000aa6:	f7ff fd07 	bl	80004b8 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 8000aaa:	bd08      	pop	{r3, pc}

08000aac <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8000aac:	b538      	push	{r3, r4, r5, lr}
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8000aae:	4c10      	ldr	r4, [pc, #64]	; (8000af0 <HAL_PWREx_ConfigSupply+0x44>)
 8000ab0:	68e3      	ldr	r3, [r4, #12]
 8000ab2:	f013 0f04 	tst.w	r3, #4
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8000ab6:	68e3      	ldr	r3, [r4, #12]
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8000ab8:	d105      	bne.n	8000ac6 <HAL_PWREx_ConfigSupply+0x1a>
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8000aba:	f003 0307 	and.w	r3, r3, #7
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8000abe:	1a18      	subs	r0, r3, r0
 8000ac0:	bf18      	it	ne
 8000ac2:	2001      	movne	r0, #1
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
}
 8000ac4:	bd38      	pop	{r3, r4, r5, pc}
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8000ac6:	f023 0307 	bic.w	r3, r3, #7
 8000aca:	4318      	orrs	r0, r3
 8000acc:	60e0      	str	r0, [r4, #12]
  tickstart = HAL_GetTick ();
 8000ace:	f7ff fe7f 	bl	80007d0 <HAL_GetTick>
 8000ad2:	4605      	mov	r5, r0
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8000ad4:	6863      	ldr	r3, [r4, #4]
 8000ad6:	049b      	lsls	r3, r3, #18
 8000ad8:	d501      	bpl.n	8000ade <HAL_PWREx_ConfigSupply+0x32>
  return HAL_OK;
 8000ada:	2000      	movs	r0, #0
 8000adc:	e7f2      	b.n	8000ac4 <HAL_PWREx_ConfigSupply+0x18>
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8000ade:	f7ff fe77 	bl	80007d0 <HAL_GetTick>
 8000ae2:	1b40      	subs	r0, r0, r5
 8000ae4:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8000ae8:	d9f4      	bls.n	8000ad4 <HAL_PWREx_ConfigSupply+0x28>
      return HAL_ERROR;
 8000aea:	2001      	movs	r0, #1
 8000aec:	e7ea      	b.n	8000ac4 <HAL_PWREx_ConfigSupply+0x18>
 8000aee:	bf00      	nop
 8000af0:	58024800 	.word	0x58024800

08000af4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000af4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000af6:	4604      	mov	r4, r0
 8000af8:	b908      	cbnz	r0, 8000afe <HAL_RCC_OscConfig+0xa>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
      {
        return HAL_ERROR;
 8000afa:	2001      	movs	r0, #1
 8000afc:	e08e      	b.n	8000c1c <HAL_RCC_OscConfig+0x128>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000afe:	6803      	ldr	r3, [r0, #0]
 8000b00:	07dd      	lsls	r5, r3, #31
 8000b02:	d45e      	bmi.n	8000bc2 <HAL_RCC_OscConfig+0xce>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000b04:	6823      	ldr	r3, [r4, #0]
 8000b06:	0798      	lsls	r0, r3, #30
 8000b08:	f100 80b0 	bmi.w	8000c6c <HAL_RCC_OscConfig+0x178>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8000b0c:	6823      	ldr	r3, [r4, #0]
 8000b0e:	06da      	lsls	r2, r3, #27
 8000b10:	d527      	bpl.n	8000b62 <HAL_RCC_OscConfig+0x6e>
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000b12:	4baa      	ldr	r3, [pc, #680]	; (8000dbc <HAL_RCC_OscConfig+0x2c8>)
 8000b14:	691a      	ldr	r2, [r3, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8000b16:	6a99      	ldr	r1, [r3, #40]	; 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000b18:	f002 0238 	and.w	r2, r2, #56	; 0x38
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8000b1c:	2a08      	cmp	r2, #8
 8000b1e:	d007      	beq.n	8000b30 <HAL_RCC_OscConfig+0x3c>
 8000b20:	2a18      	cmp	r2, #24
 8000b22:	f040 810e 	bne.w	8000d42 <HAL_RCC_OscConfig+0x24e>
 8000b26:	f001 0203 	and.w	r2, r1, #3
 8000b2a:	2a01      	cmp	r2, #1
 8000b2c:	f040 8109 	bne.w	8000d42 <HAL_RCC_OscConfig+0x24e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8000b30:	681b      	ldr	r3, [r3, #0]
 8000b32:	05db      	lsls	r3, r3, #23
 8000b34:	d502      	bpl.n	8000b3c <HAL_RCC_OscConfig+0x48>
 8000b36:	69e3      	ldr	r3, [r4, #28]
 8000b38:	2b80      	cmp	r3, #128	; 0x80
 8000b3a:	d1de      	bne.n	8000afa <HAL_RCC_OscConfig+0x6>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8000b3c:	f7ff fe4e 	bl	80007dc <HAL_GetREVID>
 8000b40:	f241 0303 	movw	r3, #4099	; 0x1003
 8000b44:	6a21      	ldr	r1, [r4, #32]
 8000b46:	4298      	cmp	r0, r3
 8000b48:	4b9c      	ldr	r3, [pc, #624]	; (8000dbc <HAL_RCC_OscConfig+0x2c8>)
 8000b4a:	f200 80f3 	bhi.w	8000d34 <HAL_RCC_OscConfig+0x240>
 8000b4e:	685a      	ldr	r2, [r3, #4]
 8000b50:	2920      	cmp	r1, #32
 8000b52:	f022 42f8 	bic.w	r2, r2, #2080374784	; 0x7c000000
 8000b56:	bf0c      	ite	eq
 8000b58:	f042 4280 	orreq.w	r2, r2, #1073741824	; 0x40000000
 8000b5c:	ea42 6281 	orrne.w	r2, r2, r1, lsl #26
 8000b60:	605a      	str	r2, [r3, #4]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000b62:	6823      	ldr	r3, [r4, #0]
 8000b64:	0719      	lsls	r1, r3, #28
 8000b66:	f100 812d 	bmi.w	8000dc4 <HAL_RCC_OscConfig+0x2d0>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8000b6a:	6823      	ldr	r3, [r4, #0]
 8000b6c:	069a      	lsls	r2, r3, #26
 8000b6e:	f100 814e 	bmi.w	8000e0e <HAL_RCC_OscConfig+0x31a>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000b72:	6823      	ldr	r3, [r4, #0]
 8000b74:	075d      	lsls	r5, r3, #29
 8000b76:	d51e      	bpl.n	8000bb6 <HAL_RCC_OscConfig+0xc2>
    PWR->CR1 |= PWR_CR1_DBP;
 8000b78:	4d91      	ldr	r5, [pc, #580]	; (8000dc0 <HAL_RCC_OscConfig+0x2cc>)
 8000b7a:	682b      	ldr	r3, [r5, #0]
 8000b7c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b80:	602b      	str	r3, [r5, #0]
    tickstart = HAL_GetTick();
 8000b82:	f7ff fe25 	bl	80007d0 <HAL_GetTick>
 8000b86:	4606      	mov	r6, r0
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8000b88:	682b      	ldr	r3, [r5, #0]
 8000b8a:	05da      	lsls	r2, r3, #23
 8000b8c:	f140 8164 	bpl.w	8000e58 <HAL_RCC_OscConfig+0x364>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000b90:	68a3      	ldr	r3, [r4, #8]
 8000b92:	4d8a      	ldr	r5, [pc, #552]	; (8000dbc <HAL_RCC_OscConfig+0x2c8>)
 8000b94:	2b01      	cmp	r3, #1
 8000b96:	f040 8166 	bne.w	8000e66 <HAL_RCC_OscConfig+0x372>
 8000b9a:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000b9c:	f043 0301 	orr.w	r3, r3, #1
 8000ba0:	672b      	str	r3, [r5, #112]	; 0x70
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000ba2:	f241 3588 	movw	r5, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8000ba6:	f7ff fe13 	bl	80007d0 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8000baa:	4e84      	ldr	r6, [pc, #528]	; (8000dbc <HAL_RCC_OscConfig+0x2c8>)
      tickstart = HAL_GetTick();
 8000bac:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8000bae:	6f33      	ldr	r3, [r6, #112]	; 0x70
 8000bb0:	079b      	lsls	r3, r3, #30
 8000bb2:	f140 817e 	bpl.w	8000eb2 <HAL_RCC_OscConfig+0x3be>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000bb6:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8000bb8:	2800      	cmp	r0, #0
 8000bba:	f040 8181 	bne.w	8000ec0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
  }
  return HAL_OK;
 8000bbe:	2000      	movs	r0, #0
 8000bc0:	e02c      	b.n	8000c1c <HAL_RCC_OscConfig+0x128>
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000bc2:	4b7e      	ldr	r3, [pc, #504]	; (8000dbc <HAL_RCC_OscConfig+0x2c8>)
 8000bc4:	691a      	ldr	r2, [r3, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8000bc6:	6a99      	ldr	r1, [r3, #40]	; 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000bc8:	f002 0238 	and.w	r2, r2, #56	; 0x38
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8000bcc:	2a10      	cmp	r2, #16
 8000bce:	d005      	beq.n	8000bdc <HAL_RCC_OscConfig+0xe8>
 8000bd0:	2a18      	cmp	r2, #24
 8000bd2:	d10a      	bne.n	8000bea <HAL_RCC_OscConfig+0xf6>
 8000bd4:	f001 0203 	and.w	r2, r1, #3
 8000bd8:	2a02      	cmp	r2, #2
 8000bda:	d106      	bne.n	8000bea <HAL_RCC_OscConfig+0xf6>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	0399      	lsls	r1, r3, #14
 8000be0:	d590      	bpl.n	8000b04 <HAL_RCC_OscConfig+0x10>
 8000be2:	6863      	ldr	r3, [r4, #4]
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d18d      	bne.n	8000b04 <HAL_RCC_OscConfig+0x10>
 8000be8:	e787      	b.n	8000afa <HAL_RCC_OscConfig+0x6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000bea:	6863      	ldr	r3, [r4, #4]
 8000bec:	4d73      	ldr	r5, [pc, #460]	; (8000dbc <HAL_RCC_OscConfig+0x2c8>)
 8000bee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000bf2:	d114      	bne.n	8000c1e <HAL_RCC_OscConfig+0x12a>
 8000bf4:	682b      	ldr	r3, [r5, #0]
 8000bf6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000bfa:	602b      	str	r3, [r5, #0]
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000bfc:	f241 3588 	movw	r5, #5000	; 0x1388
        tickstart = HAL_GetTick();
 8000c00:	f7ff fde6 	bl	80007d0 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8000c04:	4e6d      	ldr	r6, [pc, #436]	; (8000dbc <HAL_RCC_OscConfig+0x2c8>)
        tickstart = HAL_GetTick();
 8000c06:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8000c08:	6833      	ldr	r3, [r6, #0]
 8000c0a:	039a      	lsls	r2, r3, #14
 8000c0c:	f53f af7a 	bmi.w	8000b04 <HAL_RCC_OscConfig+0x10>
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000c10:	f7ff fdde 	bl	80007d0 <HAL_GetTick>
 8000c14:	1bc0      	subs	r0, r0, r7
 8000c16:	42a8      	cmp	r0, r5
 8000c18:	d9f6      	bls.n	8000c08 <HAL_RCC_OscConfig+0x114>
            return HAL_TIMEOUT;
 8000c1a:	2003      	movs	r0, #3
}
 8000c1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000c1e:	b9b3      	cbnz	r3, 8000c4e <HAL_RCC_OscConfig+0x15a>
 8000c20:	682b      	ldr	r3, [r5, #0]
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000c22:	f241 3788 	movw	r7, #5000	; 0x1388
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000c26:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000c2a:	602b      	str	r3, [r5, #0]
 8000c2c:	682b      	ldr	r3, [r5, #0]
 8000c2e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000c32:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8000c34:	f7ff fdcc 	bl	80007d0 <HAL_GetTick>
 8000c38:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8000c3a:	682b      	ldr	r3, [r5, #0]
 8000c3c:	039b      	lsls	r3, r3, #14
 8000c3e:	f57f af61 	bpl.w	8000b04 <HAL_RCC_OscConfig+0x10>
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000c42:	f7ff fdc5 	bl	80007d0 <HAL_GetTick>
 8000c46:	1b80      	subs	r0, r0, r6
 8000c48:	42b8      	cmp	r0, r7
 8000c4a:	d9f6      	bls.n	8000c3a <HAL_RCC_OscConfig+0x146>
 8000c4c:	e7e5      	b.n	8000c1a <HAL_RCC_OscConfig+0x126>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000c4e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000c52:	682b      	ldr	r3, [r5, #0]
 8000c54:	d103      	bne.n	8000c5e <HAL_RCC_OscConfig+0x16a>
 8000c56:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000c5a:	602b      	str	r3, [r5, #0]
 8000c5c:	e7ca      	b.n	8000bf4 <HAL_RCC_OscConfig+0x100>
 8000c5e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000c62:	602b      	str	r3, [r5, #0]
 8000c64:	682b      	ldr	r3, [r5, #0]
 8000c66:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000c6a:	e7c6      	b.n	8000bfa <HAL_RCC_OscConfig+0x106>
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000c6c:	4b53      	ldr	r3, [pc, #332]	; (8000dbc <HAL_RCC_OscConfig+0x2c8>)
 8000c6e:	691a      	ldr	r2, [r3, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8000c70:	6a99      	ldr	r1, [r3, #40]	; 0x28
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8000c72:	f012 0238 	ands.w	r2, r2, #56	; 0x38
 8000c76:	d003      	beq.n	8000c80 <HAL_RCC_OscConfig+0x18c>
 8000c78:	2a18      	cmp	r2, #24
 8000c7a:	d120      	bne.n	8000cbe <HAL_RCC_OscConfig+0x1ca>
 8000c7c:	078e      	lsls	r6, r1, #30
 8000c7e:	d11e      	bne.n	8000cbe <HAL_RCC_OscConfig+0x1ca>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	075d      	lsls	r5, r3, #29
 8000c84:	d503      	bpl.n	8000c8e <HAL_RCC_OscConfig+0x19a>
 8000c86:	68e3      	ldr	r3, [r4, #12]
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	f43f af36 	beq.w	8000afa <HAL_RCC_OscConfig+0x6>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000c8e:	f7ff fda5 	bl	80007dc <HAL_GetREVID>
 8000c92:	f241 0303 	movw	r3, #4099	; 0x1003
 8000c96:	6921      	ldr	r1, [r4, #16]
 8000c98:	4298      	cmp	r0, r3
 8000c9a:	4b48      	ldr	r3, [pc, #288]	; (8000dbc <HAL_RCC_OscConfig+0x2c8>)
 8000c9c:	685a      	ldr	r2, [r3, #4]
 8000c9e:	d809      	bhi.n	8000cb4 <HAL_RCC_OscConfig+0x1c0>
 8000ca0:	f422 327c 	bic.w	r2, r2, #258048	; 0x3f000
 8000ca4:	2940      	cmp	r1, #64	; 0x40
 8000ca6:	bf0c      	ite	eq
 8000ca8:	f442 3200 	orreq.w	r2, r2, #131072	; 0x20000
 8000cac:	ea42 3201 	orrne.w	r2, r2, r1, lsl #12
 8000cb0:	605a      	str	r2, [r3, #4]
 8000cb2:	e72b      	b.n	8000b0c <HAL_RCC_OscConfig+0x18>
 8000cb4:	f022 42fe 	bic.w	r2, r2, #2130706432	; 0x7f000000
 8000cb8:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8000cbc:	e7f8      	b.n	8000cb0 <HAL_RCC_OscConfig+0x1bc>
 8000cbe:	4d3f      	ldr	r5, [pc, #252]	; (8000dbc <HAL_RCC_OscConfig+0x2c8>)
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8000cc0:	68e2      	ldr	r2, [r4, #12]
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8000cc2:	682b      	ldr	r3, [r5, #0]
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8000cc4:	b332      	cbz	r2, 8000d14 <HAL_RCC_OscConfig+0x220>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8000cc6:	f023 0319 	bic.w	r3, r3, #25
 8000cca:	4313      	orrs	r3, r2
 8000ccc:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8000cce:	f7ff fd7f 	bl	80007d0 <HAL_GetTick>
 8000cd2:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8000cd4:	682b      	ldr	r3, [r5, #0]
 8000cd6:	0758      	lsls	r0, r3, #29
 8000cd8:	d511      	bpl.n	8000cfe <HAL_RCC_OscConfig+0x20a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000cda:	f7ff fd7f 	bl	80007dc <HAL_GetREVID>
 8000cde:	f241 0303 	movw	r3, #4099	; 0x1003
 8000ce2:	6922      	ldr	r2, [r4, #16]
 8000ce4:	4298      	cmp	r0, r3
 8000ce6:	686b      	ldr	r3, [r5, #4]
 8000ce8:	d80f      	bhi.n	8000d0a <HAL_RCC_OscConfig+0x216>
 8000cea:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8000cee:	2a40      	cmp	r2, #64	; 0x40
 8000cf0:	bf0c      	ite	eq
 8000cf2:	f443 3300 	orreq.w	r3, r3, #131072	; 0x20000
 8000cf6:	ea43 3302 	orrne.w	r3, r3, r2, lsl #12
 8000cfa:	606b      	str	r3, [r5, #4]
 8000cfc:	e706      	b.n	8000b0c <HAL_RCC_OscConfig+0x18>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000cfe:	f7ff fd67 	bl	80007d0 <HAL_GetTick>
 8000d02:	1b80      	subs	r0, r0, r6
 8000d04:	2802      	cmp	r0, #2
 8000d06:	d9e5      	bls.n	8000cd4 <HAL_RCC_OscConfig+0x1e0>
 8000d08:	e787      	b.n	8000c1a <HAL_RCC_OscConfig+0x126>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000d0a:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8000d0e:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8000d12:	e7f2      	b.n	8000cfa <HAL_RCC_OscConfig+0x206>
        __HAL_RCC_HSI_DISABLE();
 8000d14:	f023 0301 	bic.w	r3, r3, #1
 8000d18:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8000d1a:	f7ff fd59 	bl	80007d0 <HAL_GetTick>
 8000d1e:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8000d20:	682b      	ldr	r3, [r5, #0]
 8000d22:	0759      	lsls	r1, r3, #29
 8000d24:	f57f aef2 	bpl.w	8000b0c <HAL_RCC_OscConfig+0x18>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000d28:	f7ff fd52 	bl	80007d0 <HAL_GetTick>
 8000d2c:	1b80      	subs	r0, r0, r6
 8000d2e:	2802      	cmp	r0, #2
 8000d30:	d9f6      	bls.n	8000d20 <HAL_RCC_OscConfig+0x22c>
 8000d32:	e772      	b.n	8000c1a <HAL_RCC_OscConfig+0x126>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8000d34:	68da      	ldr	r2, [r3, #12]
 8000d36:	f022 527c 	bic.w	r2, r2, #1056964608	; 0x3f000000
 8000d3a:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8000d3e:	60da      	str	r2, [r3, #12]
 8000d40:	e70f      	b.n	8000b62 <HAL_RCC_OscConfig+0x6e>
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8000d42:	69e3      	ldr	r3, [r4, #28]
 8000d44:	4d1d      	ldr	r5, [pc, #116]	; (8000dbc <HAL_RCC_OscConfig+0x2c8>)
 8000d46:	b343      	cbz	r3, 8000d9a <HAL_RCC_OscConfig+0x2a6>
        __HAL_RCC_CSI_ENABLE();
 8000d48:	682b      	ldr	r3, [r5, #0]
 8000d4a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d4e:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8000d50:	f7ff fd3e 	bl	80007d0 <HAL_GetTick>
 8000d54:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8000d56:	682b      	ldr	r3, [r5, #0]
 8000d58:	05df      	lsls	r7, r3, #23
 8000d5a:	d511      	bpl.n	8000d80 <HAL_RCC_OscConfig+0x28c>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8000d5c:	f7ff fd3e 	bl	80007dc <HAL_GetREVID>
 8000d60:	f241 0303 	movw	r3, #4099	; 0x1003
 8000d64:	6a22      	ldr	r2, [r4, #32]
 8000d66:	4298      	cmp	r0, r3
 8000d68:	d810      	bhi.n	8000d8c <HAL_RCC_OscConfig+0x298>
 8000d6a:	686b      	ldr	r3, [r5, #4]
 8000d6c:	2a20      	cmp	r2, #32
 8000d6e:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8000d72:	bf0c      	ite	eq
 8000d74:	f043 4380 	orreq.w	r3, r3, #1073741824	; 0x40000000
 8000d78:	ea43 6382 	orrne.w	r3, r3, r2, lsl #26
 8000d7c:	606b      	str	r3, [r5, #4]
 8000d7e:	e6f0      	b.n	8000b62 <HAL_RCC_OscConfig+0x6e>
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8000d80:	f7ff fd26 	bl	80007d0 <HAL_GetTick>
 8000d84:	1b80      	subs	r0, r0, r6
 8000d86:	2802      	cmp	r0, #2
 8000d88:	d9e5      	bls.n	8000d56 <HAL_RCC_OscConfig+0x262>
 8000d8a:	e746      	b.n	8000c1a <HAL_RCC_OscConfig+0x126>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8000d8c:	68eb      	ldr	r3, [r5, #12]
 8000d8e:	f023 537c 	bic.w	r3, r3, #1056964608	; 0x3f000000
 8000d92:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8000d96:	60eb      	str	r3, [r5, #12]
 8000d98:	e6e3      	b.n	8000b62 <HAL_RCC_OscConfig+0x6e>
        __HAL_RCC_CSI_DISABLE();
 8000d9a:	682b      	ldr	r3, [r5, #0]
 8000d9c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000da0:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8000da2:	f7ff fd15 	bl	80007d0 <HAL_GetTick>
 8000da6:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8000da8:	682b      	ldr	r3, [r5, #0]
 8000daa:	05d8      	lsls	r0, r3, #23
 8000dac:	f57f aed9 	bpl.w	8000b62 <HAL_RCC_OscConfig+0x6e>
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8000db0:	f7ff fd0e 	bl	80007d0 <HAL_GetTick>
 8000db4:	1b80      	subs	r0, r0, r6
 8000db6:	2802      	cmp	r0, #2
 8000db8:	d9f6      	bls.n	8000da8 <HAL_RCC_OscConfig+0x2b4>
 8000dba:	e72e      	b.n	8000c1a <HAL_RCC_OscConfig+0x126>
 8000dbc:	58024400 	.word	0x58024400
 8000dc0:	58024800 	.word	0x58024800
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8000dc4:	6963      	ldr	r3, [r4, #20]
 8000dc6:	4d96      	ldr	r5, [pc, #600]	; (8001020 <HAL_RCC_OscConfig+0x52c>)
 8000dc8:	b183      	cbz	r3, 8000dec <HAL_RCC_OscConfig+0x2f8>
      __HAL_RCC_LSI_ENABLE();
 8000dca:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8000dcc:	f043 0301 	orr.w	r3, r3, #1
 8000dd0:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 8000dd2:	f7ff fcfd 	bl	80007d0 <HAL_GetTick>
 8000dd6:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8000dd8:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8000dda:	079b      	lsls	r3, r3, #30
 8000ddc:	f53f aec5 	bmi.w	8000b6a <HAL_RCC_OscConfig+0x76>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000de0:	f7ff fcf6 	bl	80007d0 <HAL_GetTick>
 8000de4:	1b80      	subs	r0, r0, r6
 8000de6:	2802      	cmp	r0, #2
 8000de8:	d9f6      	bls.n	8000dd8 <HAL_RCC_OscConfig+0x2e4>
 8000dea:	e716      	b.n	8000c1a <HAL_RCC_OscConfig+0x126>
      __HAL_RCC_LSI_DISABLE();
 8000dec:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8000dee:	f023 0301 	bic.w	r3, r3, #1
 8000df2:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 8000df4:	f7ff fcec 	bl	80007d0 <HAL_GetTick>
 8000df8:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8000dfa:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8000dfc:	079f      	lsls	r7, r3, #30
 8000dfe:	f57f aeb4 	bpl.w	8000b6a <HAL_RCC_OscConfig+0x76>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000e02:	f7ff fce5 	bl	80007d0 <HAL_GetTick>
 8000e06:	1b80      	subs	r0, r0, r6
 8000e08:	2802      	cmp	r0, #2
 8000e0a:	d9f6      	bls.n	8000dfa <HAL_RCC_OscConfig+0x306>
 8000e0c:	e705      	b.n	8000c1a <HAL_RCC_OscConfig+0x126>
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8000e0e:	69a3      	ldr	r3, [r4, #24]
 8000e10:	4d83      	ldr	r5, [pc, #524]	; (8001020 <HAL_RCC_OscConfig+0x52c>)
 8000e12:	b183      	cbz	r3, 8000e36 <HAL_RCC_OscConfig+0x342>
      __HAL_RCC_HSI48_ENABLE();
 8000e14:	682b      	ldr	r3, [r5, #0]
 8000e16:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000e1a:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8000e1c:	f7ff fcd8 	bl	80007d0 <HAL_GetTick>
 8000e20:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8000e22:	682b      	ldr	r3, [r5, #0]
 8000e24:	0498      	lsls	r0, r3, #18
 8000e26:	f53f aea4 	bmi.w	8000b72 <HAL_RCC_OscConfig+0x7e>
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8000e2a:	f7ff fcd1 	bl	80007d0 <HAL_GetTick>
 8000e2e:	1b80      	subs	r0, r0, r6
 8000e30:	2802      	cmp	r0, #2
 8000e32:	d9f6      	bls.n	8000e22 <HAL_RCC_OscConfig+0x32e>
 8000e34:	e6f1      	b.n	8000c1a <HAL_RCC_OscConfig+0x126>
      __HAL_RCC_HSI48_DISABLE();
 8000e36:	682b      	ldr	r3, [r5, #0]
 8000e38:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000e3c:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8000e3e:	f7ff fcc7 	bl	80007d0 <HAL_GetTick>
 8000e42:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8000e44:	682b      	ldr	r3, [r5, #0]
 8000e46:	0499      	lsls	r1, r3, #18
 8000e48:	f57f ae93 	bpl.w	8000b72 <HAL_RCC_OscConfig+0x7e>
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8000e4c:	f7ff fcc0 	bl	80007d0 <HAL_GetTick>
 8000e50:	1b80      	subs	r0, r0, r6
 8000e52:	2802      	cmp	r0, #2
 8000e54:	d9f6      	bls.n	8000e44 <HAL_RCC_OscConfig+0x350>
 8000e56:	e6e0      	b.n	8000c1a <HAL_RCC_OscConfig+0x126>
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8000e58:	f7ff fcba 	bl	80007d0 <HAL_GetTick>
 8000e5c:	1b80      	subs	r0, r0, r6
 8000e5e:	2864      	cmp	r0, #100	; 0x64
 8000e60:	f67f ae92 	bls.w	8000b88 <HAL_RCC_OscConfig+0x94>
 8000e64:	e6d9      	b.n	8000c1a <HAL_RCC_OscConfig+0x126>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000e66:	b9b3      	cbnz	r3, 8000e96 <HAL_RCC_OscConfig+0x3a2>
 8000e68:	6f2b      	ldr	r3, [r5, #112]	; 0x70
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000e6a:	f241 3788 	movw	r7, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000e6e:	f023 0301 	bic.w	r3, r3, #1
 8000e72:	672b      	str	r3, [r5, #112]	; 0x70
 8000e74:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000e76:	f023 0304 	bic.w	r3, r3, #4
 8000e7a:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 8000e7c:	f7ff fca8 	bl	80007d0 <HAL_GetTick>
 8000e80:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8000e82:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000e84:	0798      	lsls	r0, r3, #30
 8000e86:	f57f ae96 	bpl.w	8000bb6 <HAL_RCC_OscConfig+0xc2>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000e8a:	f7ff fca1 	bl	80007d0 <HAL_GetTick>
 8000e8e:	1b80      	subs	r0, r0, r6
 8000e90:	42b8      	cmp	r0, r7
 8000e92:	d9f6      	bls.n	8000e82 <HAL_RCC_OscConfig+0x38e>
 8000e94:	e6c1      	b.n	8000c1a <HAL_RCC_OscConfig+0x126>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000e96:	2b05      	cmp	r3, #5
 8000e98:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000e9a:	d103      	bne.n	8000ea4 <HAL_RCC_OscConfig+0x3b0>
 8000e9c:	f043 0304 	orr.w	r3, r3, #4
 8000ea0:	672b      	str	r3, [r5, #112]	; 0x70
 8000ea2:	e67a      	b.n	8000b9a <HAL_RCC_OscConfig+0xa6>
 8000ea4:	f023 0301 	bic.w	r3, r3, #1
 8000ea8:	672b      	str	r3, [r5, #112]	; 0x70
 8000eaa:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000eac:	f023 0304 	bic.w	r3, r3, #4
 8000eb0:	e676      	b.n	8000ba0 <HAL_RCC_OscConfig+0xac>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000eb2:	f7ff fc8d 	bl	80007d0 <HAL_GetTick>
 8000eb6:	1bc0      	subs	r0, r0, r7
 8000eb8:	42a8      	cmp	r0, r5
 8000eba:	f67f ae78 	bls.w	8000bae <HAL_RCC_OscConfig+0xba>
 8000ebe:	e6ac      	b.n	8000c1a <HAL_RCC_OscConfig+0x126>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8000ec0:	4d57      	ldr	r5, [pc, #348]	; (8001020 <HAL_RCC_OscConfig+0x52c>)
 8000ec2:	692b      	ldr	r3, [r5, #16]
 8000ec4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8000ec8:	2b18      	cmp	r3, #24
 8000eca:	d07a      	beq.n	8000fc2 <HAL_RCC_OscConfig+0x4ce>
        __HAL_RCC_PLL_DISABLE();
 8000ecc:	682b      	ldr	r3, [r5, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000ece:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 8000ed0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8000ed4:	602b      	str	r3, [r5, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000ed6:	d167      	bne.n	8000fa8 <HAL_RCC_OscConfig+0x4b4>
        tickstart = HAL_GetTick();
 8000ed8:	f7ff fc7a 	bl	80007d0 <HAL_GetTick>
 8000edc:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8000ede:	682b      	ldr	r3, [r5, #0]
 8000ee0:	0199      	lsls	r1, r3, #6
 8000ee2:	d45b      	bmi.n	8000f9c <HAL_RCC_OscConfig+0x4a8>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000ee4:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8000ee6:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8000ee8:	f423 737c 	bic.w	r3, r3, #1008	; 0x3f0
 8000eec:	f023 0303 	bic.w	r3, r3, #3
 8000ef0:	4313      	orrs	r3, r2
 8000ef2:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8000ef4:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 8000ef8:	62ab      	str	r3, [r5, #40]	; 0x28
 8000efa:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8000efc:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8000efe:	3b01      	subs	r3, #1
 8000f00:	3a01      	subs	r2, #1
 8000f02:	025b      	lsls	r3, r3, #9
 8000f04:	0412      	lsls	r2, r2, #16
 8000f06:	b29b      	uxth	r3, r3
 8000f08:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 8000f0c:	4313      	orrs	r3, r2
 8000f0e:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8000f10:	3a01      	subs	r2, #1
 8000f12:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8000f16:	4313      	orrs	r3, r2
 8000f18:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8000f1a:	3a01      	subs	r2, #1
 8000f1c:	0612      	lsls	r2, r2, #24
 8000f1e:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8000f22:	4313      	orrs	r3, r2
 8000f24:	632b      	str	r3, [r5, #48]	; 0x30
         __HAL_RCC_PLLFRACN_DISABLE();
 8000f26:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8000f28:	f023 0301 	bic.w	r3, r3, #1
 8000f2c:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8000f2e:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8000f30:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8000f32:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8000f36:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8000f3a:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8000f3e:	636b      	str	r3, [r5, #52]	; 0x34
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8000f40:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8000f42:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8000f44:	f023 030c 	bic.w	r3, r3, #12
 8000f48:	4313      	orrs	r3, r2
 8000f4a:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8000f4c:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8000f4e:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8000f50:	f023 0302 	bic.w	r3, r3, #2
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8000f54:	4c32      	ldr	r4, [pc, #200]	; (8001020 <HAL_RCC_OscConfig+0x52c>)
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8000f56:	4313      	orrs	r3, r2
 8000f58:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8000f5a:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8000f5c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f60:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8000f62:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8000f64:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f68:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8000f6a:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8000f6c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000f70:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLFRACN_ENABLE();
 8000f72:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8000f74:	f043 0301 	orr.w	r3, r3, #1
 8000f78:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLL_ENABLE();
 8000f7a:	682b      	ldr	r3, [r5, #0]
 8000f7c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000f80:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8000f82:	f7ff fc25 	bl	80007d0 <HAL_GetTick>
 8000f86:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8000f88:	6823      	ldr	r3, [r4, #0]
 8000f8a:	019a      	lsls	r2, r3, #6
 8000f8c:	f53f ae17 	bmi.w	8000bbe <HAL_RCC_OscConfig+0xca>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000f90:	f7ff fc1e 	bl	80007d0 <HAL_GetTick>
 8000f94:	1b40      	subs	r0, r0, r5
 8000f96:	2802      	cmp	r0, #2
 8000f98:	d9f6      	bls.n	8000f88 <HAL_RCC_OscConfig+0x494>
 8000f9a:	e63e      	b.n	8000c1a <HAL_RCC_OscConfig+0x126>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000f9c:	f7ff fc18 	bl	80007d0 <HAL_GetTick>
 8000fa0:	1b80      	subs	r0, r0, r6
 8000fa2:	2802      	cmp	r0, #2
 8000fa4:	d99b      	bls.n	8000ede <HAL_RCC_OscConfig+0x3ea>
 8000fa6:	e638      	b.n	8000c1a <HAL_RCC_OscConfig+0x126>
        tickstart = HAL_GetTick();
 8000fa8:	f7ff fc12 	bl	80007d0 <HAL_GetTick>
 8000fac:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8000fae:	682b      	ldr	r3, [r5, #0]
 8000fb0:	019b      	lsls	r3, r3, #6
 8000fb2:	f57f ae04 	bpl.w	8000bbe <HAL_RCC_OscConfig+0xca>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000fb6:	f7ff fc0b 	bl	80007d0 <HAL_GetTick>
 8000fba:	1b00      	subs	r0, r0, r4
 8000fbc:	2802      	cmp	r0, #2
 8000fbe:	d9f6      	bls.n	8000fae <HAL_RCC_OscConfig+0x4ba>
 8000fc0:	e62b      	b.n	8000c1a <HAL_RCC_OscConfig+0x126>
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8000fc2:	2801      	cmp	r0, #1
      temp1_pllckcfg = RCC->PLLCKSELR;
 8000fc4:	6aaa      	ldr	r2, [r5, #40]	; 0x28
      temp2_pllckcfg = RCC->PLL1DIVR;
 8000fc6:	6b2b      	ldr	r3, [r5, #48]	; 0x30
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8000fc8:	f43f ae28 	beq.w	8000c1c <HAL_RCC_OscConfig+0x128>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000fcc:	f002 0103 	and.w	r1, r2, #3
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8000fd0:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8000fd2:	4281      	cmp	r1, r0
 8000fd4:	f47f ad91 	bne.w	8000afa <HAL_RCC_OscConfig+0x6>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8000fd8:	f3c2 1205 	ubfx	r2, r2, #4, #6
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000fdc:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8000fde:	428a      	cmp	r2, r1
 8000fe0:	f47f ad8b 	bne.w	8000afa <HAL_RCC_OscConfig+0x6>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8000fe4:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8000fe6:	f3c3 0108 	ubfx	r1, r3, #0, #9
 8000fea:	3a01      	subs	r2, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8000fec:	4291      	cmp	r1, r2
 8000fee:	f47f ad84 	bne.w	8000afa <HAL_RCC_OscConfig+0x6>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8000ff2:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8000ff4:	f3c3 2146 	ubfx	r1, r3, #9, #7
 8000ff8:	3a01      	subs	r2, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8000ffa:	4291      	cmp	r1, r2
 8000ffc:	f47f ad7d 	bne.w	8000afa <HAL_RCC_OscConfig+0x6>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001000:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8001002:	f3c3 4106 	ubfx	r1, r3, #16, #7
 8001006:	3a01      	subs	r2, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001008:	4291      	cmp	r1, r2
 800100a:	f47f ad76 	bne.w	8000afa <HAL_RCC_OscConfig+0x6>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800100e:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8001010:	f3c3 6306 	ubfx	r3, r3, #24, #7
 8001014:	3801      	subs	r0, #1
    return HAL_ERROR;
 8001016:	1a18      	subs	r0, r3, r0
 8001018:	bf18      	it	ne
 800101a:	2001      	movne	r0, #1
 800101c:	e5fe      	b.n	8000c1c <HAL_RCC_OscConfig+0x128>
 800101e:	bf00      	nop
 8001020:	58024400 	.word	0x58024400

08001024 <HAL_RCC_GetSysClockFreq>:
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001024:	4b46      	ldr	r3, [pc, #280]	; (8001140 <HAL_RCC_GetSysClockFreq+0x11c>)
 8001026:	691a      	ldr	r2, [r3, #16]
 8001028:	f002 0238 	and.w	r2, r2, #56	; 0x38
 800102c:	2a10      	cmp	r2, #16
{
 800102e:	b510      	push	{r4, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001030:	f000 8084 	beq.w	800113c <HAL_RCC_GetSysClockFreq+0x118>
 8001034:	2a18      	cmp	r2, #24
 8001036:	d00c      	beq.n	8001052 <HAL_RCC_GetSysClockFreq+0x2e>
 8001038:	b10a      	cbz	r2, 800103e <HAL_RCC_GetSysClockFreq+0x1a>
      }

    break;

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 800103a:	4842      	ldr	r0, [pc, #264]	; (8001144 <HAL_RCC_GetSysClockFreq+0x120>)
    sysclockfreq = CSI_VALUE;
    break;
  }

  return sysclockfreq;
}
 800103c:	bd10      	pop	{r4, pc}
   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800103e:	681a      	ldr	r2, [r3, #0]
 8001040:	4841      	ldr	r0, [pc, #260]	; (8001148 <HAL_RCC_GetSysClockFreq+0x124>)
 8001042:	f012 0f20 	tst.w	r2, #32
 8001046:	d0f9      	beq.n	800103c <HAL_RCC_GetSysClockFreq+0x18>
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800104e:	40d8      	lsrs	r0, r3
 8001050:	e7f4      	b.n	800103c <HAL_RCC_GetSysClockFreq+0x18>
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8001052:	6a99      	ldr	r1, [r3, #40]	; 0x28
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8001054:	6a98      	ldr	r0, [r3, #40]	; 0x28
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8001056:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8001058:	f3c0 1005 	ubfx	r0, r0, #4, #6
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800105c:	6b5c      	ldr	r4, [r3, #52]	; 0x34
    if (pllm != 0U)
 800105e:	2800      	cmp	r0, #0
 8001060:	d0ec      	beq.n	800103c <HAL_RCC_GetSysClockFreq+0x18>
 8001062:	ee07 0a90 	vmov	s15, r0
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8001066:	f002 0201 	and.w	r2, r2, #1
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800106a:	f3c4 00cc 	ubfx	r0, r4, #3, #13
 800106e:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8001072:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001076:	4342      	muls	r2, r0
 8001078:	ee07 2a90 	vmov	s15, r2
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800107c:	f001 0203 	and.w	r2, r1, #3
      switch (pllsource)
 8001080:	2a01      	cmp	r2, #1
 8001082:	eefa 7ae9 	vcvt.f32.s32	s15, s15, #13
 8001086:	d002      	beq.n	800108e <HAL_RCC_GetSysClockFreq+0x6a>
 8001088:	d30f      	bcc.n	80010aa <HAL_RCC_GetSysClockFreq+0x86>
 800108a:	2a02      	cmp	r2, #2
 800108c:	d048      	beq.n	8001120 <HAL_RCC_GetSysClockFreq+0xfc>
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800108e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001090:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001094:	ee07 3a10 	vmov	s14, r3
 8001098:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800109c:	ee77 7a27 	vadd.f32	s15, s14, s15
 80010a0:	ee77 7a86 	vadd.f32	s15, s15, s12
 80010a4:	ed9f 6a29 	vldr	s12, [pc, #164]	; 800114c <HAL_RCC_GetSysClockFreq+0x128>
 80010a8:	e037      	b.n	800111a <HAL_RCC_GetSysClockFreq+0xf6>
       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80010aa:	681a      	ldr	r2, [r3, #0]
 80010ac:	0692      	lsls	r2, r2, #26
 80010ae:	d527      	bpl.n	8001100 <HAL_RCC_GetSysClockFreq+0xdc>
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80010b0:	6819      	ldr	r1, [r3, #0]
 80010b2:	4a25      	ldr	r2, [pc, #148]	; (8001148 <HAL_RCC_GetSysClockFreq+0x124>)
 80010b4:	f3c1 01c1 	ubfx	r1, r1, #3, #2
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80010b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80010ba:	40ca      	lsrs	r2, r1
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80010bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80010c0:	ee07 2a10 	vmov	s14, r2
 80010c4:	eef8 5ac7 	vcvt.f32.s32	s11, s14
 80010c8:	ee85 7aa6 	vdiv.f32	s14, s11, s13
 80010cc:	ee06 3a90 	vmov	s13, r3
 80010d0:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 80010d4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80010d8:	ee77 7a86 	vadd.f32	s15, s15, s12
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 80010dc:	4b18      	ldr	r3, [pc, #96]	; (8001140 <HAL_RCC_GetSysClockFreq+0x11c>)
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80010de:	ee67 7a87 	vmul.f32	s15, s15, s14
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 80010e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010e4:	f3c3 2346 	ubfx	r3, r3, #9, #7
 80010e8:	3301      	adds	r3, #1
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 80010ea:	ee07 3a10 	vmov	s14, r3
 80010ee:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 80010f2:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80010f6:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 80010fa:	ee17 0a90 	vmov	r0, s15
 80010fe:	e79d      	b.n	800103c <HAL_RCC_GetSysClockFreq+0x18>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8001100:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001102:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001106:	ee07 3a10 	vmov	s14, r3
 800110a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800110e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001112:	ee77 7a86 	vadd.f32	s15, s15, s12
 8001116:	ed9f 6a0e 	vldr	s12, [pc, #56]	; 8001150 <HAL_RCC_GetSysClockFreq+0x12c>
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800111a:	ee86 7a26 	vdiv.f32	s14, s12, s13
 800111e:	e7dd      	b.n	80010dc <HAL_RCC_GetSysClockFreq+0xb8>
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8001120:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001122:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001126:	ee07 3a10 	vmov	s14, r3
 800112a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800112e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001132:	ee77 7a86 	vadd.f32	s15, s15, s12
 8001136:	ed9f 6a07 	vldr	s12, [pc, #28]	; 8001154 <HAL_RCC_GetSysClockFreq+0x130>
 800113a:	e7ee      	b.n	800111a <HAL_RCC_GetSysClockFreq+0xf6>
    sysclockfreq = HSE_VALUE;
 800113c:	4806      	ldr	r0, [pc, #24]	; (8001158 <HAL_RCC_GetSysClockFreq+0x134>)
 800113e:	e77d      	b.n	800103c <HAL_RCC_GetSysClockFreq+0x18>
 8001140:	58024400 	.word	0x58024400
 8001144:	003d0900 	.word	0x003d0900
 8001148:	03d09000 	.word	0x03d09000
 800114c:	4a742400 	.word	0x4a742400
 8001150:	4c742400 	.word	0x4c742400
 8001154:	4af42400 	.word	0x4af42400
 8001158:	007a1200 	.word	0x007a1200

0800115c <HAL_RCC_ClockConfig>:
{
 800115c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001160:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 8001162:	4604      	mov	r4, r0
 8001164:	b910      	cbnz	r0, 800116c <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8001166:	2001      	movs	r0, #1
}
 8001168:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800116c:	4a88      	ldr	r2, [pc, #544]	; (8001390 <HAL_RCC_ClockConfig+0x234>)
 800116e:	6813      	ldr	r3, [r2, #0]
 8001170:	f003 030f 	and.w	r3, r3, #15
 8001174:	428b      	cmp	r3, r1
 8001176:	f0c0 8093 	bcc.w	80012a0 <HAL_RCC_ClockConfig+0x144>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800117a:	6823      	ldr	r3, [r4, #0]
 800117c:	075f      	lsls	r7, r3, #29
 800117e:	f100 809b 	bmi.w	80012b8 <HAL_RCC_ClockConfig+0x15c>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001182:	071e      	lsls	r6, r3, #28
 8001184:	d50b      	bpl.n	800119e <HAL_RCC_ClockConfig+0x42>
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8001186:	4983      	ldr	r1, [pc, #524]	; (8001394 <HAL_RCC_ClockConfig+0x238>)
 8001188:	6966      	ldr	r6, [r4, #20]
 800118a:	69c8      	ldr	r0, [r1, #28]
 800118c:	f000 0070 	and.w	r0, r0, #112	; 0x70
 8001190:	4286      	cmp	r6, r0
 8001192:	d904      	bls.n	800119e <HAL_RCC_ClockConfig+0x42>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8001194:	69ca      	ldr	r2, [r1, #28]
 8001196:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800119a:	4332      	orrs	r2, r6
 800119c:	61ca      	str	r2, [r1, #28]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800119e:	06d8      	lsls	r0, r3, #27
 80011a0:	d50b      	bpl.n	80011ba <HAL_RCC_ClockConfig+0x5e>
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80011a2:	497c      	ldr	r1, [pc, #496]	; (8001394 <HAL_RCC_ClockConfig+0x238>)
 80011a4:	69a6      	ldr	r6, [r4, #24]
 80011a6:	69c8      	ldr	r0, [r1, #28]
 80011a8:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
 80011ac:	4286      	cmp	r6, r0
 80011ae:	d904      	bls.n	80011ba <HAL_RCC_ClockConfig+0x5e>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80011b0:	69ca      	ldr	r2, [r1, #28]
 80011b2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80011b6:	4332      	orrs	r2, r6
 80011b8:	61ca      	str	r2, [r1, #28]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80011ba:	0699      	lsls	r1, r3, #26
 80011bc:	d50b      	bpl.n	80011d6 <HAL_RCC_ClockConfig+0x7a>
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80011be:	4975      	ldr	r1, [pc, #468]	; (8001394 <HAL_RCC_ClockConfig+0x238>)
 80011c0:	69e6      	ldr	r6, [r4, #28]
 80011c2:	6a08      	ldr	r0, [r1, #32]
 80011c4:	f000 0070 	and.w	r0, r0, #112	; 0x70
 80011c8:	4286      	cmp	r6, r0
 80011ca:	d904      	bls.n	80011d6 <HAL_RCC_ClockConfig+0x7a>
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80011cc:	6a0a      	ldr	r2, [r1, #32]
 80011ce:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80011d2:	4332      	orrs	r2, r6
 80011d4:	620a      	str	r2, [r1, #32]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80011d6:	079a      	lsls	r2, r3, #30
 80011d8:	d50b      	bpl.n	80011f2 <HAL_RCC_ClockConfig+0x96>
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80011da:	496e      	ldr	r1, [pc, #440]	; (8001394 <HAL_RCC_ClockConfig+0x238>)
 80011dc:	68e6      	ldr	r6, [r4, #12]
 80011de:	6988      	ldr	r0, [r1, #24]
 80011e0:	f000 000f 	and.w	r0, r0, #15
 80011e4:	4286      	cmp	r6, r0
 80011e6:	d904      	bls.n	80011f2 <HAL_RCC_ClockConfig+0x96>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80011e8:	698a      	ldr	r2, [r1, #24]
 80011ea:	f022 020f 	bic.w	r2, r2, #15
 80011ee:	4332      	orrs	r2, r6
 80011f0:	618a      	str	r2, [r1, #24]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80011f2:	07df      	lsls	r7, r3, #31
 80011f4:	d46e      	bmi.n	80012d4 <HAL_RCC_ClockConfig+0x178>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80011f6:	6823      	ldr	r3, [r4, #0]
 80011f8:	079e      	lsls	r6, r3, #30
 80011fa:	f100 80a1 	bmi.w	8001340 <HAL_RCC_ClockConfig+0x1e4>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80011fe:	4964      	ldr	r1, [pc, #400]	; (8001390 <HAL_RCC_ClockConfig+0x234>)
 8001200:	680a      	ldr	r2, [r1, #0]
 8001202:	f002 020f 	and.w	r2, r2, #15
 8001206:	42aa      	cmp	r2, r5
 8001208:	f200 80a8 	bhi.w	800135c <HAL_RCC_ClockConfig+0x200>
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800120c:	0758      	lsls	r0, r3, #29
 800120e:	f100 80b1 	bmi.w	8001374 <HAL_RCC_ClockConfig+0x218>
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001212:	0719      	lsls	r1, r3, #28
 8001214:	d50b      	bpl.n	800122e <HAL_RCC_ClockConfig+0xd2>
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8001216:	495f      	ldr	r1, [pc, #380]	; (8001394 <HAL_RCC_ClockConfig+0x238>)
 8001218:	6965      	ldr	r5, [r4, #20]
 800121a:	69c8      	ldr	r0, [r1, #28]
 800121c:	f000 0070 	and.w	r0, r0, #112	; 0x70
 8001220:	4285      	cmp	r5, r0
 8001222:	d204      	bcs.n	800122e <HAL_RCC_ClockConfig+0xd2>
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8001224:	69ca      	ldr	r2, [r1, #28]
 8001226:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800122a:	432a      	orrs	r2, r5
 800122c:	61ca      	str	r2, [r1, #28]
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800122e:	06da      	lsls	r2, r3, #27
 8001230:	d50b      	bpl.n	800124a <HAL_RCC_ClockConfig+0xee>
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8001232:	4958      	ldr	r1, [pc, #352]	; (8001394 <HAL_RCC_ClockConfig+0x238>)
 8001234:	69a5      	ldr	r5, [r4, #24]
 8001236:	69c8      	ldr	r0, [r1, #28]
 8001238:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
 800123c:	4285      	cmp	r5, r0
 800123e:	d204      	bcs.n	800124a <HAL_RCC_ClockConfig+0xee>
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8001240:	69ca      	ldr	r2, [r1, #28]
 8001242:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001246:	432a      	orrs	r2, r5
 8001248:	61ca      	str	r2, [r1, #28]
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800124a:	069b      	lsls	r3, r3, #26
 800124c:	d50b      	bpl.n	8001266 <HAL_RCC_ClockConfig+0x10a>
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800124e:	4a51      	ldr	r2, [pc, #324]	; (8001394 <HAL_RCC_ClockConfig+0x238>)
 8001250:	69e0      	ldr	r0, [r4, #28]
 8001252:	6a11      	ldr	r1, [r2, #32]
 8001254:	f001 0170 	and.w	r1, r1, #112	; 0x70
 8001258:	4288      	cmp	r0, r1
 800125a:	d204      	bcs.n	8001266 <HAL_RCC_ClockConfig+0x10a>
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800125c:	6a13      	ldr	r3, [r2, #32]
 800125e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001262:	4303      	orrs	r3, r0
 8001264:	6213      	str	r3, [r2, #32]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001266:	f7ff fedd 	bl	8001024 <HAL_RCC_GetSysClockFreq>
 800126a:	494a      	ldr	r1, [pc, #296]	; (8001394 <HAL_RCC_ClockConfig+0x238>)
 800126c:	4a4a      	ldr	r2, [pc, #296]	; (8001398 <HAL_RCC_ClockConfig+0x23c>)
 800126e:	698b      	ldr	r3, [r1, #24]
 8001270:	f3c3 2303 	ubfx	r3, r3, #8, #4
 8001274:	5cd3      	ldrb	r3, [r2, r3]
 8001276:	f003 031f 	and.w	r3, r3, #31
 800127a:	40d8      	lsrs	r0, r3
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800127c:	698b      	ldr	r3, [r1, #24]
 800127e:	f003 030f 	and.w	r3, r3, #15
 8001282:	5cd3      	ldrb	r3, [r2, r3]
 8001284:	4a45      	ldr	r2, [pc, #276]	; (800139c <HAL_RCC_ClockConfig+0x240>)
 8001286:	f003 031f 	and.w	r3, r3, #31
 800128a:	fa20 f303 	lsr.w	r3, r0, r3
 800128e:	6013      	str	r3, [r2, #0]
  SystemCoreClock = common_system_clock;
 8001290:	4b43      	ldr	r3, [pc, #268]	; (80013a0 <HAL_RCC_ClockConfig+0x244>)
 8001292:	6018      	str	r0, [r3, #0]
  halstatus = HAL_InitTick (uwTickPrio);
 8001294:	4b43      	ldr	r3, [pc, #268]	; (80013a4 <HAL_RCC_ClockConfig+0x248>)
}
 8001296:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  halstatus = HAL_InitTick (uwTickPrio);
 800129a:	6818      	ldr	r0, [r3, #0]
 800129c:	f7ff b912 	b.w	80004c4 <HAL_InitTick>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80012a0:	6813      	ldr	r3, [r2, #0]
 80012a2:	f023 030f 	bic.w	r3, r3, #15
 80012a6:	430b      	orrs	r3, r1
 80012a8:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80012aa:	6813      	ldr	r3, [r2, #0]
 80012ac:	f003 030f 	and.w	r3, r3, #15
 80012b0:	428b      	cmp	r3, r1
 80012b2:	f47f af58 	bne.w	8001166 <HAL_RCC_ClockConfig+0xa>
 80012b6:	e760      	b.n	800117a <HAL_RCC_ClockConfig+0x1e>
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80012b8:	4936      	ldr	r1, [pc, #216]	; (8001394 <HAL_RCC_ClockConfig+0x238>)
 80012ba:	6926      	ldr	r6, [r4, #16]
 80012bc:	6988      	ldr	r0, [r1, #24]
 80012be:	f000 0070 	and.w	r0, r0, #112	; 0x70
 80012c2:	4286      	cmp	r6, r0
 80012c4:	f67f af5d 	bls.w	8001182 <HAL_RCC_ClockConfig+0x26>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80012c8:	698a      	ldr	r2, [r1, #24]
 80012ca:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80012ce:	4332      	orrs	r2, r6
 80012d0:	618a      	str	r2, [r1, #24]
 80012d2:	e756      	b.n	8001182 <HAL_RCC_ClockConfig+0x26>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80012d4:	4b2f      	ldr	r3, [pc, #188]	; (8001394 <HAL_RCC_ClockConfig+0x238>)
 80012d6:	68a1      	ldr	r1, [r4, #8]
 80012d8:	699a      	ldr	r2, [r3, #24]
 80012da:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00
 80012de:	430a      	orrs	r2, r1
 80012e0:	619a      	str	r2, [r3, #24]
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80012e2:	6861      	ldr	r1, [r4, #4]
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80012e4:	681a      	ldr	r2, [r3, #0]
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80012e6:	2902      	cmp	r1, #2
 80012e8:	d11d      	bne.n	8001326 <HAL_RCC_ClockConfig+0x1ca>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80012ea:	f412 3f00 	tst.w	r2, #131072	; 0x20000
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80012ee:	f43f af3a 	beq.w	8001166 <HAL_RCC_ClockConfig+0xa>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80012f2:	691a      	ldr	r2, [r3, #16]
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80012f4:	f241 3888 	movw	r8, #5000	; 0x1388
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80012f8:	4e26      	ldr	r6, [pc, #152]	; (8001394 <HAL_RCC_ClockConfig+0x238>)
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80012fa:	f022 0207 	bic.w	r2, r2, #7
 80012fe:	430a      	orrs	r2, r1
 8001300:	611a      	str	r2, [r3, #16]
      tickstart = HAL_GetTick();
 8001302:	f7ff fa65 	bl	80007d0 <HAL_GetTick>
 8001306:	4607      	mov	r7, r0
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001308:	6933      	ldr	r3, [r6, #16]
 800130a:	6862      	ldr	r2, [r4, #4]
 800130c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001310:	ebb3 0fc2 	cmp.w	r3, r2, lsl #3
 8001314:	f43f af6f 	beq.w	80011f6 <HAL_RCC_ClockConfig+0x9a>
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001318:	f7ff fa5a 	bl	80007d0 <HAL_GetTick>
 800131c:	1bc0      	subs	r0, r0, r7
 800131e:	4540      	cmp	r0, r8
 8001320:	d9f2      	bls.n	8001308 <HAL_RCC_ClockConfig+0x1ac>
            return HAL_TIMEOUT;
 8001322:	2003      	movs	r0, #3
 8001324:	e720      	b.n	8001168 <HAL_RCC_ClockConfig+0xc>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001326:	2903      	cmp	r1, #3
 8001328:	d102      	bne.n	8001330 <HAL_RCC_ClockConfig+0x1d4>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800132a:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 800132e:	e7de      	b.n	80012ee <HAL_RCC_ClockConfig+0x192>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8001330:	2901      	cmp	r1, #1
 8001332:	d102      	bne.n	800133a <HAL_RCC_ClockConfig+0x1de>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001334:	f412 7f80 	tst.w	r2, #256	; 0x100
 8001338:	e7d9      	b.n	80012ee <HAL_RCC_ClockConfig+0x192>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800133a:	f012 0f04 	tst.w	r2, #4
 800133e:	e7d6      	b.n	80012ee <HAL_RCC_ClockConfig+0x192>
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8001340:	4914      	ldr	r1, [pc, #80]	; (8001394 <HAL_RCC_ClockConfig+0x238>)
 8001342:	68e6      	ldr	r6, [r4, #12]
 8001344:	6988      	ldr	r0, [r1, #24]
 8001346:	f000 000f 	and.w	r0, r0, #15
 800134a:	4286      	cmp	r6, r0
 800134c:	f4bf af57 	bcs.w	80011fe <HAL_RCC_ClockConfig+0xa2>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001350:	698a      	ldr	r2, [r1, #24]
 8001352:	f022 020f 	bic.w	r2, r2, #15
 8001356:	4332      	orrs	r2, r6
 8001358:	618a      	str	r2, [r1, #24]
 800135a:	e750      	b.n	80011fe <HAL_RCC_ClockConfig+0xa2>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800135c:	680a      	ldr	r2, [r1, #0]
 800135e:	f022 020f 	bic.w	r2, r2, #15
 8001362:	432a      	orrs	r2, r5
 8001364:	600a      	str	r2, [r1, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001366:	680a      	ldr	r2, [r1, #0]
 8001368:	f002 020f 	and.w	r2, r2, #15
 800136c:	42aa      	cmp	r2, r5
 800136e:	f47f aefa 	bne.w	8001166 <HAL_RCC_ClockConfig+0xa>
 8001372:	e74b      	b.n	800120c <HAL_RCC_ClockConfig+0xb0>
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8001374:	4907      	ldr	r1, [pc, #28]	; (8001394 <HAL_RCC_ClockConfig+0x238>)
 8001376:	6925      	ldr	r5, [r4, #16]
 8001378:	6988      	ldr	r0, [r1, #24]
 800137a:	f000 0070 	and.w	r0, r0, #112	; 0x70
 800137e:	4285      	cmp	r5, r0
 8001380:	f4bf af47 	bcs.w	8001212 <HAL_RCC_ClockConfig+0xb6>
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8001384:	698a      	ldr	r2, [r1, #24]
 8001386:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800138a:	432a      	orrs	r2, r5
 800138c:	618a      	str	r2, [r1, #24]
 800138e:	e740      	b.n	8001212 <HAL_RCC_ClockConfig+0xb6>
 8001390:	52002000 	.word	0x52002000
 8001394:	58024400 	.word	0x58024400
 8001398:	08002d4c 	.word	0x08002d4c
 800139c:	20000004 	.word	0x20000004
 80013a0:	20000000 	.word	0x20000000
 80013a4:	2000000c 	.word	0x2000000c

080013a8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80013a8:	b508      	push	{r3, lr}
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80013aa:	f7ff fe3b 	bl	8001024 <HAL_RCC_GetSysClockFreq>
 80013ae:	4a0b      	ldr	r2, [pc, #44]	; (80013dc <HAL_RCC_GetHCLKFreq+0x34>)
 80013b0:	490b      	ldr	r1, [pc, #44]	; (80013e0 <HAL_RCC_GetHCLKFreq+0x38>)
 80013b2:	6993      	ldr	r3, [r2, #24]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80013b4:	6992      	ldr	r2, [r2, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80013b6:	f3c3 2303 	ubfx	r3, r3, #8, #4
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80013ba:	f002 020f 	and.w	r2, r2, #15
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80013be:	5ccb      	ldrb	r3, [r1, r3]
 80013c0:	f003 031f 	and.w	r3, r3, #31
 80013c4:	fa20 f303 	lsr.w	r3, r0, r3
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80013c8:	5c88      	ldrb	r0, [r1, r2]
 80013ca:	4a06      	ldr	r2, [pc, #24]	; (80013e4 <HAL_RCC_GetHCLKFreq+0x3c>)
 80013cc:	f000 001f 	and.w	r0, r0, #31
 80013d0:	fa23 f000 	lsr.w	r0, r3, r0
 80013d4:	6010      	str	r0, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80013d6:	4a04      	ldr	r2, [pc, #16]	; (80013e8 <HAL_RCC_GetHCLKFreq+0x40>)
 80013d8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
}
 80013da:	bd08      	pop	{r3, pc}
 80013dc:	58024400 	.word	0x58024400
 80013e0:	08002d4c 	.word	0x08002d4c
 80013e4:	20000004 	.word	0x20000004
 80013e8:	20000000 	.word	0x20000000

080013ec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80013ec:	b508      	push	{r3, lr}
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80013ee:	f7ff ffdb 	bl	80013a8 <HAL_RCC_GetHCLKFreq>
 80013f2:	4b05      	ldr	r3, [pc, #20]	; (8001408 <HAL_RCC_GetPCLK1Freq+0x1c>)
 80013f4:	4a05      	ldr	r2, [pc, #20]	; (800140c <HAL_RCC_GetPCLK1Freq+0x20>)
 80013f6:	69db      	ldr	r3, [r3, #28]
 80013f8:	f3c3 1302 	ubfx	r3, r3, #4, #3
 80013fc:	5cd3      	ldrb	r3, [r2, r3]
 80013fe:	f003 031f 	and.w	r3, r3, #31
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8001402:	40d8      	lsrs	r0, r3
 8001404:	bd08      	pop	{r3, pc}
 8001406:	bf00      	nop
 8001408:	58024400 	.word	0x58024400
 800140c:	08002d4c 	.word	0x08002d4c

08001410 <HAL_RCC_GetClockConfig>:
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 8001410:	233f      	movs	r3, #63	; 0x3f
 8001412:	6003      	str	r3, [r0, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001414:	4b11      	ldr	r3, [pc, #68]	; (800145c <HAL_RCC_GetClockConfig+0x4c>)
 8001416:	691a      	ldr	r2, [r3, #16]
 8001418:	f002 0207 	and.w	r2, r2, #7
 800141c:	6042      	str	r2, [r0, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 800141e:	699a      	ldr	r2, [r3, #24]
 8001420:	f402 6270 	and.w	r2, r2, #3840	; 0xf00
 8001424:	6082      	str	r2, [r0, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8001426:	699a      	ldr	r2, [r3, #24]
 8001428:	f002 020f 	and.w	r2, r2, #15
 800142c:	60c2      	str	r2, [r0, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 800142e:	699a      	ldr	r2, [r3, #24]
 8001430:	f002 0270 	and.w	r2, r2, #112	; 0x70
 8001434:	6102      	str	r2, [r0, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8001436:	69da      	ldr	r2, [r3, #28]
 8001438:	f002 0270 	and.w	r2, r2, #112	; 0x70
 800143c:	6142      	str	r2, [r0, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 800143e:	69da      	ldr	r2, [r3, #28]
 8001440:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 8001444:	6182      	str	r2, [r0, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8001446:	6a1b      	ldr	r3, [r3, #32]
 8001448:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800144c:	61c3      	str	r3, [r0, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800144e:	4b04      	ldr	r3, [pc, #16]	; (8001460 <HAL_RCC_GetClockConfig+0x50>)
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	f003 030f 	and.w	r3, r3, #15
 8001456:	600b      	str	r3, [r1, #0]
}
 8001458:	4770      	bx	lr
 800145a:	bf00      	nop
 800145c:	58024400 	.word	0x58024400
 8001460:	52002000 	.word	0x52002000

08001464 <HAL_TIM_Base_MspInit>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001464:	4770      	bx	lr
	...

08001468 <HAL_TIM_Base_Start_IT>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001468:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800146c:	2b01      	cmp	r3, #1
 800146e:	d115      	bne.n	800149c <HAL_TIM_Base_Start_IT+0x34>
  {
    return HAL_ERROR;
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001470:	2302      	movs	r3, #2
 8001472:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001476:	6803      	ldr	r3, [r0, #0]
 8001478:	68da      	ldr	r2, [r3, #12]
 800147a:	f042 0201 	orr.w	r2, r2, #1
 800147e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001480:	4a07      	ldr	r2, [pc, #28]	; (80014a0 <HAL_TIM_Base_Start_IT+0x38>)
 8001482:	6899      	ldr	r1, [r3, #8]
 8001484:	400a      	ands	r2, r1
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001486:	2a06      	cmp	r2, #6
 8001488:	d006      	beq.n	8001498 <HAL_TIM_Base_Start_IT+0x30>
 800148a:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 800148e:	d003      	beq.n	8001498 <HAL_TIM_Base_Start_IT+0x30>
  {
    __HAL_TIM_ENABLE(htim);
 8001490:	681a      	ldr	r2, [r3, #0]
 8001492:	f042 0201 	orr.w	r2, r2, #1
 8001496:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001498:	2000      	movs	r0, #0
}
 800149a:	4770      	bx	lr
    return HAL_ERROR;
 800149c:	2001      	movs	r0, #1
 800149e:	4770      	bx	lr
 80014a0:	00010007 	.word	0x00010007

080014a4 <HAL_TIM_OC_DelayElapsedCallback>:
 80014a4:	4770      	bx	lr

080014a6 <HAL_TIM_IC_CaptureCallback>:
 80014a6:	4770      	bx	lr

080014a8 <HAL_TIM_PWM_PulseFinishedCallback>:
 80014a8:	4770      	bx	lr

080014aa <HAL_TIM_TriggerCallback>:
 80014aa:	4770      	bx	lr

080014ac <HAL_TIM_IRQHandler>:
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80014ac:	6803      	ldr	r3, [r0, #0]
 80014ae:	691a      	ldr	r2, [r3, #16]
 80014b0:	0791      	lsls	r1, r2, #30
{
 80014b2:	b510      	push	{r4, lr}
 80014b4:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80014b6:	d50f      	bpl.n	80014d8 <HAL_TIM_IRQHandler+0x2c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80014b8:	68da      	ldr	r2, [r3, #12]
 80014ba:	0792      	lsls	r2, r2, #30
 80014bc:	d50c      	bpl.n	80014d8 <HAL_TIM_IRQHandler+0x2c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80014be:	f06f 0202 	mvn.w	r2, #2
 80014c2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80014c4:	2201      	movs	r2, #1

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80014c6:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80014c8:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80014ca:	0799      	lsls	r1, r3, #30
 80014cc:	f000 8085 	beq.w	80015da <HAL_TIM_IRQHandler+0x12e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80014d0:	f7ff ffe9 	bl	80014a6 <HAL_TIM_IC_CaptureCallback>
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80014d4:	2300      	movs	r3, #0
 80014d6:	7723      	strb	r3, [r4, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80014d8:	6823      	ldr	r3, [r4, #0]
 80014da:	691a      	ldr	r2, [r3, #16]
 80014dc:	0752      	lsls	r2, r2, #29
 80014de:	d510      	bpl.n	8001502 <HAL_TIM_IRQHandler+0x56>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80014e0:	68da      	ldr	r2, [r3, #12]
 80014e2:	0750      	lsls	r0, r2, #29
 80014e4:	d50d      	bpl.n	8001502 <HAL_TIM_IRQHandler+0x56>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80014e6:	f06f 0204 	mvn.w	r2, #4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80014ea:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80014ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80014ee:	2202      	movs	r2, #2
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80014f0:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80014f2:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80014f4:	f413 7f40 	tst.w	r3, #768	; 0x300
 80014f8:	d075      	beq.n	80015e6 <HAL_TIM_IRQHandler+0x13a>
        HAL_TIM_IC_CaptureCallback(htim);
 80014fa:	f7ff ffd4 	bl	80014a6 <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80014fe:	2300      	movs	r3, #0
 8001500:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001502:	6823      	ldr	r3, [r4, #0]
 8001504:	691a      	ldr	r2, [r3, #16]
 8001506:	0711      	lsls	r1, r2, #28
 8001508:	d50f      	bpl.n	800152a <HAL_TIM_IRQHandler+0x7e>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800150a:	68da      	ldr	r2, [r3, #12]
 800150c:	0712      	lsls	r2, r2, #28
 800150e:	d50c      	bpl.n	800152a <HAL_TIM_IRQHandler+0x7e>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001510:	f06f 0208 	mvn.w	r2, #8
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001514:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001516:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001518:	2204      	movs	r2, #4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800151a:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800151c:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800151e:	079b      	lsls	r3, r3, #30
 8001520:	d067      	beq.n	80015f2 <HAL_TIM_IRQHandler+0x146>
        HAL_TIM_IC_CaptureCallback(htim);
 8001522:	f7ff ffc0 	bl	80014a6 <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001526:	2300      	movs	r3, #0
 8001528:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800152a:	6823      	ldr	r3, [r4, #0]
 800152c:	691a      	ldr	r2, [r3, #16]
 800152e:	06d0      	lsls	r0, r2, #27
 8001530:	d510      	bpl.n	8001554 <HAL_TIM_IRQHandler+0xa8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001532:	68da      	ldr	r2, [r3, #12]
 8001534:	06d1      	lsls	r1, r2, #27
 8001536:	d50d      	bpl.n	8001554 <HAL_TIM_IRQHandler+0xa8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001538:	f06f 0210 	mvn.w	r2, #16
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800153c:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800153e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001540:	2208      	movs	r2, #8
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001542:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001544:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001546:	f413 7f40 	tst.w	r3, #768	; 0x300
 800154a:	d058      	beq.n	80015fe <HAL_TIM_IRQHandler+0x152>
        HAL_TIM_IC_CaptureCallback(htim);
 800154c:	f7ff ffab 	bl	80014a6 <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001550:	2300      	movs	r3, #0
 8001552:	7723      	strb	r3, [r4, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001554:	6823      	ldr	r3, [r4, #0]
 8001556:	691a      	ldr	r2, [r3, #16]
 8001558:	07d2      	lsls	r2, r2, #31
 800155a:	d508      	bpl.n	800156e <HAL_TIM_IRQHandler+0xc2>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800155c:	68da      	ldr	r2, [r3, #12]
 800155e:	07d0      	lsls	r0, r2, #31
 8001560:	d505      	bpl.n	800156e <HAL_TIM_IRQHandler+0xc2>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001562:	f06f 0201 	mvn.w	r2, #1
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001566:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001568:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 800156a:	f7fe fff7 	bl	800055c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800156e:	6823      	ldr	r3, [r4, #0]
 8001570:	691a      	ldr	r2, [r3, #16]
 8001572:	0611      	lsls	r1, r2, #24
 8001574:	d508      	bpl.n	8001588 <HAL_TIM_IRQHandler+0xdc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001576:	68da      	ldr	r2, [r3, #12]
 8001578:	0612      	lsls	r2, r2, #24
 800157a:	d505      	bpl.n	8001588 <HAL_TIM_IRQHandler+0xdc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800157c:	f06f 0280 	mvn.w	r2, #128	; 0x80
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001580:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001582:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8001584:	f000 f8d9 	bl	800173a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8001588:	6823      	ldr	r3, [r4, #0]
 800158a:	691a      	ldr	r2, [r3, #16]
 800158c:	05d0      	lsls	r0, r2, #23
 800158e:	d508      	bpl.n	80015a2 <HAL_TIM_IRQHandler+0xf6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001590:	68da      	ldr	r2, [r3, #12]
 8001592:	0611      	lsls	r1, r2, #24
 8001594:	d505      	bpl.n	80015a2 <HAL_TIM_IRQHandler+0xf6>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8001596:	f46f 7280 	mvn.w	r2, #256	; 0x100
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800159a:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800159c:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 800159e:	f000 f8cd 	bl	800173c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80015a2:	6823      	ldr	r3, [r4, #0]
 80015a4:	691a      	ldr	r2, [r3, #16]
 80015a6:	0652      	lsls	r2, r2, #25
 80015a8:	d508      	bpl.n	80015bc <HAL_TIM_IRQHandler+0x110>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80015aa:	68da      	ldr	r2, [r3, #12]
 80015ac:	0650      	lsls	r0, r2, #25
 80015ae:	d505      	bpl.n	80015bc <HAL_TIM_IRQHandler+0x110>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80015b0:	f06f 0240 	mvn.w	r2, #64	; 0x40
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80015b4:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80015b6:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 80015b8:	f7ff ff77 	bl	80014aa <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80015bc:	6823      	ldr	r3, [r4, #0]
 80015be:	691a      	ldr	r2, [r3, #16]
 80015c0:	0691      	lsls	r1, r2, #26
 80015c2:	d522      	bpl.n	800160a <HAL_TIM_IRQHandler+0x15e>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80015c4:	68da      	ldr	r2, [r3, #12]
 80015c6:	0692      	lsls	r2, r2, #26
 80015c8:	d51f      	bpl.n	800160a <HAL_TIM_IRQHandler+0x15e>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80015ca:	f06f 0220 	mvn.w	r2, #32
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80015ce:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80015d0:	611a      	str	r2, [r3, #16]
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80015d2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutCallback(htim);
 80015d6:	f000 b8af 	b.w	8001738 <HAL_TIMEx_CommutCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80015da:	f7ff ff63 	bl	80014a4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80015de:	4620      	mov	r0, r4
 80015e0:	f7ff ff62 	bl	80014a8 <HAL_TIM_PWM_PulseFinishedCallback>
 80015e4:	e776      	b.n	80014d4 <HAL_TIM_IRQHandler+0x28>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80015e6:	f7ff ff5d 	bl	80014a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80015ea:	4620      	mov	r0, r4
 80015ec:	f7ff ff5c 	bl	80014a8 <HAL_TIM_PWM_PulseFinishedCallback>
 80015f0:	e785      	b.n	80014fe <HAL_TIM_IRQHandler+0x52>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80015f2:	f7ff ff57 	bl	80014a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80015f6:	4620      	mov	r0, r4
 80015f8:	f7ff ff56 	bl	80014a8 <HAL_TIM_PWM_PulseFinishedCallback>
 80015fc:	e793      	b.n	8001526 <HAL_TIM_IRQHandler+0x7a>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80015fe:	f7ff ff51 	bl	80014a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001602:	4620      	mov	r0, r4
 8001604:	f7ff ff50 	bl	80014a8 <HAL_TIM_PWM_PulseFinishedCallback>
 8001608:	e7a2      	b.n	8001550 <HAL_TIM_IRQHandler+0xa4>
}
 800160a:	bd10      	pop	{r4, pc}

0800160c <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800160c:	4a30      	ldr	r2, [pc, #192]	; (80016d0 <TIM_Base_SetConfig+0xc4>)
  tmpcr1 = TIMx->CR1;
 800160e:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001610:	4290      	cmp	r0, r2
 8001612:	d012      	beq.n	800163a <TIM_Base_SetConfig+0x2e>
 8001614:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8001618:	d00f      	beq.n	800163a <TIM_Base_SetConfig+0x2e>
 800161a:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 800161e:	4290      	cmp	r0, r2
 8001620:	d00b      	beq.n	800163a <TIM_Base_SetConfig+0x2e>
 8001622:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001626:	4290      	cmp	r0, r2
 8001628:	d007      	beq.n	800163a <TIM_Base_SetConfig+0x2e>
 800162a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800162e:	4290      	cmp	r0, r2
 8001630:	d003      	beq.n	800163a <TIM_Base_SetConfig+0x2e>
 8001632:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8001636:	4290      	cmp	r0, r2
 8001638:	d119      	bne.n	800166e <TIM_Base_SetConfig+0x62>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 800163a:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800163c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8001640:	4313      	orrs	r3, r2
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001642:	4a23      	ldr	r2, [pc, #140]	; (80016d0 <TIM_Base_SetConfig+0xc4>)
 8001644:	4290      	cmp	r0, r2
 8001646:	d01d      	beq.n	8001684 <TIM_Base_SetConfig+0x78>
 8001648:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800164c:	d01a      	beq.n	8001684 <TIM_Base_SetConfig+0x78>
 800164e:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8001652:	4290      	cmp	r0, r2
 8001654:	d016      	beq.n	8001684 <TIM_Base_SetConfig+0x78>
 8001656:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800165a:	4290      	cmp	r0, r2
 800165c:	d012      	beq.n	8001684 <TIM_Base_SetConfig+0x78>
 800165e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001662:	4290      	cmp	r0, r2
 8001664:	d00e      	beq.n	8001684 <TIM_Base_SetConfig+0x78>
 8001666:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 800166a:	4290      	cmp	r0, r2
 800166c:	d00a      	beq.n	8001684 <TIM_Base_SetConfig+0x78>
 800166e:	4a19      	ldr	r2, [pc, #100]	; (80016d4 <TIM_Base_SetConfig+0xc8>)
 8001670:	4290      	cmp	r0, r2
 8001672:	d007      	beq.n	8001684 <TIM_Base_SetConfig+0x78>
 8001674:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001678:	4290      	cmp	r0, r2
 800167a:	d003      	beq.n	8001684 <TIM_Base_SetConfig+0x78>
 800167c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001680:	4290      	cmp	r0, r2
 8001682:	d103      	bne.n	800168c <TIM_Base_SetConfig+0x80>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001684:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001688:	68ca      	ldr	r2, [r1, #12]
 800168a:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800168c:	694a      	ldr	r2, [r1, #20]
 800168e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001692:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 8001694:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001696:	688b      	ldr	r3, [r1, #8]
 8001698:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800169a:	680b      	ldr	r3, [r1, #0]
 800169c:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800169e:	4b0c      	ldr	r3, [pc, #48]	; (80016d0 <TIM_Base_SetConfig+0xc4>)
 80016a0:	4298      	cmp	r0, r3
 80016a2:	d00f      	beq.n	80016c4 <TIM_Base_SetConfig+0xb8>
 80016a4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80016a8:	4298      	cmp	r0, r3
 80016aa:	d00b      	beq.n	80016c4 <TIM_Base_SetConfig+0xb8>
 80016ac:	f503 5370 	add.w	r3, r3, #15360	; 0x3c00
 80016b0:	4298      	cmp	r0, r3
 80016b2:	d007      	beq.n	80016c4 <TIM_Base_SetConfig+0xb8>
 80016b4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80016b8:	4298      	cmp	r0, r3
 80016ba:	d003      	beq.n	80016c4 <TIM_Base_SetConfig+0xb8>
 80016bc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80016c0:	4298      	cmp	r0, r3
 80016c2:	d101      	bne.n	80016c8 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80016c4:	690b      	ldr	r3, [r1, #16]
 80016c6:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80016c8:	2301      	movs	r3, #1
 80016ca:	6143      	str	r3, [r0, #20]
}
 80016cc:	4770      	bx	lr
 80016ce:	bf00      	nop
 80016d0:	40010000 	.word	0x40010000
 80016d4:	40014000 	.word	0x40014000

080016d8 <HAL_TIM_Base_Init>:
{
 80016d8:	b510      	push	{r4, lr}
  if (htim == NULL)
 80016da:	4604      	mov	r4, r0
 80016dc:	b350      	cbz	r0, 8001734 <HAL_TIM_Base_Init+0x5c>
  if (htim->State == HAL_TIM_STATE_RESET)
 80016de:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80016e2:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80016e6:	b91b      	cbnz	r3, 80016f0 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 80016e8:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 80016ec:	f7ff feba 	bl	8001464 <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 80016f0:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80016f2:	6820      	ldr	r0, [r4, #0]
 80016f4:	1d21      	adds	r1, r4, #4
  htim->State = HAL_TIM_STATE_BUSY;
 80016f6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80016fa:	f7ff ff87 	bl	800160c <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80016fe:	2301      	movs	r3, #1
  return HAL_OK;
 8001700:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001702:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001706:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 800170a:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 800170e:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8001712:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 8001716:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800171a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800171e:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8001722:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8001726:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 800172a:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 800172e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 8001732:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001734:	2001      	movs	r0, #1
 8001736:	e7fc      	b.n	8001732 <HAL_TIM_Base_Init+0x5a>

08001738 <HAL_TIMEx_CommutCallback>:
 8001738:	4770      	bx	lr

0800173a <HAL_TIMEx_BreakCallback>:
 800173a:	4770      	bx	lr

0800173c <HAL_TIMEx_Break2Callback>:
 800173c:	4770      	bx	lr

0800173e <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800173e:	b508      	push	{r3, lr}
  vTaskStartScheduler();
 8001740:	f000 fd1e 	bl	8002180 <vTaskStartScheduler>
  
  return osOK;
}
 8001744:	2000      	movs	r0, #0
 8001746:	bd08      	pop	{r3, pc}

08001748 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8001748:	b530      	push	{r4, r5, lr}

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800174a:	f9b0 4008 	ldrsh.w	r4, [r0, #8]
{
 800174e:	b085      	sub	sp, #20
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001750:	8a02      	ldrh	r2, [r0, #16]
{
 8001752:	460b      	mov	r3, r1
  if (priority != osPriorityError) {
 8001754:	2c84      	cmp	r4, #132	; 0x84
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001756:	e9d0 1500 	ldrd	r1, r5, [r0]
    fpriority += (priority - osPriorityIdle);
 800175a:	bf14      	ite	ne
 800175c:	3403      	addne	r4, #3
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800175e:	2400      	moveq	r4, #0
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001760:	a803      	add	r0, sp, #12
 8001762:	e9cd 4000 	strd	r4, r0, [sp]
 8001766:	4628      	mov	r0, r5
 8001768:	f000 fc48 	bl	8001ffc <xTaskCreate>
 800176c:	2801      	cmp	r0, #1
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800176e:	bf0c      	ite	eq
 8001770:	9803      	ldreq	r0, [sp, #12]
    return NULL;
 8001772:	2000      	movne	r0, #0
}
 8001774:	b005      	add	sp, #20
 8001776:	bd30      	pop	{r4, r5, pc}

08001778 <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 8001778:	b513      	push	{r0, r1, r4, lr}
  osStatus result = osOK;
  portBASE_TYPE taskWoken = pdFALSE;
 800177a:	2400      	movs	r4, #0
 800177c:	9401      	str	r4, [sp, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800177e:	f3ef 8305 	mrs	r3, IPSR
  
  if (inHandlerMode()) {
 8001782:	b193      	cbz	r3, 80017aa <osMutexRelease+0x32>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8001784:	a901      	add	r1, sp, #4
 8001786:	f000 fa65 	bl	8001c54 <xQueueGiveFromISR>
 800178a:	2801      	cmp	r0, #1
 800178c:	d113      	bne.n	80017b6 <osMutexRelease+0x3e>
      return osErrorOS;
    }
    portEND_SWITCHING_ISR(taskWoken);
 800178e:	9b01      	ldr	r3, [sp, #4]
 8001790:	b913      	cbnz	r3, 8001798 <osMutexRelease+0x20>
  osStatus result = osOK;
 8001792:	2000      	movs	r0, #0
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
  {
    result = osErrorOS;
  }
  return result;
}
 8001794:	b002      	add	sp, #8
 8001796:	bd10      	pop	{r4, pc}
    portEND_SWITCHING_ISR(taskWoken);
 8001798:	4b08      	ldr	r3, [pc, #32]	; (80017bc <osMutexRelease+0x44>)
 800179a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800179e:	601a      	str	r2, [r3, #0]
 80017a0:	f3bf 8f4f 	dsb	sy
 80017a4:	f3bf 8f6f 	isb	sy
 80017a8:	e7f3      	b.n	8001792 <osMutexRelease+0x1a>
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 80017aa:	461a      	mov	r2, r3
 80017ac:	4619      	mov	r1, r3
 80017ae:	f000 f99f 	bl	8001af0 <xQueueGenericSend>
 80017b2:	2801      	cmp	r0, #1
 80017b4:	d0ed      	beq.n	8001792 <osMutexRelease+0x1a>
    result = osErrorOS;
 80017b6:	20ff      	movs	r0, #255	; 0xff
 80017b8:	e7ec      	b.n	8001794 <osMutexRelease+0x1c>
 80017ba:	bf00      	nop
 80017bc:	e000ed04 	.word	0xe000ed04

080017c0 <osSemaphoreCreate>:
#endif    
  }
#else  // configSUPPORT_STATIC_ALLOCATION == 0  && configSUPPORT_DYNAMIC_ALLOCATION == 1
  osSemaphoreId sema;
 
  if (count == 1) {
 80017c0:	2901      	cmp	r1, #1
{ 
 80017c2:	4608      	mov	r0, r1
 80017c4:	b510      	push	{r4, lr}
  if (count == 1) {
 80017c6:	d10c      	bne.n	80017e2 <osSemaphoreCreate+0x22>
    vSemaphoreCreateBinary(sema);
 80017c8:	2203      	movs	r2, #3
 80017ca:	2100      	movs	r1, #0
 80017cc:	f000 f94e 	bl	8001a6c <xQueueGenericCreate>
 80017d0:	4604      	mov	r4, r0
 80017d2:	b120      	cbz	r0, 80017de <osSemaphoreCreate+0x1e>
 80017d4:	2300      	movs	r3, #0
 80017d6:	461a      	mov	r2, r3
 80017d8:	4619      	mov	r1, r3
 80017da:	f000 f989 	bl	8001af0 <xQueueGenericSend>
#else
    return NULL;
#endif
  }
#endif
}
 80017de:	4620      	mov	r0, r4
 80017e0:	bd10      	pop	{r4, pc}
 80017e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return xSemaphoreCreateCounting(count, count);
 80017e6:	f000 b965 	b.w	8001ab4 <xQueueCreateCountingSemaphore>
	...

080017ec <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 80017ec:	b513      	push	{r0, r1, r4, lr}
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 80017ee:	2400      	movs	r4, #0
 80017f0:	9401      	str	r4, [sp, #4]
  
  
  if (semaphore_id == NULL) {
 80017f2:	b1e0      	cbz	r0, 800182e <osSemaphoreWait+0x42>
 80017f4:	f3ef 8305 	mrs	r3, IPSR
    if (ticks == 0) {
      ticks = 1;
    }
  }
  
  if (inHandlerMode()) {
 80017f8:	b1a3      	cbz	r3, 8001824 <osSemaphoreWait+0x38>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 80017fa:	aa01      	add	r2, sp, #4
 80017fc:	4621      	mov	r1, r4
 80017fe:	f000 fb3f 	bl	8001e80 <xQueueReceiveFromISR>
 8001802:	2801      	cmp	r0, #1
 8001804:	d002      	beq.n	800180c <osSemaphoreWait+0x20>
      return osErrorOS;
 8001806:	20ff      	movs	r0, #255	; 0xff
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
    return osErrorOS;
  }
  
  return osOK;
}
 8001808:	b002      	add	sp, #8
 800180a:	bd10      	pop	{r4, pc}
	portEND_SWITCHING_ISR(taskWoken);
 800180c:	9b01      	ldr	r3, [sp, #4]
 800180e:	b13b      	cbz	r3, 8001820 <osSemaphoreWait+0x34>
 8001810:	4b08      	ldr	r3, [pc, #32]	; (8001834 <osSemaphoreWait+0x48>)
 8001812:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001816:	601a      	str	r2, [r3, #0]
 8001818:	f3bf 8f4f 	dsb	sy
 800181c:	f3bf 8f6f 	isb	sy
  return osOK;
 8001820:	2000      	movs	r0, #0
 8001822:	e7f1      	b.n	8001808 <osSemaphoreWait+0x1c>
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 8001824:	f000 fa6a 	bl	8001cfc <xQueueSemaphoreTake>
 8001828:	2801      	cmp	r0, #1
 800182a:	d0f9      	beq.n	8001820 <osSemaphoreWait+0x34>
 800182c:	e7eb      	b.n	8001806 <osSemaphoreWait+0x1a>
    return osErrorParameter;
 800182e:	2080      	movs	r0, #128	; 0x80
 8001830:	e7ea      	b.n	8001808 <osSemaphoreWait+0x1c>
 8001832:	bf00      	nop
 8001834:	e000ed04 	.word	0xe000ed04

08001838 <osSemaphoreRelease>:
 8001838:	f7ff bf9e 	b.w	8001778 <osMutexRelease>

0800183c <osSystickHandler>:
* @brief  Handles the tick increment
* @param  none.
* @retval none.
*/
void osSystickHandler(void)
{
 800183c:	b508      	push	{r3, lr}

#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 800183e:	f000 fe8f 	bl	8002560 <xTaskGetSchedulerState>
 8001842:	2801      	cmp	r0, #1
 8001844:	d003      	beq.n	800184e <osSystickHandler+0x12>
#endif  /* INCLUDE_xTaskGetSchedulerState */  
    xPortSysTickHandler();
#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  }
#endif  /* INCLUDE_xTaskGetSchedulerState */  
}
 8001846:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    xPortSysTickHandler();
 800184a:	f001 b94b 	b.w	8002ae4 <xPortSysTickHandler>
}
 800184e:	bd08      	pop	{r3, pc}

08001850 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001850:	f100 0308 	add.w	r3, r0, #8

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8001854:	f04f 32ff 	mov.w	r2, #4294967295
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001858:	6043      	str	r3, [r0, #4]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800185a:	6103      	str	r3, [r0, #16]
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800185c:	e9c0 2302 	strd	r2, r3, [r0, #8]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8001860:	2300      	movs	r3, #0
 8001862:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8001864:	4770      	bx	lr

08001866 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8001866:	2300      	movs	r3, #0
 8001868:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800186a:	4770      	bx	lr

0800186c <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 800186c:	6843      	ldr	r3, [r0, #4]

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800186e:	689a      	ldr	r2, [r3, #8]
	pxNewListItem->pxNext = pxIndex;
 8001870:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8001872:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8001874:	689a      	ldr	r2, [r3, #8]
 8001876:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8001878:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
 800187a:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pxContainer = pxList;
 800187c:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 800187e:	3301      	adds	r3, #1
 8001880:	6003      	str	r3, [r0, #0]
}
 8001882:	4770      	bx	lr

08001884 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8001884:	680a      	ldr	r2, [r1, #0]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8001886:	1c53      	adds	r3, r2, #1
{
 8001888:	b530      	push	{r4, r5, lr}
	if( xValueOfInsertion == portMAX_DELAY )
 800188a:	d10a      	bne.n	80018a2 <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800188c:	6903      	ldr	r3, [r0, #16]
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800188e:	685a      	ldr	r2, [r3, #4]
 8001890:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8001892:	6091      	str	r1, [r2, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8001894:	608b      	str	r3, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 8001896:	6059      	str	r1, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
 8001898:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pxContainer = pxList;
 800189a:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 800189c:	3301      	adds	r3, #1
 800189e:	6003      	str	r3, [r0, #0]
}
 80018a0:	bd30      	pop	{r4, r5, pc}
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80018a2:	f100 0308 	add.w	r3, r0, #8
 80018a6:	685c      	ldr	r4, [r3, #4]
 80018a8:	6825      	ldr	r5, [r4, #0]
 80018aa:	4295      	cmp	r5, r2
 80018ac:	d8ef      	bhi.n	800188e <vListInsert+0xa>
 80018ae:	4623      	mov	r3, r4
 80018b0:	e7f9      	b.n	80018a6 <vListInsert+0x22>

080018b2 <uxListRemove>:
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80018b2:	e9d0 1201 	ldrd	r1, r2, [r0, #4]
List_t * const pxList = pxItemToRemove->pxContainer;
 80018b6:	6903      	ldr	r3, [r0, #16]
	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80018b8:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80018ba:	6882      	ldr	r2, [r0, #8]
 80018bc:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80018be:	6859      	ldr	r1, [r3, #4]
 80018c0:	4281      	cmp	r1, r0
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80018c2:	bf08      	it	eq
 80018c4:	605a      	streq	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80018c6:	2200      	movs	r2, #0
 80018c8:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 80018ca:	681a      	ldr	r2, [r3, #0]
 80018cc:	3a01      	subs	r2, #1
 80018ce:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80018d0:	6818      	ldr	r0, [r3, #0]
}
 80018d2:	4770      	bx	lr

080018d4 <prvIsQueueEmpty>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80018d4:	b510      	push	{r4, lr}
 80018d6:	4604      	mov	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80018d8:	f001 f89c 	bl	8002a14 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80018dc:	6ba4      	ldr	r4, [r4, #56]	; 0x38
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 80018de:	f001 f8bb 	bl	8002a58 <vPortExitCritical>

	return xReturn;
}
 80018e2:	fab4 f084 	clz	r0, r4
 80018e6:	0940      	lsrs	r0, r0, #5
 80018e8:	bd10      	pop	{r4, pc}

080018ea <prvCopyDataToQueue>:
{
 80018ea:	b570      	push	{r4, r5, r6, lr}
 80018ec:	4615      	mov	r5, r2
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80018ee:	6c02      	ldr	r2, [r0, #64]	; 0x40
{
 80018f0:	4604      	mov	r4, r0
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80018f2:	6b86      	ldr	r6, [r0, #56]	; 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80018f4:	b942      	cbnz	r2, 8001908 <prvCopyDataToQueue+0x1e>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80018f6:	6805      	ldr	r5, [r0, #0]
 80018f8:	b99d      	cbnz	r5, 8001922 <prvCopyDataToQueue+0x38>
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80018fa:	6880      	ldr	r0, [r0, #8]
 80018fc:	f000 fe90 	bl	8002620 <xTaskPriorityDisinherit>
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8001900:	60a5      	str	r5, [r4, #8]
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8001902:	3601      	adds	r6, #1
 8001904:	63a6      	str	r6, [r4, #56]	; 0x38
}
 8001906:	bd70      	pop	{r4, r5, r6, pc}
	else if( xPosition == queueSEND_TO_BACK )
 8001908:	b96d      	cbnz	r5, 8001926 <prvCopyDataToQueue+0x3c>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800190a:	6840      	ldr	r0, [r0, #4]
 800190c:	f001 f9ea 	bl	8002ce4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8001910:	6863      	ldr	r3, [r4, #4]
 8001912:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8001914:	4413      	add	r3, r2
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8001916:	68a2      	ldr	r2, [r4, #8]
 8001918:	4293      	cmp	r3, r2
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800191a:	6063      	str	r3, [r4, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800191c:	d301      	bcc.n	8001922 <prvCopyDataToQueue+0x38>
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800191e:	6823      	ldr	r3, [r4, #0]
 8001920:	6063      	str	r3, [r4, #4]
BaseType_t xReturn = pdFALSE;
 8001922:	2000      	movs	r0, #0
 8001924:	e7ed      	b.n	8001902 <prvCopyDataToQueue+0x18>
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8001926:	68c0      	ldr	r0, [r0, #12]
 8001928:	f001 f9dc 	bl	8002ce4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800192c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800192e:	68e2      	ldr	r2, [r4, #12]
 8001930:	425b      	negs	r3, r3
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8001932:	6821      	ldr	r1, [r4, #0]
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8001934:	441a      	add	r2, r3
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8001936:	428a      	cmp	r2, r1
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8001938:	60e2      	str	r2, [r4, #12]
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800193a:	bf3e      	ittt	cc
 800193c:	68a2      	ldrcc	r2, [r4, #8]
 800193e:	189b      	addcc	r3, r3, r2
 8001940:	60e3      	strcc	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
 8001942:	2d02      	cmp	r5, #2
 8001944:	d1ed      	bne.n	8001922 <prvCopyDataToQueue+0x38>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8001946:	b10e      	cbz	r6, 800194c <prvCopyDataToQueue+0x62>
				--uxMessagesWaiting;
 8001948:	3e01      	subs	r6, #1
 800194a:	e7ea      	b.n	8001922 <prvCopyDataToQueue+0x38>
BaseType_t xReturn = pdFALSE;
 800194c:	4630      	mov	r0, r6
 800194e:	e7d8      	b.n	8001902 <prvCopyDataToQueue+0x18>

08001950 <prvCopyDataFromQueue>:
{
 8001950:	4603      	mov	r3, r0
 8001952:	4608      	mov	r0, r1
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8001954:	6c1a      	ldr	r2, [r3, #64]	; 0x40
{
 8001956:	b410      	push	{r4}
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8001958:	b162      	cbz	r2, 8001974 <prvCopyDataFromQueue+0x24>
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800195a:	68d9      	ldr	r1, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800195c:	689c      	ldr	r4, [r3, #8]
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800195e:	4411      	add	r1, r2
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8001960:	42a1      	cmp	r1, r4
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8001962:	60d9      	str	r1, [r3, #12]
}
 8001964:	f85d 4b04 	ldr.w	r4, [sp], #4
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8001968:	bf24      	itt	cs
 800196a:	6819      	ldrcs	r1, [r3, #0]
 800196c:	60d9      	strcs	r1, [r3, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800196e:	68d9      	ldr	r1, [r3, #12]
 8001970:	f001 b9b8 	b.w	8002ce4 <memcpy>
}
 8001974:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001978:	4770      	bx	lr

0800197a <prvUnlockQueue>:
{
 800197a:	b570      	push	{r4, r5, r6, lr}
 800197c:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 800197e:	f001 f849 	bl	8002a14 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 8001982:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001986:	f104 0624 	add.w	r6, r4, #36	; 0x24
		int8_t cTxLock = pxQueue->cTxLock;
 800198a:	b26d      	sxtb	r5, r5
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800198c:	2d00      	cmp	r5, #0
 800198e:	dc14      	bgt.n	80019ba <prvUnlockQueue+0x40>
		pxQueue->cTxLock = queueUNLOCKED;
 8001990:	23ff      	movs	r3, #255	; 0xff
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001992:	f104 0610 	add.w	r6, r4, #16
		pxQueue->cTxLock = queueUNLOCKED;
 8001996:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
 800199a:	f001 f85d 	bl	8002a58 <vPortExitCritical>
	taskENTER_CRITICAL();
 800199e:	f001 f839 	bl	8002a14 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 80019a2:	f894 5044 	ldrb.w	r5, [r4, #68]	; 0x44
 80019a6:	b26d      	sxtb	r5, r5
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80019a8:	2d00      	cmp	r5, #0
 80019aa:	dc12      	bgt.n	80019d2 <prvUnlockQueue+0x58>
		pxQueue->cRxLock = queueUNLOCKED;
 80019ac:	23ff      	movs	r3, #255	; 0xff
 80019ae:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
}
 80019b2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	taskEXIT_CRITICAL();
 80019b6:	f001 b84f 	b.w	8002a58 <vPortExitCritical>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80019ba:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d0e7      	beq.n	8001990 <prvUnlockQueue+0x16>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80019c0:	4630      	mov	r0, r6
 80019c2:	f000 fd47 	bl	8002454 <xTaskRemoveFromEventList>
 80019c6:	b108      	cbz	r0, 80019cc <prvUnlockQueue+0x52>
						vTaskMissedYield();
 80019c8:	f000 fdc2 	bl	8002550 <vTaskMissedYield>
 80019cc:	3d01      	subs	r5, #1
 80019ce:	b26d      	sxtb	r5, r5
 80019d0:	e7dc      	b.n	800198c <prvUnlockQueue+0x12>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80019d2:	6923      	ldr	r3, [r4, #16]
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d0e9      	beq.n	80019ac <prvUnlockQueue+0x32>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80019d8:	4630      	mov	r0, r6
 80019da:	f000 fd3b 	bl	8002454 <xTaskRemoveFromEventList>
 80019de:	b108      	cbz	r0, 80019e4 <prvUnlockQueue+0x6a>
					vTaskMissedYield();
 80019e0:	f000 fdb6 	bl	8002550 <vTaskMissedYield>
 80019e4:	3d01      	subs	r5, #1
 80019e6:	b26d      	sxtb	r5, r5
 80019e8:	e7de      	b.n	80019a8 <prvUnlockQueue+0x2e>
	...

080019ec <xQueueGenericReset>:
{
 80019ec:	b538      	push	{r3, r4, r5, lr}
 80019ee:	460d      	mov	r5, r1
	configASSERT( pxQueue );
 80019f0:	4604      	mov	r4, r0
 80019f2:	b940      	cbnz	r0, 8001a06 <xQueueGenericReset+0x1a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80019f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80019f8:	f383 8811 	msr	BASEPRI, r3
 80019fc:	f3bf 8f6f 	isb	sy
 8001a00:	f3bf 8f4f 	dsb	sy
 8001a04:	e7fe      	b.n	8001a04 <xQueueGenericReset+0x18>
	taskENTER_CRITICAL();
 8001a06:	f001 f805 	bl	8002a14 <vPortEnterCritical>
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001a0a:	6822      	ldr	r2, [r4, #0]
 8001a0c:	e9d4 300f 	ldrd	r3, r0, [r4, #60]	; 0x3c
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8001a10:	6062      	str	r2, [r4, #4]
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001a12:	4343      	muls	r3, r0
 8001a14:	18d1      	adds	r1, r2, r3
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001a16:	1a1b      	subs	r3, r3, r0
 8001a18:	4413      	add	r3, r2
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001a1a:	60a1      	str	r1, [r4, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8001a1c:	2100      	movs	r1, #0
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001a1e:	60e3      	str	r3, [r4, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8001a20:	23ff      	movs	r3, #255	; 0xff
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8001a22:	63a1      	str	r1, [r4, #56]	; 0x38
		pxQueue->cRxLock = queueUNLOCKED;
 8001a24:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8001a28:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
		if( xNewQueue == pdFALSE )
 8001a2c:	b995      	cbnz	r5, 8001a54 <xQueueGenericReset+0x68>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001a2e:	6923      	ldr	r3, [r4, #16]
 8001a30:	b163      	cbz	r3, 8001a4c <xQueueGenericReset+0x60>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001a32:	f104 0010 	add.w	r0, r4, #16
 8001a36:	f000 fd0d 	bl	8002454 <xTaskRemoveFromEventList>
 8001a3a:	b138      	cbz	r0, 8001a4c <xQueueGenericReset+0x60>
					queueYIELD_IF_USING_PREEMPTION();
 8001a3c:	4b0a      	ldr	r3, [pc, #40]	; (8001a68 <xQueueGenericReset+0x7c>)
 8001a3e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001a42:	601a      	str	r2, [r3, #0]
 8001a44:	f3bf 8f4f 	dsb	sy
 8001a48:	f3bf 8f6f 	isb	sy
	taskEXIT_CRITICAL();
 8001a4c:	f001 f804 	bl	8002a58 <vPortExitCritical>
}
 8001a50:	2001      	movs	r0, #1
 8001a52:	bd38      	pop	{r3, r4, r5, pc}
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8001a54:	f104 0010 	add.w	r0, r4, #16
 8001a58:	f7ff fefa 	bl	8001850 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8001a5c:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8001a60:	f7ff fef6 	bl	8001850 <vListInitialise>
 8001a64:	e7f2      	b.n	8001a4c <xQueueGenericReset+0x60>
 8001a66:	bf00      	nop
 8001a68:	e000ed04 	.word	0xe000ed04

08001a6c <xQueueGenericCreate>:
	{
 8001a6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001a6e:	460d      	mov	r5, r1
 8001a70:	4617      	mov	r7, r2
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8001a72:	4606      	mov	r6, r0
 8001a74:	b940      	cbnz	r0, 8001a88 <xQueueGenericCreate+0x1c>
 8001a76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001a7a:	f383 8811 	msr	BASEPRI, r3
 8001a7e:	f3bf 8f6f 	isb	sy
 8001a82:	f3bf 8f4f 	dsb	sy
 8001a86:	e7fe      	b.n	8001a86 <xQueueGenericCreate+0x1a>
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001a88:	4348      	muls	r0, r1
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8001a8a:	3050      	adds	r0, #80	; 0x50
 8001a8c:	f000 fe9e 	bl	80027cc <pvPortMalloc>
		if( pxNewQueue != NULL )
 8001a90:	4604      	mov	r4, r0
 8001a92:	b148      	cbz	r0, 8001aa8 <xQueueGenericCreate+0x3c>
	if( uxItemSize == ( UBaseType_t ) 0 )
 8001a94:	b955      	cbnz	r5, 8001aac <xQueueGenericCreate+0x40>
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8001a96:	6020      	str	r0, [r4, #0]
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8001a98:	2101      	movs	r1, #1
 8001a9a:	4620      	mov	r0, r4
	pxNewQueue->uxItemSize = uxItemSize;
 8001a9c:	e9c4 650f 	strd	r6, r5, [r4, #60]	; 0x3c
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8001aa0:	f7ff ffa4 	bl	80019ec <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
 8001aa4:	f884 704c 	strb.w	r7, [r4, #76]	; 0x4c
	}
 8001aa8:	4620      	mov	r0, r4
 8001aaa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001aac:	f100 0350 	add.w	r3, r0, #80	; 0x50
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8001ab0:	6003      	str	r3, [r0, #0]
 8001ab2:	e7f1      	b.n	8001a98 <xQueueGenericCreate+0x2c>

08001ab4 <xQueueCreateCountingSemaphore>:
	{
 8001ab4:	b510      	push	{r4, lr}
 8001ab6:	460c      	mov	r4, r1
		configASSERT( uxMaxCount != 0 );
 8001ab8:	b940      	cbnz	r0, 8001acc <xQueueCreateCountingSemaphore+0x18>
 8001aba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001abe:	f383 8811 	msr	BASEPRI, r3
 8001ac2:	f3bf 8f6f 	isb	sy
 8001ac6:	f3bf 8f4f 	dsb	sy
 8001aca:	e7fe      	b.n	8001aca <xQueueCreateCountingSemaphore+0x16>
		configASSERT( uxInitialCount <= uxMaxCount );
 8001acc:	4288      	cmp	r0, r1
 8001ace:	d208      	bcs.n	8001ae2 <xQueueCreateCountingSemaphore+0x2e>
 8001ad0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001ad4:	f383 8811 	msr	BASEPRI, r3
 8001ad8:	f3bf 8f6f 	isb	sy
 8001adc:	f3bf 8f4f 	dsb	sy
 8001ae0:	e7fe      	b.n	8001ae0 <xQueueCreateCountingSemaphore+0x2c>
		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8001ae2:	2202      	movs	r2, #2
 8001ae4:	2100      	movs	r1, #0
 8001ae6:	f7ff ffc1 	bl	8001a6c <xQueueGenericCreate>
		if( xHandle != NULL )
 8001aea:	b100      	cbz	r0, 8001aee <xQueueCreateCountingSemaphore+0x3a>
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8001aec:	6384      	str	r4, [r0, #56]	; 0x38
	}
 8001aee:	bd10      	pop	{r4, pc}

08001af0 <xQueueGenericSend>:
{
 8001af0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8001af4:	4688      	mov	r8, r1
 8001af6:	9201      	str	r2, [sp, #4]
 8001af8:	461f      	mov	r7, r3
	configASSERT( pxQueue );
 8001afa:	4604      	mov	r4, r0
 8001afc:	b940      	cbnz	r0, 8001b10 <xQueueGenericSend+0x20>
 8001afe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001b02:	f383 8811 	msr	BASEPRI, r3
 8001b06:	f3bf 8f6f 	isb	sy
 8001b0a:	f3bf 8f4f 	dsb	sy
 8001b0e:	e7fe      	b.n	8001b0e <xQueueGenericSend+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8001b10:	b951      	cbnz	r1, 8001b28 <xQueueGenericSend+0x38>
 8001b12:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8001b14:	b143      	cbz	r3, 8001b28 <xQueueGenericSend+0x38>
 8001b16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001b1a:	f383 8811 	msr	BASEPRI, r3
 8001b1e:	f3bf 8f6f 	isb	sy
 8001b22:	f3bf 8f4f 	dsb	sy
 8001b26:	e7fe      	b.n	8001b26 <xQueueGenericSend+0x36>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8001b28:	2f02      	cmp	r7, #2
 8001b2a:	d10b      	bne.n	8001b44 <xQueueGenericSend+0x54>
 8001b2c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001b2e:	2b01      	cmp	r3, #1
 8001b30:	d008      	beq.n	8001b44 <xQueueGenericSend+0x54>
 8001b32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001b36:	f383 8811 	msr	BASEPRI, r3
 8001b3a:	f3bf 8f6f 	isb	sy
 8001b3e:	f3bf 8f4f 	dsb	sy
 8001b42:	e7fe      	b.n	8001b42 <xQueueGenericSend+0x52>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8001b44:	f000 fd0c 	bl	8002560 <xTaskGetSchedulerState>
 8001b48:	b950      	cbnz	r0, 8001b60 <xQueueGenericSend+0x70>
 8001b4a:	9e01      	ldr	r6, [sp, #4]
 8001b4c:	b14e      	cbz	r6, 8001b62 <xQueueGenericSend+0x72>
 8001b4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001b52:	f383 8811 	msr	BASEPRI, r3
 8001b56:	f3bf 8f6f 	isb	sy
 8001b5a:	f3bf 8f4f 	dsb	sy
 8001b5e:	e7fe      	b.n	8001b5e <xQueueGenericSend+0x6e>
 8001b60:	2600      	movs	r6, #0
		prvLockQueue( pxQueue );
 8001b62:	f04f 0900 	mov.w	r9, #0
					portYIELD_WITHIN_API();
 8001b66:	f8df a0e8 	ldr.w	sl, [pc, #232]	; 8001c50 <xQueueGenericSend+0x160>
 8001b6a:	e037      	b.n	8001bdc <xQueueGenericSend+0xec>
				if( xTicksToWait == ( TickType_t ) 0 )
 8001b6c:	9d01      	ldr	r5, [sp, #4]
 8001b6e:	b91d      	cbnz	r5, 8001b78 <xQueueGenericSend+0x88>
					taskEXIT_CRITICAL();
 8001b70:	f000 ff72 	bl	8002a58 <vPortExitCritical>
			return errQUEUE_FULL;
 8001b74:	2000      	movs	r0, #0
 8001b76:	e050      	b.n	8001c1a <xQueueGenericSend+0x12a>
				else if( xEntryTimeSet == pdFALSE )
 8001b78:	b916      	cbnz	r6, 8001b80 <xQueueGenericSend+0x90>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8001b7a:	a802      	add	r0, sp, #8
 8001b7c:	f000 fca4 	bl	80024c8 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 8001b80:	f000 ff6a 	bl	8002a58 <vPortExitCritical>
		vTaskSuspendAll();
 8001b84:	f000 fb32 	bl	80021ec <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8001b88:	f000 ff44 	bl	8002a14 <vPortEnterCritical>
 8001b8c:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8001b90:	2bff      	cmp	r3, #255	; 0xff
 8001b92:	d101      	bne.n	8001b98 <xQueueGenericSend+0xa8>
 8001b94:	f884 9044 	strb.w	r9, [r4, #68]	; 0x44
 8001b98:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8001b9c:	2bff      	cmp	r3, #255	; 0xff
 8001b9e:	d101      	bne.n	8001ba4 <xQueueGenericSend+0xb4>
 8001ba0:	f884 9045 	strb.w	r9, [r4, #69]	; 0x45
 8001ba4:	f000 ff58 	bl	8002a58 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8001ba8:	a901      	add	r1, sp, #4
 8001baa:	a802      	add	r0, sp, #8
 8001bac:	f000 fc96 	bl	80024dc <xTaskCheckForTimeOut>
 8001bb0:	2800      	cmp	r0, #0
 8001bb2:	d146      	bne.n	8001c42 <xQueueGenericSend+0x152>

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8001bb4:	f000 ff2e 	bl	8002a14 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8001bb8:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8001bba:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001bbc:	429a      	cmp	r2, r3
 8001bbe:	d12f      	bne.n	8001c20 <xQueueGenericSend+0x130>
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 8001bc0:	f000 ff4a 	bl	8002a58 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8001bc4:	9901      	ldr	r1, [sp, #4]
 8001bc6:	f104 0010 	add.w	r0, r4, #16
 8001bca:	f000 fc29 	bl	8002420 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8001bce:	4620      	mov	r0, r4
 8001bd0:	f7ff fed3 	bl	800197a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8001bd4:	f000 fb88 	bl	80022e8 <xTaskResumeAll>
 8001bd8:	b350      	cbz	r0, 8001c30 <xQueueGenericSend+0x140>
 8001bda:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
 8001bdc:	f000 ff1a 	bl	8002a14 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8001be0:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8001be2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001be4:	429a      	cmp	r2, r3
 8001be6:	d301      	bcc.n	8001bec <xQueueGenericSend+0xfc>
 8001be8:	2f02      	cmp	r7, #2
 8001bea:	d1bf      	bne.n	8001b6c <xQueueGenericSend+0x7c>
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8001bec:	463a      	mov	r2, r7
 8001bee:	4641      	mov	r1, r8
 8001bf0:	4620      	mov	r0, r4
 8001bf2:	f7ff fe7a 	bl	80018ea <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001bf6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001bf8:	b11b      	cbz	r3, 8001c02 <xQueueGenericSend+0x112>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001bfa:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8001bfe:	f000 fc29 	bl	8002454 <xTaskRemoveFromEventList>
					else if( xYieldRequired != pdFALSE )
 8001c02:	b138      	cbz	r0, 8001c14 <xQueueGenericSend+0x124>
						queueYIELD_IF_USING_PREEMPTION();
 8001c04:	4b12      	ldr	r3, [pc, #72]	; (8001c50 <xQueueGenericSend+0x160>)
 8001c06:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001c0a:	601a      	str	r2, [r3, #0]
 8001c0c:	f3bf 8f4f 	dsb	sy
 8001c10:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 8001c14:	f000 ff20 	bl	8002a58 <vPortExitCritical>
				return pdPASS;
 8001c18:	2001      	movs	r0, #1
}
 8001c1a:	b004      	add	sp, #16
 8001c1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	taskEXIT_CRITICAL();
 8001c20:	f000 ff1a 	bl	8002a58 <vPortExitCritical>
				prvUnlockQueue( pxQueue );
 8001c24:	4620      	mov	r0, r4
 8001c26:	f7ff fea8 	bl	800197a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8001c2a:	f000 fb5d 	bl	80022e8 <xTaskResumeAll>
 8001c2e:	e7d4      	b.n	8001bda <xQueueGenericSend+0xea>
					portYIELD_WITHIN_API();
 8001c30:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8001c34:	f8ca 3000 	str.w	r3, [sl]
 8001c38:	f3bf 8f4f 	dsb	sy
 8001c3c:	f3bf 8f6f 	isb	sy
 8001c40:	e7cb      	b.n	8001bda <xQueueGenericSend+0xea>
			prvUnlockQueue( pxQueue );
 8001c42:	4620      	mov	r0, r4
 8001c44:	f7ff fe99 	bl	800197a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8001c48:	f000 fb4e 	bl	80022e8 <xTaskResumeAll>
 8001c4c:	e792      	b.n	8001b74 <xQueueGenericSend+0x84>
 8001c4e:	bf00      	nop
 8001c50:	e000ed04 	.word	0xe000ed04

08001c54 <xQueueGiveFromISR>:
{
 8001c54:	b570      	push	{r4, r5, r6, lr}
 8001c56:	460d      	mov	r5, r1
	configASSERT( pxQueue );
 8001c58:	4604      	mov	r4, r0
 8001c5a:	b940      	cbnz	r0, 8001c6e <xQueueGiveFromISR+0x1a>
 8001c5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001c60:	f383 8811 	msr	BASEPRI, r3
 8001c64:	f3bf 8f6f 	isb	sy
 8001c68:	f3bf 8f4f 	dsb	sy
 8001c6c:	e7fe      	b.n	8001c6c <xQueueGiveFromISR+0x18>
	configASSERT( pxQueue->uxItemSize == 0 );
 8001c6e:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8001c70:	b143      	cbz	r3, 8001c84 <xQueueGiveFromISR+0x30>
 8001c72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001c76:	f383 8811 	msr	BASEPRI, r3
 8001c7a:	f3bf 8f6f 	isb	sy
 8001c7e:	f3bf 8f4f 	dsb	sy
 8001c82:	e7fe      	b.n	8001c82 <xQueueGiveFromISR+0x2e>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8001c84:	6803      	ldr	r3, [r0, #0]
 8001c86:	b953      	cbnz	r3, 8001c9e <xQueueGiveFromISR+0x4a>
 8001c88:	6883      	ldr	r3, [r0, #8]
 8001c8a:	b143      	cbz	r3, 8001c9e <xQueueGiveFromISR+0x4a>
 8001c8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001c90:	f383 8811 	msr	BASEPRI, r3
 8001c94:	f3bf 8f6f 	isb	sy
 8001c98:	f3bf 8f4f 	dsb	sy
 8001c9c:	e7fe      	b.n	8001c9c <xQueueGiveFromISR+0x48>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8001c9e:	f000 ffd3 	bl	8002c48 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8001ca2:	f3ef 8611 	mrs	r6, BASEPRI
 8001ca6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001caa:	f383 8811 	msr	BASEPRI, r3
 8001cae:	f3bf 8f6f 	isb	sy
 8001cb2:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8001cb6:	6ba2      	ldr	r2, [r4, #56]	; 0x38
		if( uxMessagesWaiting < pxQueue->uxLength )
 8001cb8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001cba:	4293      	cmp	r3, r2
 8001cbc:	d91c      	bls.n	8001cf8 <xQueueGiveFromISR+0xa4>
			const int8_t cTxLock = pxQueue->cTxLock;
 8001cbe:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8001cc2:	3201      	adds	r2, #1
			const int8_t cTxLock = pxQueue->cTxLock;
 8001cc4:	b25b      	sxtb	r3, r3
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8001cc6:	63a2      	str	r2, [r4, #56]	; 0x38
			if( cTxLock == queueUNLOCKED )
 8001cc8:	1c5a      	adds	r2, r3, #1
 8001cca:	d110      	bne.n	8001cee <xQueueGiveFromISR+0x9a>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001ccc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001cce:	b90b      	cbnz	r3, 8001cd4 <xQueueGiveFromISR+0x80>
			xReturn = pdPASS;
 8001cd0:	2001      	movs	r0, #1
 8001cd2:	e009      	b.n	8001ce8 <xQueueGiveFromISR+0x94>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001cd4:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8001cd8:	f000 fbbc 	bl	8002454 <xTaskRemoveFromEventList>
 8001cdc:	2800      	cmp	r0, #0
 8001cde:	d0f7      	beq.n	8001cd0 <xQueueGiveFromISR+0x7c>
							if( pxHigherPriorityTaskWoken != NULL )
 8001ce0:	2d00      	cmp	r5, #0
 8001ce2:	d0f5      	beq.n	8001cd0 <xQueueGiveFromISR+0x7c>
								*pxHigherPriorityTaskWoken = pdTRUE;
 8001ce4:	2001      	movs	r0, #1
 8001ce6:	6028      	str	r0, [r5, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8001ce8:	f386 8811 	msr	BASEPRI, r6
}
 8001cec:	bd70      	pop	{r4, r5, r6, pc}
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8001cee:	3301      	adds	r3, #1
 8001cf0:	b25b      	sxtb	r3, r3
 8001cf2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8001cf6:	e7eb      	b.n	8001cd0 <xQueueGiveFromISR+0x7c>
			xReturn = errQUEUE_FULL;
 8001cf8:	2000      	movs	r0, #0
 8001cfa:	e7f5      	b.n	8001ce8 <xQueueGiveFromISR+0x94>

08001cfc <xQueueSemaphoreTake>:
{
 8001cfc:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	configASSERT( ( pxQueue ) );
 8001d00:	4604      	mov	r4, r0
{
 8001d02:	9101      	str	r1, [sp, #4]
	configASSERT( ( pxQueue ) );
 8001d04:	b940      	cbnz	r0, 8001d18 <xQueueSemaphoreTake+0x1c>
	__asm volatile
 8001d06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001d0a:	f383 8811 	msr	BASEPRI, r3
 8001d0e:	f3bf 8f6f 	isb	sy
 8001d12:	f3bf 8f4f 	dsb	sy
 8001d16:	e7fe      	b.n	8001d16 <xQueueSemaphoreTake+0x1a>
	configASSERT( pxQueue->uxItemSize == 0 );
 8001d18:	6c05      	ldr	r5, [r0, #64]	; 0x40
 8001d1a:	b145      	cbz	r5, 8001d2e <xQueueSemaphoreTake+0x32>
 8001d1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001d20:	f383 8811 	msr	BASEPRI, r3
 8001d24:	f3bf 8f6f 	isb	sy
 8001d28:	f3bf 8f4f 	dsb	sy
 8001d2c:	e7fe      	b.n	8001d2c <xQueueSemaphoreTake+0x30>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8001d2e:	f000 fc17 	bl	8002560 <xTaskGetSchedulerState>
 8001d32:	b950      	cbnz	r0, 8001d4a <xQueueSemaphoreTake+0x4e>
 8001d34:	9d01      	ldr	r5, [sp, #4]
 8001d36:	b145      	cbz	r5, 8001d4a <xQueueSemaphoreTake+0x4e>
 8001d38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001d3c:	f383 8811 	msr	BASEPRI, r3
 8001d40:	f3bf 8f6f 	isb	sy
 8001d44:	f3bf 8f4f 	dsb	sy
 8001d48:	e7fe      	b.n	8001d48 <xQueueSemaphoreTake+0x4c>
 8001d4a:	462e      	mov	r6, r5
		prvLockQueue( pxQueue );
 8001d4c:	2700      	movs	r7, #0
					portYIELD_WITHIN_API();
 8001d4e:	f8df 812c 	ldr.w	r8, [pc, #300]	; 8001e7c <xQueueSemaphoreTake+0x180>
 8001d52:	e04f      	b.n	8001df4 <xQueueSemaphoreTake+0xf8>
				if( xTicksToWait == ( TickType_t ) 0 )
 8001d54:	9b01      	ldr	r3, [sp, #4]
 8001d56:	b963      	cbnz	r3, 8001d72 <xQueueSemaphoreTake+0x76>
						configASSERT( xInheritanceOccurred == pdFALSE );
 8001d58:	b145      	cbz	r5, 8001d6c <xQueueSemaphoreTake+0x70>
 8001d5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001d5e:	f383 8811 	msr	BASEPRI, r3
 8001d62:	f3bf 8f6f 	isb	sy
 8001d66:	f3bf 8f4f 	dsb	sy
 8001d6a:	e7fe      	b.n	8001d6a <xQueueSemaphoreTake+0x6e>
					taskEXIT_CRITICAL();
 8001d6c:	f000 fe74 	bl	8002a58 <vPortExitCritical>
					return errQUEUE_EMPTY;
 8001d70:	e05e      	b.n	8001e30 <xQueueSemaphoreTake+0x134>
				else if( xEntryTimeSet == pdFALSE )
 8001d72:	b916      	cbnz	r6, 8001d7a <xQueueSemaphoreTake+0x7e>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8001d74:	a802      	add	r0, sp, #8
 8001d76:	f000 fba7 	bl	80024c8 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 8001d7a:	f000 fe6d 	bl	8002a58 <vPortExitCritical>
		vTaskSuspendAll();
 8001d7e:	f000 fa35 	bl	80021ec <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8001d82:	f000 fe47 	bl	8002a14 <vPortEnterCritical>
 8001d86:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8001d8a:	2bff      	cmp	r3, #255	; 0xff
 8001d8c:	d101      	bne.n	8001d92 <xQueueSemaphoreTake+0x96>
 8001d8e:	f884 7044 	strb.w	r7, [r4, #68]	; 0x44
 8001d92:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8001d96:	2bff      	cmp	r3, #255	; 0xff
 8001d98:	d101      	bne.n	8001d9e <xQueueSemaphoreTake+0xa2>
 8001d9a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8001d9e:	f000 fe5b 	bl	8002a58 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8001da2:	a901      	add	r1, sp, #4
 8001da4:	a802      	add	r0, sp, #8
 8001da6:	f000 fb99 	bl	80024dc <xTaskCheckForTimeOut>
 8001daa:	2800      	cmp	r0, #0
 8001dac:	d14a      	bne.n	8001e44 <xQueueSemaphoreTake+0x148>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8001dae:	4620      	mov	r0, r4
 8001db0:	f7ff fd90 	bl	80018d4 <prvIsQueueEmpty>
 8001db4:	2800      	cmp	r0, #0
 8001db6:	d03f      	beq.n	8001e38 <xQueueSemaphoreTake+0x13c>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8001db8:	6823      	ldr	r3, [r4, #0]
 8001dba:	b93b      	cbnz	r3, 8001dcc <xQueueSemaphoreTake+0xd0>
						taskENTER_CRITICAL();
 8001dbc:	f000 fe2a 	bl	8002a14 <vPortEnterCritical>
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8001dc0:	68a0      	ldr	r0, [r4, #8]
 8001dc2:	f000 fbdd 	bl	8002580 <xTaskPriorityInherit>
 8001dc6:	4605      	mov	r5, r0
						taskEXIT_CRITICAL();
 8001dc8:	f000 fe46 	bl	8002a58 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8001dcc:	9901      	ldr	r1, [sp, #4]
 8001dce:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8001dd2:	f000 fb25 	bl	8002420 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8001dd6:	4620      	mov	r0, r4
 8001dd8:	f7ff fdcf 	bl	800197a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8001ddc:	f000 fa84 	bl	80022e8 <xTaskResumeAll>
 8001de0:	b938      	cbnz	r0, 8001df2 <xQueueSemaphoreTake+0xf6>
					portYIELD_WITHIN_API();
 8001de2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8001de6:	f8c8 3000 	str.w	r3, [r8]
 8001dea:	f3bf 8f4f 	dsb	sy
 8001dee:	f3bf 8f6f 	isb	sy
 8001df2:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
 8001df4:	f000 fe0e 	bl	8002a14 <vPortEnterCritical>
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8001df8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d0aa      	beq.n	8001d54 <xQueueSemaphoreTake+0x58>
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8001dfe:	3b01      	subs	r3, #1
 8001e00:	63a3      	str	r3, [r4, #56]	; 0x38
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8001e02:	6823      	ldr	r3, [r4, #0]
 8001e04:	b913      	cbnz	r3, 8001e0c <xQueueSemaphoreTake+0x110>
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8001e06:	f000 fcb3 	bl	8002770 <pvTaskIncrementMutexHeldCount>
 8001e0a:	60a0      	str	r0, [r4, #8]
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001e0c:	6923      	ldr	r3, [r4, #16]
 8001e0e:	b163      	cbz	r3, 8001e2a <xQueueSemaphoreTake+0x12e>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001e10:	f104 0010 	add.w	r0, r4, #16
 8001e14:	f000 fb1e 	bl	8002454 <xTaskRemoveFromEventList>
 8001e18:	b138      	cbz	r0, 8001e2a <xQueueSemaphoreTake+0x12e>
						queueYIELD_IF_USING_PREEMPTION();
 8001e1a:	4b18      	ldr	r3, [pc, #96]	; (8001e7c <xQueueSemaphoreTake+0x180>)
 8001e1c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001e20:	601a      	str	r2, [r3, #0]
 8001e22:	f3bf 8f4f 	dsb	sy
 8001e26:	f3bf 8f6f 	isb	sy
				return pdPASS;
 8001e2a:	2501      	movs	r5, #1
				taskEXIT_CRITICAL();
 8001e2c:	f000 fe14 	bl	8002a58 <vPortExitCritical>
}
 8001e30:	4628      	mov	r0, r5
 8001e32:	b004      	add	sp, #16
 8001e34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				prvUnlockQueue( pxQueue );
 8001e38:	4620      	mov	r0, r4
 8001e3a:	f7ff fd9e 	bl	800197a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8001e3e:	f000 fa53 	bl	80022e8 <xTaskResumeAll>
 8001e42:	e7d6      	b.n	8001df2 <xQueueSemaphoreTake+0xf6>
			prvUnlockQueue( pxQueue );
 8001e44:	4620      	mov	r0, r4
 8001e46:	f7ff fd98 	bl	800197a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8001e4a:	f000 fa4d 	bl	80022e8 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8001e4e:	4620      	mov	r0, r4
 8001e50:	f7ff fd40 	bl	80018d4 <prvIsQueueEmpty>
 8001e54:	2800      	cmp	r0, #0
 8001e56:	d0cc      	beq.n	8001df2 <xQueueSemaphoreTake+0xf6>
					if( xInheritanceOccurred != pdFALSE )
 8001e58:	2d00      	cmp	r5, #0
 8001e5a:	d0e9      	beq.n	8001e30 <xQueueSemaphoreTake+0x134>
						taskENTER_CRITICAL();
 8001e5c:	f000 fdda 	bl	8002a14 <vPortEnterCritical>
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8001e60:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8001e62:	b119      	cbz	r1, 8001e6c <xQueueSemaphoreTake+0x170>
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8001e64:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001e66:	6819      	ldr	r1, [r3, #0]
 8001e68:	f1c1 0107 	rsb	r1, r1, #7
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8001e6c:	68a0      	ldr	r0, [r4, #8]
				return errQUEUE_EMPTY;
 8001e6e:	2500      	movs	r5, #0
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8001e70:	f000 fc24 	bl	80026bc <vTaskPriorityDisinheritAfterTimeout>
						taskEXIT_CRITICAL();
 8001e74:	f000 fdf0 	bl	8002a58 <vPortExitCritical>
 8001e78:	e7da      	b.n	8001e30 <xQueueSemaphoreTake+0x134>
 8001e7a:	bf00      	nop
 8001e7c:	e000ed04 	.word	0xe000ed04

08001e80 <xQueueReceiveFromISR>:
{
 8001e80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001e84:	4689      	mov	r9, r1
 8001e86:	4690      	mov	r8, r2
	configASSERT( pxQueue );
 8001e88:	4605      	mov	r5, r0
 8001e8a:	b940      	cbnz	r0, 8001e9e <xQueueReceiveFromISR+0x1e>
 8001e8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001e90:	f383 8811 	msr	BASEPRI, r3
 8001e94:	f3bf 8f6f 	isb	sy
 8001e98:	f3bf 8f4f 	dsb	sy
 8001e9c:	e7fe      	b.n	8001e9c <xQueueReceiveFromISR+0x1c>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8001e9e:	b951      	cbnz	r1, 8001eb6 <xQueueReceiveFromISR+0x36>
 8001ea0:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8001ea2:	b143      	cbz	r3, 8001eb6 <xQueueReceiveFromISR+0x36>
 8001ea4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001ea8:	f383 8811 	msr	BASEPRI, r3
 8001eac:	f3bf 8f6f 	isb	sy
 8001eb0:	f3bf 8f4f 	dsb	sy
 8001eb4:	e7fe      	b.n	8001eb4 <xQueueReceiveFromISR+0x34>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8001eb6:	f000 fec7 	bl	8002c48 <vPortValidateInterruptPriority>
	__asm volatile
 8001eba:	f3ef 8711 	mrs	r7, BASEPRI
 8001ebe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001ec2:	f383 8811 	msr	BASEPRI, r3
 8001ec6:	f3bf 8f6f 	isb	sy
 8001eca:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8001ece:	6bac      	ldr	r4, [r5, #56]	; 0x38
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8001ed0:	b31c      	cbz	r4, 8001f1a <xQueueReceiveFromISR+0x9a>
			const int8_t cRxLock = pxQueue->cRxLock;
 8001ed2:	f895 6044 	ldrb.w	r6, [r5, #68]	; 0x44
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8001ed6:	4649      	mov	r1, r9
 8001ed8:	4628      	mov	r0, r5
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8001eda:	3c01      	subs	r4, #1
			const int8_t cRxLock = pxQueue->cRxLock;
 8001edc:	b276      	sxtb	r6, r6
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8001ede:	f7ff fd37 	bl	8001950 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8001ee2:	63ac      	str	r4, [r5, #56]	; 0x38
			if( cRxLock == queueUNLOCKED )
 8001ee4:	1c73      	adds	r3, r6, #1
 8001ee6:	d113      	bne.n	8001f10 <xQueueReceiveFromISR+0x90>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001ee8:	692b      	ldr	r3, [r5, #16]
 8001eea:	b90b      	cbnz	r3, 8001ef0 <xQueueReceiveFromISR+0x70>
			xReturn = pdPASS;
 8001eec:	2001      	movs	r0, #1
 8001eee:	e00b      	b.n	8001f08 <xQueueReceiveFromISR+0x88>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001ef0:	f105 0010 	add.w	r0, r5, #16
 8001ef4:	f000 faae 	bl	8002454 <xTaskRemoveFromEventList>
 8001ef8:	2800      	cmp	r0, #0
 8001efa:	d0f7      	beq.n	8001eec <xQueueReceiveFromISR+0x6c>
						if( pxHigherPriorityTaskWoken != NULL )
 8001efc:	f1b8 0f00 	cmp.w	r8, #0
 8001f00:	d0f4      	beq.n	8001eec <xQueueReceiveFromISR+0x6c>
							*pxHigherPriorityTaskWoken = pdTRUE;
 8001f02:	2001      	movs	r0, #1
 8001f04:	f8c8 0000 	str.w	r0, [r8]
	__asm volatile
 8001f08:	f387 8811 	msr	BASEPRI, r7
}
 8001f0c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8001f10:	3601      	adds	r6, #1
 8001f12:	b276      	sxtb	r6, r6
 8001f14:	f885 6044 	strb.w	r6, [r5, #68]	; 0x44
 8001f18:	e7e8      	b.n	8001eec <xQueueReceiveFromISR+0x6c>
			xReturn = pdFAIL;
 8001f1a:	4620      	mov	r0, r4
 8001f1c:	e7f4      	b.n	8001f08 <xQueueReceiveFromISR+0x88>
	...

08001f20 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001f20:	4b06      	ldr	r3, [pc, #24]	; (8001f3c <prvResetNextTaskUnblockTime+0x1c>)
 8001f22:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001f24:	6812      	ldr	r2, [r2, #0]
 8001f26:	b91a      	cbnz	r2, 8001f30 <prvResetNextTaskUnblockTime+0x10>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8001f28:	f04f 32ff 	mov.w	r2, #4294967295
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8001f2c:	62da      	str	r2, [r3, #44]	; 0x2c
	}
}
 8001f2e:	4770      	bx	lr
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001f30:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001f32:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8001f34:	68d2      	ldr	r2, [r2, #12]
 8001f36:	6852      	ldr	r2, [r2, #4]
 8001f38:	e7f8      	b.n	8001f2c <prvResetNextTaskUnblockTime+0xc>
 8001f3a:	bf00      	nop
 8001f3c:	2000007c 	.word	0x2000007c

08001f40 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8001f40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8001f42:	4c18      	ldr	r4, [pc, #96]	; (8001fa4 <prvAddCurrentTaskToDelayedList+0x64>)
{
 8001f44:	4606      	mov	r6, r0
 8001f46:	460f      	mov	r7, r1
const TickType_t xConstTickCount = xTickCount;
 8001f48:	6b25      	ldr	r5, [r4, #48]	; 0x30
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8001f4a:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8001f4c:	3004      	adds	r0, #4
 8001f4e:	f7ff fcb0 	bl	80018b2 <uxListRemove>
 8001f52:	b938      	cbnz	r0, 8001f64 <prvAddCurrentTaskToDelayedList+0x24>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8001f54:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8001f56:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001f58:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001f5a:	2201      	movs	r2, #1
 8001f5c:	408a      	lsls	r2, r1
 8001f5e:	ea23 0302 	bic.w	r3, r3, r2
 8001f62:	63a3      	str	r3, [r4, #56]	; 0x38
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8001f64:	1c73      	adds	r3, r6, #1
 8001f66:	d107      	bne.n	8001f78 <prvAddCurrentTaskToDelayedList+0x38>
 8001f68:	b137      	cbz	r7, 8001f78 <prvAddCurrentTaskToDelayedList+0x38>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001f6a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001f6c:	480d      	ldr	r0, [pc, #52]	; (8001fa4 <prvAddCurrentTaskToDelayedList+0x64>)
 8001f6e:	3104      	adds	r1, #4

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8001f70:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001f74:	f7ff bc7a 	b.w	800186c <vListInsertEnd>
 8001f78:	19ad      	adds	r5, r5, r6
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8001f7a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001f7c:	605d      	str	r5, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8001f7e:	d306      	bcc.n	8001f8e <prvAddCurrentTaskToDelayedList+0x4e>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001f80:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8001f82:	6b61      	ldr	r1, [r4, #52]	; 0x34
}
 8001f84:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001f88:	3104      	adds	r1, #4
 8001f8a:	f7ff bc7b 	b.w	8001884 <vListInsert>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001f8e:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8001f90:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001f92:	3104      	adds	r1, #4
 8001f94:	f7ff fc76 	bl	8001884 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8001f98:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001f9a:	42ab      	cmp	r3, r5
 8001f9c:	d900      	bls.n	8001fa0 <prvAddCurrentTaskToDelayedList+0x60>
					xNextTaskUnblockTime = xTimeToWake;
 8001f9e:	62e5      	str	r5, [r4, #44]	; 0x2c
}
 8001fa0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001fa2:	bf00      	nop
 8001fa4:	2000007c 	.word	0x2000007c

08001fa8 <prvIdleTask>:
{
 8001fa8:	b580      	push	{r7, lr}
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8001faa:	4c12      	ldr	r4, [pc, #72]	; (8001ff4 <prvIdleTask+0x4c>)
				taskYIELD();
 8001fac:	f04f 5780 	mov.w	r7, #268435456	; 0x10000000
 8001fb0:	4e11      	ldr	r6, [pc, #68]	; (8001ff8 <prvIdleTask+0x50>)
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8001fb2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8001fb4:	b943      	cbnz	r3, 8001fc8 <prvIdleTask+0x20>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8001fb6:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8001fb8:	2b01      	cmp	r3, #1
 8001fba:	d9fa      	bls.n	8001fb2 <prvIdleTask+0xa>
				taskYIELD();
 8001fbc:	6037      	str	r7, [r6, #0]
 8001fbe:	f3bf 8f4f 	dsb	sy
 8001fc2:	f3bf 8f6f 	isb	sy
 8001fc6:	e7f4      	b.n	8001fb2 <prvIdleTask+0xa>
			taskENTER_CRITICAL();
 8001fc8:	f000 fd24 	bl	8002a14 <vPortEnterCritical>
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001fcc:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8001fce:	68dd      	ldr	r5, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001fd0:	1d28      	adds	r0, r5, #4
 8001fd2:	f7ff fc6e 	bl	80018b2 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8001fd6:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8001fd8:	3b01      	subs	r3, #1
 8001fda:	6563      	str	r3, [r4, #84]	; 0x54
				--uxDeletedTasksWaitingCleanUp;
 8001fdc:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8001fde:	3b01      	subs	r3, #1
 8001fe0:	65a3      	str	r3, [r4, #88]	; 0x58
			taskEXIT_CRITICAL();
 8001fe2:	f000 fd39 	bl	8002a58 <vPortExitCritical>
			vPortFree( pxTCB->pxStack );
 8001fe6:	6b28      	ldr	r0, [r5, #48]	; 0x30
 8001fe8:	f000 fc76 	bl	80028d8 <vPortFree>
			vPortFree( pxTCB );
 8001fec:	4628      	mov	r0, r5
 8001fee:	f000 fc73 	bl	80028d8 <vPortFree>
 8001ff2:	e7de      	b.n	8001fb2 <prvIdleTask+0xa>
 8001ff4:	2000007c 	.word	0x2000007c
 8001ff8:	e000ed04 	.word	0xe000ed04

08001ffc <xTaskCreate>:
	{
 8001ffc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8002000:	0095      	lsls	r5, r2, #2
	{
 8002002:	4680      	mov	r8, r0
 8002004:	460f      	mov	r7, r1
 8002006:	4699      	mov	r9, r3
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8002008:	4628      	mov	r0, r5
	{
 800200a:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800200c:	f000 fbde 	bl	80027cc <pvPortMalloc>
			if( pxStack != NULL )
 8002010:	4682      	mov	sl, r0
 8002012:	b1b8      	cbz	r0, 8002044 <xTaskCreate+0x48>
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8002014:	205c      	movs	r0, #92	; 0x5c
 8002016:	f000 fbd9 	bl	80027cc <pvPortMalloc>
				if( pxNewTCB != NULL )
 800201a:	4604      	mov	r4, r0
 800201c:	b178      	cbz	r0, 800203e <xTaskCreate+0x42>
					pxNewTCB->pxStack = pxStack;
 800201e:	f8c0 a030 	str.w	sl, [r0, #48]	; 0x30
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8002022:	462a      	mov	r2, r5
 8002024:	4650      	mov	r0, sl
 8002026:	21a5      	movs	r1, #165	; 0xa5
 8002028:	f000 fe67 	bl	8002cfa <memset>
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800202c:	3d04      	subs	r5, #4
 800202e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002030:	441d      	add	r5, r3
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8002032:	f025 0a07 	bic.w	sl, r5, #7
	if( pcName != NULL )
 8002036:	b947      	cbnz	r7, 800204a <xTaskCreate+0x4e>
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8002038:	f884 7034 	strb.w	r7, [r4, #52]	; 0x34
 800203c:	e014      	b.n	8002068 <xTaskCreate+0x6c>
					vPortFree( pxStack );
 800203e:	4650      	mov	r0, sl
 8002040:	f000 fc4a 	bl	80028d8 <vPortFree>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002044:	f04f 36ff 	mov.w	r6, #4294967295
 8002048:	e086      	b.n	8002158 <xTaskCreate+0x15c>
 800204a:	1e7b      	subs	r3, r7, #1
 800204c:	f104 0234 	add.w	r2, r4, #52	; 0x34
 8002050:	370f      	adds	r7, #15
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002052:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 8002056:	f802 1b01 	strb.w	r1, [r2], #1
			if( pcName[ x ] == ( char ) 0x00 )
 800205a:	7819      	ldrb	r1, [r3, #0]
 800205c:	b109      	cbz	r1, 8002062 <xTaskCreate+0x66>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800205e:	42bb      	cmp	r3, r7
 8002060:	d1f7      	bne.n	8002052 <xTaskCreate+0x56>
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002062:	2300      	movs	r3, #0
 8002064:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002068:	9d0a      	ldr	r5, [sp, #40]	; 0x28
		pxNewTCB->uxMutexesHeld = 0;
 800206a:	f04f 0b00 	mov.w	fp, #0
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800206e:	1d27      	adds	r7, r4, #4
 8002070:	2d06      	cmp	r5, #6
		pxNewTCB->uxMutexesHeld = 0;
 8002072:	f8c4 b050 	str.w	fp, [r4, #80]	; 0x50
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002076:	4638      	mov	r0, r7
 8002078:	bf28      	it	cs
 800207a:	2506      	movcs	r5, #6
	pxNewTCB->uxPriority = uxPriority;
 800207c:	62e5      	str	r5, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 800207e:	64e5      	str	r5, [r4, #76]	; 0x4c
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002080:	f1c5 0507 	rsb	r5, r5, #7
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002084:	f7ff fbef 	bl	8001866 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002088:	f104 0018 	add.w	r0, r4, #24
 800208c:	f7ff fbeb 	bl	8001866 <vListInitialiseItem>
		pxNewTCB->ulNotifiedValue = 0;
 8002090:	f8c4 b054 	str.w	fp, [r4, #84]	; 0x54
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002094:	6124      	str	r4, [r4, #16]
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002096:	464a      	mov	r2, r9
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002098:	61a5      	str	r5, [r4, #24]
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800209a:	4641      	mov	r1, r8
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800209c:	6264      	str	r4, [r4, #36]	; 0x24
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800209e:	4650      	mov	r0, sl
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80020a0:	f884 b058 	strb.w	fp, [r4, #88]	; 0x58
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80020a4:	f000 fc8e 	bl	80029c4 <pxPortInitialiseStack>
 80020a8:	6020      	str	r0, [r4, #0]
	if( pxCreatedTask != NULL )
 80020aa:	b106      	cbz	r6, 80020ae <xTaskCreate+0xb2>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80020ac:	6034      	str	r4, [r6, #0]
		uxCurrentNumberOfTasks++;
 80020ae:	4d31      	ldr	r5, [pc, #196]	; (8002174 <xTaskCreate+0x178>)
	taskENTER_CRITICAL();
 80020b0:	f000 fcb0 	bl	8002a14 <vPortEnterCritical>
		uxCurrentNumberOfTasks++;
 80020b4:	6d6b      	ldr	r3, [r5, #84]	; 0x54
 80020b6:	f105 085c 	add.w	r8, r5, #92	; 0x5c
 80020ba:	3301      	adds	r3, #1
 80020bc:	656b      	str	r3, [r5, #84]	; 0x54
		if( pxCurrentTCB == NULL )
 80020be:	6b6e      	ldr	r6, [r5, #52]	; 0x34
 80020c0:	2e00      	cmp	r6, #0
 80020c2:	d14c      	bne.n	800215e <xTaskCreate+0x162>
			pxCurrentTCB = pxNewTCB;
 80020c4:	636c      	str	r4, [r5, #52]	; 0x34
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80020c6:	6d6b      	ldr	r3, [r5, #84]	; 0x54
 80020c8:	2b01      	cmp	r3, #1
 80020ca:	d120      	bne.n	800210e <xTaskCreate+0x112>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80020cc:	f04f 0914 	mov.w	r9, #20
 80020d0:	fb09 8006 	mla	r0, r9, r6, r8
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80020d4:	3601      	adds	r6, #1
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80020d6:	f7ff fbbb 	bl	8001850 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80020da:	2e07      	cmp	r6, #7
 80020dc:	d1f8      	bne.n	80020d0 <xTaskCreate+0xd4>
	vListInitialise( &xDelayedTaskList1 );
 80020de:	4e26      	ldr	r6, [pc, #152]	; (8002178 <xTaskCreate+0x17c>)
	vListInitialise( &xDelayedTaskList2 );
 80020e0:	f106 0914 	add.w	r9, r6, #20
	vListInitialise( &xDelayedTaskList1 );
 80020e4:	4630      	mov	r0, r6
 80020e6:	f7ff fbb3 	bl	8001850 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80020ea:	4648      	mov	r0, r9
 80020ec:	f7ff fbb0 	bl	8001850 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80020f0:	f1a6 00d4 	sub.w	r0, r6, #212	; 0xd4
 80020f4:	f7ff fbac 	bl	8001850 <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
 80020f8:	f1a6 00a8 	sub.w	r0, r6, #168	; 0xa8
 80020fc:	f7ff fba8 	bl	8001850 <vListInitialise>
		vListInitialise( &xSuspendedTaskList );
 8002100:	f1a6 00e8 	sub.w	r0, r6, #232	; 0xe8
 8002104:	f7ff fba4 	bl	8001850 <vListInitialise>
	pxDelayedTaskList = &xDelayedTaskList1;
 8002108:	62ae      	str	r6, [r5, #40]	; 0x28
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800210a:	f8c5 903c 	str.w	r9, [r5, #60]	; 0x3c
		uxTaskNumber++;
 800210e:	f8d5 3114 	ldr.w	r3, [r5, #276]	; 0x114
		prvAddTaskToReadyList( pxNewTCB );
 8002112:	2601      	movs	r6, #1
 8002114:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8002116:	2014      	movs	r0, #20
		uxTaskNumber++;
 8002118:	3301      	adds	r3, #1
		prvAddTaskToReadyList( pxNewTCB );
 800211a:	6ba9      	ldr	r1, [r5, #56]	; 0x38
 800211c:	fb00 8002 	mla	r0, r0, r2, r8
		uxTaskNumber++;
 8002120:	f8c5 3114 	str.w	r3, [r5, #276]	; 0x114
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8002124:	6463      	str	r3, [r4, #68]	; 0x44
		prvAddTaskToReadyList( pxNewTCB );
 8002126:	fa06 f302 	lsl.w	r3, r6, r2
 800212a:	430b      	orrs	r3, r1
 800212c:	4639      	mov	r1, r7
 800212e:	63ab      	str	r3, [r5, #56]	; 0x38
 8002130:	f7ff fb9c 	bl	800186c <vListInsertEnd>
	taskEXIT_CRITICAL();
 8002134:	f000 fc90 	bl	8002a58 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 8002138:	f8d5 3110 	ldr.w	r3, [r5, #272]	; 0x110
 800213c:	b163      	cbz	r3, 8002158 <xTaskCreate+0x15c>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800213e:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8002140:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002142:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002144:	429a      	cmp	r2, r3
 8002146:	d207      	bcs.n	8002158 <xTaskCreate+0x15c>
			taskYIELD_IF_USING_PREEMPTION();
 8002148:	4b0c      	ldr	r3, [pc, #48]	; (800217c <xTaskCreate+0x180>)
 800214a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800214e:	601a      	str	r2, [r3, #0]
 8002150:	f3bf 8f4f 	dsb	sy
 8002154:	f3bf 8f6f 	isb	sy
	}
 8002158:	4630      	mov	r0, r6
 800215a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if( xSchedulerRunning == pdFALSE )
 800215e:	f8d5 3110 	ldr.w	r3, [r5, #272]	; 0x110
 8002162:	2b00      	cmp	r3, #0
 8002164:	d1d3      	bne.n	800210e <xTaskCreate+0x112>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002166:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8002168:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800216a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800216c:	429a      	cmp	r2, r3
 800216e:	d3ce      	bcc.n	800210e <xTaskCreate+0x112>
					pxCurrentTCB = pxNewTCB;
 8002170:	636c      	str	r4, [r5, #52]	; 0x34
 8002172:	e7cc      	b.n	800210e <xTaskCreate+0x112>
 8002174:	2000007c 	.word	0x2000007c
 8002178:	20000164 	.word	0x20000164
 800217c:	e000ed04 	.word	0xe000ed04

08002180 <vTaskStartScheduler>:
{
 8002180:	b537      	push	{r0, r1, r2, r4, r5, lr}
		xReturn = xTaskCreate(	prvIdleTask,
 8002182:	4c17      	ldr	r4, [pc, #92]	; (80021e0 <vTaskStartScheduler+0x60>)
 8002184:	2500      	movs	r5, #0
 8002186:	2280      	movs	r2, #128	; 0x80
 8002188:	4916      	ldr	r1, [pc, #88]	; (80021e4 <vTaskStartScheduler+0x64>)
 800218a:	f504 738e 	add.w	r3, r4, #284	; 0x11c
 800218e:	9500      	str	r5, [sp, #0]
 8002190:	4815      	ldr	r0, [pc, #84]	; (80021e8 <vTaskStartScheduler+0x68>)
 8002192:	9301      	str	r3, [sp, #4]
 8002194:	462b      	mov	r3, r5
 8002196:	f7ff ff31 	bl	8001ffc <xTaskCreate>
	if( xReturn == pdPASS )
 800219a:	2801      	cmp	r0, #1
 800219c:	d112      	bne.n	80021c4 <vTaskStartScheduler+0x44>
	__asm volatile
 800219e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80021a2:	f383 8811 	msr	BASEPRI, r3
 80021a6:	f3bf 8f6f 	isb	sy
 80021aa:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
 80021ae:	f04f 33ff 	mov.w	r3, #4294967295
 80021b2:	62e3      	str	r3, [r4, #44]	; 0x2c
		xSchedulerRunning = pdTRUE;
 80021b4:	f8c4 0110 	str.w	r0, [r4, #272]	; 0x110
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80021b8:	6325      	str	r5, [r4, #48]	; 0x30
}
 80021ba:	b003      	add	sp, #12
 80021bc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		if( xPortStartScheduler() != pdFALSE )
 80021c0:	f000 bcc0 	b.w	8002b44 <xPortStartScheduler>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80021c4:	3001      	adds	r0, #1
 80021c6:	d108      	bne.n	80021da <vTaskStartScheduler+0x5a>
 80021c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80021cc:	f383 8811 	msr	BASEPRI, r3
 80021d0:	f3bf 8f6f 	isb	sy
 80021d4:	f3bf 8f4f 	dsb	sy
 80021d8:	e7fe      	b.n	80021d8 <vTaskStartScheduler+0x58>
}
 80021da:	b003      	add	sp, #12
 80021dc:	bd30      	pop	{r4, r5, pc}
 80021de:	bf00      	nop
 80021e0:	2000007c 	.word	0x2000007c
 80021e4:	08002d67 	.word	0x08002d67
 80021e8:	08001fa9 	.word	0x08001fa9

080021ec <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 80021ec:	4a03      	ldr	r2, [pc, #12]	; (80021fc <vTaskSuspendAll+0x10>)
 80021ee:	f8d2 3118 	ldr.w	r3, [r2, #280]	; 0x118
 80021f2:	3301      	adds	r3, #1
 80021f4:	f8c2 3118 	str.w	r3, [r2, #280]	; 0x118
}
 80021f8:	4770      	bx	lr
 80021fa:	bf00      	nop
 80021fc:	2000007c 	.word	0x2000007c

08002200 <xTaskIncrementTick>:
{
 8002200:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002204:	4b36      	ldr	r3, [pc, #216]	; (80022e0 <xTaskIncrementTick+0xe0>)
 8002206:	f8d3 2118 	ldr.w	r2, [r3, #280]	; 0x118
 800220a:	461c      	mov	r4, r3
 800220c:	2a00      	cmp	r2, #0
 800220e:	d15f      	bne.n	80022d0 <xTaskIncrementTick+0xd0>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002210:	6b1f      	ldr	r7, [r3, #48]	; 0x30
 8002212:	3701      	adds	r7, #1
		xTickCount = xConstTickCount;
 8002214:	631f      	str	r7, [r3, #48]	; 0x30
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8002216:	b9b7      	cbnz	r7, 8002246 <xTaskIncrementTick+0x46>
			taskSWITCH_DELAYED_LISTS();
 8002218:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	b143      	cbz	r3, 8002230 <xTaskIncrementTick+0x30>
 800221e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002222:	f383 8811 	msr	BASEPRI, r3
 8002226:	f3bf 8f6f 	isb	sy
 800222a:	f3bf 8f4f 	dsb	sy
 800222e:	e7fe      	b.n	800222e <xTaskIncrementTick+0x2e>
 8002230:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002232:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8002234:	62a2      	str	r2, [r4, #40]	; 0x28
 8002236:	63e3      	str	r3, [r4, #60]	; 0x3c
 8002238:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 800223c:	3301      	adds	r3, #1
 800223e:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8002242:	f7ff fe6d 	bl	8001f20 <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 8002246:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
BaseType_t xSwitchRequired = pdFALSE;
 8002248:	2500      	movs	r5, #0
		if( xConstTickCount >= xNextTaskUnblockTime )
 800224a:	42bb      	cmp	r3, r7
 800224c:	d910      	bls.n	8002270 <xTaskIncrementTick+0x70>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800224e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002250:	2214      	movs	r2, #20
 8002252:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002254:	fb02 4303 	mla	r3, r2, r3, r4
 8002258:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
				xSwitchRequired = pdTRUE;
 800225a:	2b02      	cmp	r3, #2
 800225c:	bf28      	it	cs
 800225e:	2501      	movcs	r5, #1
		if( xYieldPending != pdFALSE )
 8002260:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
			xSwitchRequired = pdTRUE;
 8002264:	2b00      	cmp	r3, #0
}
 8002266:	bf0c      	ite	eq
 8002268:	4628      	moveq	r0, r5
 800226a:	2001      	movne	r0, #1
 800226c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
					prvAddTaskToReadyList( pxTCB );
 8002270:	f04f 0b01 	mov.w	fp, #1
 8002274:	f8df 906c 	ldr.w	r9, [pc, #108]	; 80022e4 <xTaskIncrementTick+0xe4>
 8002278:	f04f 0a14 	mov.w	sl, #20
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800227c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	b91b      	cbnz	r3, 800228a <xTaskIncrementTick+0x8a>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002282:	f04f 33ff 	mov.w	r3, #4294967295
						xNextTaskUnblockTime = xItemValue;
 8002286:	62e3      	str	r3, [r4, #44]	; 0x2c
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8002288:	e7e1      	b.n	800224e <xTaskIncrementTick+0x4e>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800228a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800228c:	68db      	ldr	r3, [r3, #12]
 800228e:	68de      	ldr	r6, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8002290:	6873      	ldr	r3, [r6, #4]
					if( xConstTickCount < xItemValue )
 8002292:	429f      	cmp	r7, r3
 8002294:	d3f7      	bcc.n	8002286 <xTaskIncrementTick+0x86>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002296:	f106 0804 	add.w	r8, r6, #4
 800229a:	4640      	mov	r0, r8
 800229c:	f7ff fb09 	bl	80018b2 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80022a0:	6ab3      	ldr	r3, [r6, #40]	; 0x28
 80022a2:	b11b      	cbz	r3, 80022ac <xTaskIncrementTick+0xac>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80022a4:	f106 0018 	add.w	r0, r6, #24
 80022a8:	f7ff fb03 	bl	80018b2 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80022ac:	6af0      	ldr	r0, [r6, #44]	; 0x2c
 80022ae:	4641      	mov	r1, r8
 80022b0:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80022b2:	fa0b f300 	lsl.w	r3, fp, r0
 80022b6:	fb0a 9000 	mla	r0, sl, r0, r9
 80022ba:	4313      	orrs	r3, r2
 80022bc:	63a3      	str	r3, [r4, #56]	; 0x38
 80022be:	f7ff fad5 	bl	800186c <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80022c2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80022c4:	6af2      	ldr	r2, [r6, #44]	; 0x2c
 80022c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
							xSwitchRequired = pdTRUE;
 80022c8:	429a      	cmp	r2, r3
 80022ca:	bf28      	it	cs
 80022cc:	2501      	movcs	r5, #1
 80022ce:	e7d5      	b.n	800227c <xTaskIncrementTick+0x7c>
		++uxPendedTicks;
 80022d0:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
BaseType_t xSwitchRequired = pdFALSE;
 80022d4:	2500      	movs	r5, #0
		++uxPendedTicks;
 80022d6:	3301      	adds	r3, #1
 80022d8:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 80022dc:	e7c0      	b.n	8002260 <xTaskIncrementTick+0x60>
 80022de:	bf00      	nop
 80022e0:	2000007c 	.word	0x2000007c
 80022e4:	200000d8 	.word	0x200000d8

080022e8 <xTaskResumeAll>:
{
 80022e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( uxSchedulerSuspended );
 80022ec:	4c31      	ldr	r4, [pc, #196]	; (80023b4 <xTaskResumeAll+0xcc>)
 80022ee:	f8d4 3118 	ldr.w	r3, [r4, #280]	; 0x118
 80022f2:	b943      	cbnz	r3, 8002306 <xTaskResumeAll+0x1e>
 80022f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80022f8:	f383 8811 	msr	BASEPRI, r3
 80022fc:	f3bf 8f6f 	isb	sy
 8002300:	f3bf 8f4f 	dsb	sy
 8002304:	e7fe      	b.n	8002304 <xTaskResumeAll+0x1c>
	taskENTER_CRITICAL();
 8002306:	f000 fb85 	bl	8002a14 <vPortEnterCritical>
		--uxSchedulerSuspended;
 800230a:	f8d4 3118 	ldr.w	r3, [r4, #280]	; 0x118
 800230e:	3b01      	subs	r3, #1
 8002310:	f8c4 3118 	str.w	r3, [r4, #280]	; 0x118
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002314:	f8d4 5118 	ldr.w	r5, [r4, #280]	; 0x118
 8002318:	b12d      	cbz	r5, 8002326 <xTaskResumeAll+0x3e>
BaseType_t xAlreadyYielded = pdFALSE;
 800231a:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 800231c:	f000 fb9c 	bl	8002a58 <vPortExitCritical>
}
 8002320:	4620      	mov	r0, r4
 8002322:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002326:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002328:	2b00      	cmp	r3, #0
 800232a:	d0f6      	beq.n	800231a <xTaskResumeAll+0x32>
					prvAddTaskToReadyList( pxTCB );
 800232c:	2601      	movs	r6, #1
 800232e:	f104 075c 	add.w	r7, r4, #92	; 0x5c
 8002332:	f04f 0814 	mov.w	r8, #20
 8002336:	e01c      	b.n	8002372 <xTaskResumeAll+0x8a>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002338:	6a23      	ldr	r3, [r4, #32]
 800233a:	68dd      	ldr	r5, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800233c:	f105 0904 	add.w	r9, r5, #4
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002340:	f105 0018 	add.w	r0, r5, #24
 8002344:	f7ff fab5 	bl	80018b2 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002348:	4648      	mov	r0, r9
 800234a:	f7ff fab2 	bl	80018b2 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800234e:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 8002350:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8002352:	4649      	mov	r1, r9
 8002354:	fa06 f300 	lsl.w	r3, r6, r0
 8002358:	fb08 7000 	mla	r0, r8, r0, r7
 800235c:	4313      	orrs	r3, r2
 800235e:	63a3      	str	r3, [r4, #56]	; 0x38
 8002360:	f7ff fa84 	bl	800186c <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002364:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002366:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 8002368:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800236a:	429a      	cmp	r2, r3
 800236c:	d301      	bcc.n	8002372 <xTaskResumeAll+0x8a>
						xYieldPending = pdTRUE;
 800236e:	f8c4 6128 	str.w	r6, [r4, #296]	; 0x128
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002372:	6963      	ldr	r3, [r4, #20]
 8002374:	2b00      	cmp	r3, #0
 8002376:	d1df      	bne.n	8002338 <xTaskResumeAll+0x50>
				if( pxTCB != NULL )
 8002378:	b10d      	cbz	r5, 800237e <xTaskResumeAll+0x96>
					prvResetNextTaskUnblockTime();
 800237a:	f7ff fdd1 	bl	8001f20 <prvResetNextTaskUnblockTime>
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800237e:	f8d4 5124 	ldr.w	r5, [r4, #292]	; 0x124
					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8002382:	b14d      	cbz	r5, 8002398 <xTaskResumeAll+0xb0>
								xYieldPending = pdTRUE;
 8002384:	2601      	movs	r6, #1
							if( xTaskIncrementTick() != pdFALSE )
 8002386:	f7ff ff3b 	bl	8002200 <xTaskIncrementTick>
 800238a:	b108      	cbz	r0, 8002390 <xTaskResumeAll+0xa8>
								xYieldPending = pdTRUE;
 800238c:	f8c4 6128 	str.w	r6, [r4, #296]	; 0x128
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8002390:	3d01      	subs	r5, #1
 8002392:	d1f8      	bne.n	8002386 <xTaskResumeAll+0x9e>
						uxPendedTicks = 0;
 8002394:	f8c4 5124 	str.w	r5, [r4, #292]	; 0x124
				if( xYieldPending != pdFALSE )
 8002398:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
 800239c:	2b00      	cmp	r3, #0
 800239e:	d0bc      	beq.n	800231a <xTaskResumeAll+0x32>
					taskYIELD_IF_USING_PREEMPTION();
 80023a0:	4b05      	ldr	r3, [pc, #20]	; (80023b8 <xTaskResumeAll+0xd0>)
 80023a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80023a6:	601a      	str	r2, [r3, #0]
 80023a8:	f3bf 8f4f 	dsb	sy
 80023ac:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 80023b0:	2401      	movs	r4, #1
 80023b2:	e7b3      	b.n	800231c <xTaskResumeAll+0x34>
 80023b4:	2000007c 	.word	0x2000007c
 80023b8:	e000ed04 	.word	0xe000ed04

080023bc <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80023bc:	4b17      	ldr	r3, [pc, #92]	; (800241c <vTaskSwitchContext+0x60>)
 80023be:	f8d3 2118 	ldr.w	r2, [r3, #280]	; 0x118
 80023c2:	4618      	mov	r0, r3
{
 80023c4:	b510      	push	{r4, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80023c6:	b11a      	cbz	r2, 80023d0 <vTaskSwitchContext+0x14>
		xYieldPending = pdTRUE;
 80023c8:	2201      	movs	r2, #1
 80023ca:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
}
 80023ce:	bd10      	pop	{r4, pc}
		xYieldPending = pdFALSE;
 80023d0:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80023d4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80023d6:	fab2 f282 	clz	r2, r2
 80023da:	b2d2      	uxtb	r2, r2
 80023dc:	2114      	movs	r1, #20
 80023de:	f1c2 021f 	rsb	r2, r2, #31
 80023e2:	4351      	muls	r1, r2
 80023e4:	440b      	add	r3, r1
 80023e6:	6ddc      	ldr	r4, [r3, #92]	; 0x5c
 80023e8:	b944      	cbnz	r4, 80023fc <vTaskSwitchContext+0x40>
	__asm volatile
 80023ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80023ee:	f383 8811 	msr	BASEPRI, r3
 80023f2:	f3bf 8f6f 	isb	sy
 80023f6:	f3bf 8f4f 	dsb	sy
 80023fa:	e7fe      	b.n	80023fa <vTaskSwitchContext+0x3e>
 80023fc:	6e1c      	ldr	r4, [r3, #96]	; 0x60
 80023fe:	4401      	add	r1, r0
 8002400:	6864      	ldr	r4, [r4, #4]
 8002402:	3164      	adds	r1, #100	; 0x64
 8002404:	428c      	cmp	r4, r1
 8002406:	661c      	str	r4, [r3, #96]	; 0x60
 8002408:	bf04      	itt	eq
 800240a:	6861      	ldreq	r1, [r4, #4]
 800240c:	6619      	streq	r1, [r3, #96]	; 0x60
 800240e:	2314      	movs	r3, #20
 8002410:	fb03 0202 	mla	r2, r3, r2, r0
 8002414:	6e13      	ldr	r3, [r2, #96]	; 0x60
 8002416:	68db      	ldr	r3, [r3, #12]
 8002418:	6343      	str	r3, [r0, #52]	; 0x34
}
 800241a:	e7d8      	b.n	80023ce <vTaskSwitchContext+0x12>
 800241c:	2000007c 	.word	0x2000007c

08002420 <vTaskPlaceOnEventList>:
{
 8002420:	b510      	push	{r4, lr}
 8002422:	460c      	mov	r4, r1
	configASSERT( pxEventList );
 8002424:	b940      	cbnz	r0, 8002438 <vTaskPlaceOnEventList+0x18>
 8002426:	f04f 0350 	mov.w	r3, #80	; 0x50
 800242a:	f383 8811 	msr	BASEPRI, r3
 800242e:	f3bf 8f6f 	isb	sy
 8002432:	f3bf 8f4f 	dsb	sy
 8002436:	e7fe      	b.n	8002436 <vTaskPlaceOnEventList+0x16>
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8002438:	4b05      	ldr	r3, [pc, #20]	; (8002450 <vTaskPlaceOnEventList+0x30>)
 800243a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800243c:	3118      	adds	r1, #24
 800243e:	f7ff fa21 	bl	8001884 <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8002442:	4620      	mov	r0, r4
 8002444:	2101      	movs	r1, #1
}
 8002446:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800244a:	f7ff bd79 	b.w	8001f40 <prvAddCurrentTaskToDelayedList>
 800244e:	bf00      	nop
 8002450:	2000007c 	.word	0x2000007c

08002454 <xTaskRemoveFromEventList>:
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002454:	68c3      	ldr	r3, [r0, #12]
{
 8002456:	b570      	push	{r4, r5, r6, lr}
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002458:	68dd      	ldr	r5, [r3, #12]
	configASSERT( pxUnblockedTCB );
 800245a:	b945      	cbnz	r5, 800246e <xTaskRemoveFromEventList+0x1a>
 800245c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002460:	f383 8811 	msr	BASEPRI, r3
 8002464:	f3bf 8f6f 	isb	sy
 8002468:	f3bf 8f4f 	dsb	sy
 800246c:	e7fe      	b.n	800246c <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800246e:	f105 0618 	add.w	r6, r5, #24
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002472:	4c14      	ldr	r4, [pc, #80]	; (80024c4 <xTaskRemoveFromEventList+0x70>)
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8002474:	4630      	mov	r0, r6
 8002476:	f7ff fa1c 	bl	80018b2 <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800247a:	f8d4 3118 	ldr.w	r3, [r4, #280]	; 0x118
 800247e:	b9d3      	cbnz	r3, 80024b6 <xTaskRemoveFromEventList+0x62>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8002480:	1d2e      	adds	r6, r5, #4
 8002482:	4630      	mov	r0, r6
 8002484:	f7ff fa15 	bl	80018b2 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8002488:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 800248a:	2301      	movs	r3, #1
 800248c:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800248e:	2014      	movs	r0, #20
 8002490:	4093      	lsls	r3, r2
 8002492:	430b      	orrs	r3, r1
 8002494:	4631      	mov	r1, r6
 8002496:	63a3      	str	r3, [r4, #56]	; 0x38
 8002498:	f104 035c 	add.w	r3, r4, #92	; 0x5c
 800249c:	fb00 3002 	mla	r0, r0, r2, r3
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80024a0:	f7ff f9e4 	bl	800186c <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80024a4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80024a6:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 80024a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024aa:	429a      	cmp	r2, r3
 80024ac:	d907      	bls.n	80024be <xTaskRemoveFromEventList+0x6a>
		xYieldPending = pdTRUE;
 80024ae:	2001      	movs	r0, #1
 80024b0:	f8c4 0128 	str.w	r0, [r4, #296]	; 0x128
}
 80024b4:	bd70      	pop	{r4, r5, r6, pc}
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80024b6:	4631      	mov	r1, r6
 80024b8:	f104 0014 	add.w	r0, r4, #20
 80024bc:	e7f0      	b.n	80024a0 <xTaskRemoveFromEventList+0x4c>
		xReturn = pdFALSE;
 80024be:	2000      	movs	r0, #0
	return xReturn;
 80024c0:	e7f8      	b.n	80024b4 <xTaskRemoveFromEventList+0x60>
 80024c2:	bf00      	nop
 80024c4:	2000007c 	.word	0x2000007c

080024c8 <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80024c8:	4b03      	ldr	r3, [pc, #12]	; (80024d8 <vTaskInternalSetTimeOutState+0x10>)
 80024ca:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
	pxTimeOut->xTimeOnEntering = xTickCount;
 80024ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80024d0:	6002      	str	r2, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80024d2:	6043      	str	r3, [r0, #4]
}
 80024d4:	4770      	bx	lr
 80024d6:	bf00      	nop
 80024d8:	2000007c 	.word	0x2000007c

080024dc <xTaskCheckForTimeOut>:
{
 80024dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80024de:	460c      	mov	r4, r1
	configASSERT( pxTimeOut );
 80024e0:	4605      	mov	r5, r0
 80024e2:	b940      	cbnz	r0, 80024f6 <xTaskCheckForTimeOut+0x1a>
 80024e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80024e8:	f383 8811 	msr	BASEPRI, r3
 80024ec:	f3bf 8f6f 	isb	sy
 80024f0:	f3bf 8f4f 	dsb	sy
 80024f4:	e7fe      	b.n	80024f4 <xTaskCheckForTimeOut+0x18>
	configASSERT( pxTicksToWait );
 80024f6:	b941      	cbnz	r1, 800250a <xTaskCheckForTimeOut+0x2e>
 80024f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80024fc:	f383 8811 	msr	BASEPRI, r3
 8002500:	f3bf 8f6f 	isb	sy
 8002504:	f3bf 8f4f 	dsb	sy
 8002508:	e7fe      	b.n	8002508 <xTaskCheckForTimeOut+0x2c>
	taskENTER_CRITICAL();
 800250a:	f000 fa83 	bl	8002a14 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 800250e:	4e0f      	ldr	r6, [pc, #60]	; (800254c <xTaskCheckForTimeOut+0x70>)
			if( *pxTicksToWait == portMAX_DELAY )
 8002510:	6823      	ldr	r3, [r4, #0]
		const TickType_t xConstTickCount = xTickCount;
 8002512:	6b31      	ldr	r1, [r6, #48]	; 0x30
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8002514:	6868      	ldr	r0, [r5, #4]
			if( *pxTicksToWait == portMAX_DELAY )
 8002516:	1c5f      	adds	r7, r3, #1
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8002518:	eba1 0200 	sub.w	r2, r1, r0
			if( *pxTicksToWait == portMAX_DELAY )
 800251c:	d00d      	beq.n	800253a <xTaskCheckForTimeOut+0x5e>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800251e:	f8d6 6120 	ldr.w	r6, [r6, #288]	; 0x120
 8002522:	682f      	ldr	r7, [r5, #0]
 8002524:	42b7      	cmp	r7, r6
 8002526:	d001      	beq.n	800252c <xTaskCheckForTimeOut+0x50>
 8002528:	4288      	cmp	r0, r1
 800252a:	d90d      	bls.n	8002548 <xTaskCheckForTimeOut+0x6c>
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800252c:	4293      	cmp	r3, r2
 800252e:	d909      	bls.n	8002544 <xTaskCheckForTimeOut+0x68>
			*pxTicksToWait -= xElapsedTime;
 8002530:	1a9b      	subs	r3, r3, r2
			vTaskInternalSetTimeOutState( pxTimeOut );
 8002532:	4628      	mov	r0, r5
			*pxTicksToWait -= xElapsedTime;
 8002534:	6023      	str	r3, [r4, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8002536:	f7ff ffc7 	bl	80024c8 <vTaskInternalSetTimeOutState>
				xReturn = pdFALSE;
 800253a:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 800253c:	f000 fa8c 	bl	8002a58 <vPortExitCritical>
}
 8002540:	4620      	mov	r0, r4
 8002542:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			*pxTicksToWait = 0;
 8002544:	2300      	movs	r3, #0
 8002546:	6023      	str	r3, [r4, #0]
			xReturn = pdTRUE;
 8002548:	2401      	movs	r4, #1
 800254a:	e7f7      	b.n	800253c <xTaskCheckForTimeOut+0x60>
 800254c:	2000007c 	.word	0x2000007c

08002550 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 8002550:	4b02      	ldr	r3, [pc, #8]	; (800255c <vTaskMissedYield+0xc>)
 8002552:	2201      	movs	r2, #1
 8002554:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
}
 8002558:	4770      	bx	lr
 800255a:	bf00      	nop
 800255c:	2000007c 	.word	0x2000007c

08002560 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 8002560:	4b06      	ldr	r3, [pc, #24]	; (800257c <xTaskGetSchedulerState+0x1c>)
 8002562:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
 8002566:	b132      	cbz	r2, 8002576 <xTaskGetSchedulerState+0x16>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002568:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 800256c:	2b00      	cmp	r3, #0
				xReturn = taskSCHEDULER_SUSPENDED;
 800256e:	bf0c      	ite	eq
 8002570:	2002      	moveq	r0, #2
 8002572:	2000      	movne	r0, #0
 8002574:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 8002576:	2001      	movs	r0, #1
	}
 8002578:	4770      	bx	lr
 800257a:	bf00      	nop
 800257c:	2000007c 	.word	0x2000007c

08002580 <xTaskPriorityInherit>:
	{
 8002580:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		if( pxMutexHolder != NULL )
 8002584:	4604      	mov	r4, r0
 8002586:	2800      	cmp	r0, #0
 8002588:	d035      	beq.n	80025f6 <xTaskPriorityInherit+0x76>
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800258a:	4a23      	ldr	r2, [pc, #140]	; (8002618 <xTaskPriorityInherit+0x98>)
 800258c:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800258e:	6b51      	ldr	r1, [r2, #52]	; 0x34
 8002590:	4615      	mov	r5, r2
 8002592:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 8002594:	428b      	cmp	r3, r1
 8002596:	d236      	bcs.n	8002606 <xTaskPriorityInherit+0x86>
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8002598:	6982      	ldr	r2, [r0, #24]
 800259a:	2a00      	cmp	r2, #0
 800259c:	db04      	blt.n	80025a8 <xTaskPriorityInherit+0x28>
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800259e:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 80025a0:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80025a2:	f1c2 0207 	rsb	r2, r2, #7
 80025a6:	6182      	str	r2, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80025a8:	4e1c      	ldr	r6, [pc, #112]	; (800261c <xTaskPriorityInherit+0x9c>)
 80025aa:	2714      	movs	r7, #20
 80025ac:	6962      	ldr	r2, [r4, #20]
 80025ae:	fb07 6303 	mla	r3, r7, r3, r6
 80025b2:	429a      	cmp	r2, r3
 80025b4:	d121      	bne.n	80025fa <xTaskPriorityInherit+0x7a>
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80025b6:	f104 0804 	add.w	r8, r4, #4
 80025ba:	4640      	mov	r0, r8
 80025bc:	f7ff f979 	bl	80018b2 <uxListRemove>
 80025c0:	b950      	cbnz	r0, 80025d8 <xTaskPriorityInherit+0x58>
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 80025c2:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80025c4:	fb07 5701 	mla	r7, r7, r1, r5
 80025c8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80025ca:	b92b      	cbnz	r3, 80025d8 <xTaskPriorityInherit+0x58>
 80025cc:	2201      	movs	r2, #1
 80025ce:	6bab      	ldr	r3, [r5, #56]	; 0x38
 80025d0:	408a      	lsls	r2, r1
 80025d2:	ea23 0302 	bic.w	r3, r3, r2
 80025d6:	63ab      	str	r3, [r5, #56]	; 0x38
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80025d8:	6b6b      	ldr	r3, [r5, #52]	; 0x34
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80025da:	2014      	movs	r0, #20
 80025dc:	6ba9      	ldr	r1, [r5, #56]	; 0x38
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80025de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025e0:	62e3      	str	r3, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80025e2:	2401      	movs	r4, #1
 80025e4:	fb00 6003 	mla	r0, r0, r3, r6
 80025e8:	fa04 f203 	lsl.w	r2, r4, r3
 80025ec:	430a      	orrs	r2, r1
 80025ee:	4641      	mov	r1, r8
 80025f0:	63aa      	str	r2, [r5, #56]	; 0x38
 80025f2:	f7ff f93b 	bl	800186c <vListInsertEnd>
	BaseType_t xReturn = pdFALSE;
 80025f6:	4620      	mov	r0, r4
		return xReturn;
 80025f8:	e003      	b.n	8002602 <xTaskPriorityInherit+0x82>
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80025fa:	6b6b      	ldr	r3, [r5, #52]	; 0x34
				xReturn = pdTRUE;
 80025fc:	2001      	movs	r0, #1
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80025fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002600:	62e3      	str	r3, [r4, #44]	; 0x2c
	}
 8002602:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8002606:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8002608:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 800260a:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 800260c:	42a0      	cmp	r0, r4
 800260e:	bf2c      	ite	cs
 8002610:	2000      	movcs	r0, #0
 8002612:	2001      	movcc	r0, #1
 8002614:	e7f5      	b.n	8002602 <xTaskPriorityInherit+0x82>
 8002616:	bf00      	nop
 8002618:	2000007c 	.word	0x2000007c
 800261c:	200000d8 	.word	0x200000d8

08002620 <xTaskPriorityDisinherit>:
	{
 8002620:	b570      	push	{r4, r5, r6, lr}
		if( pxMutexHolder != NULL )
 8002622:	4604      	mov	r4, r0
 8002624:	b908      	cbnz	r0, 800262a <xTaskPriorityDisinherit+0xa>
	BaseType_t xReturn = pdFALSE;
 8002626:	2000      	movs	r0, #0
	}
 8002628:	bd70      	pop	{r4, r5, r6, pc}
			configASSERT( pxTCB == pxCurrentTCB );
 800262a:	4d22      	ldr	r5, [pc, #136]	; (80026b4 <xTaskPriorityDisinherit+0x94>)
 800262c:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 800262e:	4283      	cmp	r3, r0
 8002630:	d008      	beq.n	8002644 <xTaskPriorityDisinherit+0x24>
 8002632:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002636:	f383 8811 	msr	BASEPRI, r3
 800263a:	f3bf 8f6f 	isb	sy
 800263e:	f3bf 8f4f 	dsb	sy
 8002642:	e7fe      	b.n	8002642 <xTaskPriorityDisinherit+0x22>
			configASSERT( pxTCB->uxMutexesHeld );
 8002644:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002646:	b943      	cbnz	r3, 800265a <xTaskPriorityDisinherit+0x3a>
 8002648:	f04f 0350 	mov.w	r3, #80	; 0x50
 800264c:	f383 8811 	msr	BASEPRI, r3
 8002650:	f3bf 8f6f 	isb	sy
 8002654:	f3bf 8f4f 	dsb	sy
 8002658:	e7fe      	b.n	8002658 <xTaskPriorityDisinherit+0x38>
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800265a:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
			( pxTCB->uxMutexesHeld )--;
 800265c:	3b01      	subs	r3, #1
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800265e:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
			( pxTCB->uxMutexesHeld )--;
 8002660:	6503      	str	r3, [r0, #80]	; 0x50
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8002662:	4291      	cmp	r1, r2
 8002664:	d0df      	beq.n	8002626 <xTaskPriorityDisinherit+0x6>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8002666:	2b00      	cmp	r3, #0
 8002668:	d1dd      	bne.n	8002626 <xTaskPriorityDisinherit+0x6>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800266a:	1d06      	adds	r6, r0, #4
 800266c:	4630      	mov	r0, r6
 800266e:	f7ff f920 	bl	80018b2 <uxListRemove>
 8002672:	b958      	cbnz	r0, 800268c <xTaskPriorityDisinherit+0x6c>
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8002674:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8002676:	2114      	movs	r1, #20
 8002678:	fb01 5100 	mla	r1, r1, r0, r5
 800267c:	6dcb      	ldr	r3, [r1, #92]	; 0x5c
 800267e:	b92b      	cbnz	r3, 800268c <xTaskPriorityDisinherit+0x6c>
 8002680:	2201      	movs	r2, #1
 8002682:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8002684:	4082      	lsls	r2, r0
 8002686:	ea23 0302 	bic.w	r3, r3, r2
 800268a:	63ab      	str	r3, [r5, #56]	; 0x38
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800268c:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
					prvAddTaskToReadyList( pxTCB );
 800268e:	2014      	movs	r0, #20
 8002690:	6ba9      	ldr	r1, [r5, #56]	; 0x38
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002692:	f1c3 0207 	rsb	r2, r3, #7
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8002696:	62e3      	str	r3, [r4, #44]	; 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002698:	61a2      	str	r2, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 800269a:	2401      	movs	r4, #1
 800269c:	fa04 f203 	lsl.w	r2, r4, r3
 80026a0:	430a      	orrs	r2, r1
 80026a2:	4631      	mov	r1, r6
 80026a4:	63aa      	str	r2, [r5, #56]	; 0x38
 80026a6:	4a04      	ldr	r2, [pc, #16]	; (80026b8 <xTaskPriorityDisinherit+0x98>)
 80026a8:	fb00 2003 	mla	r0, r0, r3, r2
 80026ac:	f7ff f8de 	bl	800186c <vListInsertEnd>
					xReturn = pdTRUE;
 80026b0:	4620      	mov	r0, r4
		return xReturn;
 80026b2:	e7b9      	b.n	8002628 <xTaskPriorityDisinherit+0x8>
 80026b4:	2000007c 	.word	0x2000007c
 80026b8:	200000d8 	.word	0x200000d8

080026bc <vTaskPriorityDisinheritAfterTimeout>:
	{
 80026bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		if( pxMutexHolder != NULL )
 80026c0:	4604      	mov	r4, r0
 80026c2:	2800      	cmp	r0, #0
 80026c4:	d04d      	beq.n	8002762 <vTaskPriorityDisinheritAfterTimeout+0xa6>
			configASSERT( pxTCB->uxMutexesHeld );
 80026c6:	6d02      	ldr	r2, [r0, #80]	; 0x50
 80026c8:	b942      	cbnz	r2, 80026dc <vTaskPriorityDisinheritAfterTimeout+0x20>
 80026ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026ce:	f383 8811 	msr	BASEPRI, r3
 80026d2:	f3bf 8f6f 	isb	sy
 80026d6:	f3bf 8f4f 	dsb	sy
 80026da:	e7fe      	b.n	80026da <vTaskPriorityDisinheritAfterTimeout+0x1e>
 80026dc:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 80026de:	4299      	cmp	r1, r3
 80026e0:	bf38      	it	cc
 80026e2:	4619      	movcc	r1, r3
			if( pxTCB->uxPriority != uxPriorityToUse )
 80026e4:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80026e6:	428b      	cmp	r3, r1
 80026e8:	d03b      	beq.n	8002762 <vTaskPriorityDisinheritAfterTimeout+0xa6>
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80026ea:	2a01      	cmp	r2, #1
 80026ec:	d139      	bne.n	8002762 <vTaskPriorityDisinheritAfterTimeout+0xa6>
					configASSERT( pxTCB != pxCurrentTCB );
 80026ee:	4d1e      	ldr	r5, [pc, #120]	; (8002768 <vTaskPriorityDisinheritAfterTimeout+0xac>)
 80026f0:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 80026f2:	4282      	cmp	r2, r0
 80026f4:	d108      	bne.n	8002708 <vTaskPriorityDisinheritAfterTimeout+0x4c>
 80026f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026fa:	f383 8811 	msr	BASEPRI, r3
 80026fe:	f3bf 8f6f 	isb	sy
 8002702:	f3bf 8f4f 	dsb	sy
 8002706:	e7fe      	b.n	8002706 <vTaskPriorityDisinheritAfterTimeout+0x4a>
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8002708:	6982      	ldr	r2, [r0, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800270a:	2714      	movs	r7, #20
 800270c:	4e17      	ldr	r6, [pc, #92]	; (800276c <vTaskPriorityDisinheritAfterTimeout+0xb0>)
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800270e:	2a00      	cmp	r2, #0
					pxTCB->uxPriority = uxPriorityToUse;
 8002710:	62c1      	str	r1, [r0, #44]	; 0x2c
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8002712:	fb07 6303 	mla	r3, r7, r3, r6
 8002716:	6942      	ldr	r2, [r0, #20]
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002718:	bfa4      	itt	ge
 800271a:	f1c1 0107 	rsbge	r1, r1, #7
 800271e:	6181      	strge	r1, [r0, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8002720:	429a      	cmp	r2, r3
 8002722:	d11e      	bne.n	8002762 <vTaskPriorityDisinheritAfterTimeout+0xa6>
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002724:	f100 0804 	add.w	r8, r0, #4
 8002728:	4640      	mov	r0, r8
 800272a:	f7ff f8c2 	bl	80018b2 <uxListRemove>
 800272e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8002730:	b950      	cbnz	r0, 8002748 <vTaskPriorityDisinheritAfterTimeout+0x8c>
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8002732:	fb07 5702 	mla	r7, r7, r2, r5
 8002736:	2301      	movs	r3, #1
 8002738:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800273a:	fa03 f102 	lsl.w	r1, r3, r2
 800273e:	b918      	cbnz	r0, 8002748 <vTaskPriorityDisinheritAfterTimeout+0x8c>
 8002740:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8002742:	ea23 0301 	bic.w	r3, r3, r1
 8002746:	63ab      	str	r3, [r5, #56]	; 0x38
						prvAddTaskToReadyList( pxTCB );
 8002748:	2301      	movs	r3, #1
 800274a:	6ba9      	ldr	r1, [r5, #56]	; 0x38
 800274c:	2014      	movs	r0, #20
 800274e:	4093      	lsls	r3, r2
 8002750:	fb00 6002 	mla	r0, r0, r2, r6
 8002754:	430b      	orrs	r3, r1
 8002756:	4641      	mov	r1, r8
 8002758:	63ab      	str	r3, [r5, #56]	; 0x38
	}
 800275a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
						prvAddTaskToReadyList( pxTCB );
 800275e:	f7ff b885 	b.w	800186c <vListInsertEnd>
	}
 8002762:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002766:	bf00      	nop
 8002768:	2000007c 	.word	0x2000007c
 800276c:	200000d8 	.word	0x200000d8

08002770 <pvTaskIncrementMutexHeldCount>:
		if( pxCurrentTCB != NULL )
 8002770:	4b04      	ldr	r3, [pc, #16]	; (8002784 <pvTaskIncrementMutexHeldCount+0x14>)
 8002772:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002774:	b11a      	cbz	r2, 800277e <pvTaskIncrementMutexHeldCount+0xe>
			( pxCurrentTCB->uxMutexesHeld )++;
 8002776:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002778:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 800277a:	3201      	adds	r2, #1
 800277c:	650a      	str	r2, [r1, #80]	; 0x50
		return pxCurrentTCB;
 800277e:	6b58      	ldr	r0, [r3, #52]	; 0x34
	}
 8002780:	4770      	bx	lr
 8002782:	bf00      	nop
 8002784:	2000007c 	.word	0x2000007c

08002788 <prvInsertBlockIntoFreeList>:
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8002788:	4b0f      	ldr	r3, [pc, #60]	; (80027c8 <prvInsertBlockIntoFreeList+0x40>)
{
 800278a:	b530      	push	{r4, r5, lr}
 800278c:	461d      	mov	r5, r3
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800278e:	681a      	ldr	r2, [r3, #0]
 8002790:	4282      	cmp	r2, r0
 8002792:	d317      	bcc.n	80027c4 <prvInsertBlockIntoFreeList+0x3c>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8002794:	685c      	ldr	r4, [r3, #4]
 8002796:	1919      	adds	r1, r3, r4
 8002798:	4288      	cmp	r0, r1
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800279a:	bf01      	itttt	eq
 800279c:	6841      	ldreq	r1, [r0, #4]
 800279e:	4618      	moveq	r0, r3
 80027a0:	1909      	addeq	r1, r1, r4
 80027a2:	6059      	streq	r1, [r3, #4]
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80027a4:	6844      	ldr	r4, [r0, #4]
 80027a6:	1901      	adds	r1, r0, r4
 80027a8:	428a      	cmp	r2, r1
 80027aa:	d106      	bne.n	80027ba <prvInsertBlockIntoFreeList+0x32>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80027ac:	68a9      	ldr	r1, [r5, #8]
 80027ae:	428a      	cmp	r2, r1
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80027b0:	bf1f      	itttt	ne
 80027b2:	6851      	ldrne	r1, [r2, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80027b4:	6812      	ldrne	r2, [r2, #0]
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80027b6:	1909      	addne	r1, r1, r4
 80027b8:	6041      	strne	r1, [r0, #4]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80027ba:	4298      	cmp	r0, r3
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80027bc:	6002      	str	r2, [r0, #0]
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80027be:	bf18      	it	ne
 80027c0:	6018      	strne	r0, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80027c2:	bd30      	pop	{r4, r5, pc}
 80027c4:	4613      	mov	r3, r2
 80027c6:	e7e2      	b.n	800278e <prvInsertBlockIntoFreeList+0x6>
 80027c8:	200001a8 	.word	0x200001a8

080027cc <pvPortMalloc>:
{
 80027cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		if( pxEnd == NULL )
 80027d0:	4d40      	ldr	r5, [pc, #256]	; (80028d4 <pvPortMalloc+0x108>)
{
 80027d2:	4604      	mov	r4, r0
	vTaskSuspendAll();
 80027d4:	f7ff fd0a 	bl	80021ec <vTaskSuspendAll>
		if( pxEnd == NULL )
 80027d8:	68ab      	ldr	r3, [r5, #8]
 80027da:	bb0b      	cbnz	r3, 8002820 <pvPortMalloc+0x54>
	uxAddress = ( size_t ) ucHeap;
 80027dc:	f105 020c 	add.w	r2, r5, #12
 80027e0:	f605 030c 	addw	r3, r5, #2060	; 0x80c
	xStart.xBlockSize = ( size_t ) 0;
 80027e4:	2100      	movs	r1, #0
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80027e6:	0756      	lsls	r6, r2, #29
	xStart.xBlockSize = ( size_t ) 0;
 80027e8:	6069      	str	r1, [r5, #4]
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80027ea:	bf17      	itett	ne
 80027ec:	f105 0213 	addne.w	r2, r5, #19
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80027f0:	f44f 6300 	moveq.w	r3, #2048	; 0x800
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80027f4:	f022 0207 	bicne.w	r2, r2, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80027f8:	1a9b      	subne	r3, r3, r2
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80027fa:	602a      	str	r2, [r5, #0]
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80027fc:	4413      	add	r3, r2
	uxAddress -= xHeapStructSize;
 80027fe:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8002800:	f023 0307 	bic.w	r3, r3, #7
	pxEnd->pxNextFreeBlock = NULL;
 8002804:	e9c3 1100 	strd	r1, r1, [r3]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8002808:	1a99      	subs	r1, r3, r2
	pxEnd = ( void * ) uxAddress;
 800280a:	60ab      	str	r3, [r5, #8]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800280c:	e9c2 3100 	strd	r3, r1, [r2]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8002810:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8002814:	f8c5 180c 	str.w	r1, [r5, #2060]	; 0x80c
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8002818:	f8c5 1810 	str.w	r1, [r5, #2064]	; 0x810
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800281c:	f8c5 3814 	str.w	r3, [r5, #2068]	; 0x814
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8002820:	f8d5 8814 	ldr.w	r8, [r5, #2068]	; 0x814
 8002824:	ea18 0f04 	tst.w	r8, r4
 8002828:	d14f      	bne.n	80028ca <pvPortMalloc+0xfe>
			if( xWantedSize > 0 )
 800282a:	2c00      	cmp	r4, #0
 800282c:	d040      	beq.n	80028b0 <pvPortMalloc+0xe4>
				xWantedSize += xHeapStructSize;
 800282e:	f104 0308 	add.w	r3, r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8002832:	0758      	lsls	r0, r3, #29
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8002834:	bf1c      	itt	ne
 8002836:	f023 0307 	bicne.w	r3, r3, #7
 800283a:	3308      	addne	r3, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800283c:	2b00      	cmp	r3, #0
 800283e:	d044      	beq.n	80028ca <pvPortMalloc+0xfe>
 8002840:	f8d5 7810 	ldr.w	r7, [r5, #2064]	; 0x810
 8002844:	429f      	cmp	r7, r3
 8002846:	d340      	bcc.n	80028ca <pvPortMalloc+0xfe>
				pxBlock = xStart.pxNextFreeBlock;
 8002848:	682e      	ldr	r6, [r5, #0]
				pxPreviousBlock = &xStart;
 800284a:	4822      	ldr	r0, [pc, #136]	; (80028d4 <pvPortMalloc+0x108>)
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800284c:	6872      	ldr	r2, [r6, #4]
 800284e:	429a      	cmp	r2, r3
 8002850:	d201      	bcs.n	8002856 <pvPortMalloc+0x8a>
 8002852:	6831      	ldr	r1, [r6, #0]
 8002854:	b9a1      	cbnz	r1, 8002880 <pvPortMalloc+0xb4>
				if( pxBlock != pxEnd )
 8002856:	68a9      	ldr	r1, [r5, #8]
 8002858:	42b1      	cmp	r1, r6
 800285a:	d036      	beq.n	80028ca <pvPortMalloc+0xfe>
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800285c:	1ad2      	subs	r2, r2, r3
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800285e:	6831      	ldr	r1, [r6, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8002860:	6804      	ldr	r4, [r0, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8002862:	2a10      	cmp	r2, #16
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8002864:	6001      	str	r1, [r0, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8002866:	d912      	bls.n	800288e <pvPortMalloc+0xc2>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8002868:	18f0      	adds	r0, r6, r3
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800286a:	0741      	lsls	r1, r0, #29
 800286c:	d00b      	beq.n	8002886 <pvPortMalloc+0xba>
 800286e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002872:	f383 8811 	msr	BASEPRI, r3
 8002876:	f3bf 8f6f 	isb	sy
 800287a:	f3bf 8f4f 	dsb	sy
 800287e:	e7fe      	b.n	800287e <pvPortMalloc+0xb2>
 8002880:	4630      	mov	r0, r6
 8002882:	460e      	mov	r6, r1
 8002884:	e7e2      	b.n	800284c <pvPortMalloc+0x80>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8002886:	6042      	str	r2, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 8002888:	6073      	str	r3, [r6, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800288a:	f7ff ff7d 	bl	8002788 <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800288e:	6873      	ldr	r3, [r6, #4]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8002890:	3408      	adds	r4, #8
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8002892:	f8d5 180c 	ldr.w	r1, [r5, #2060]	; 0x80c
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8002896:	1aff      	subs	r7, r7, r3
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8002898:	ea48 0303 	orr.w	r3, r8, r3
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800289c:	428f      	cmp	r7, r1
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800289e:	6073      	str	r3, [r6, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80028a0:	f04f 0300 	mov.w	r3, #0
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80028a4:	f8c5 7810 	str.w	r7, [r5, #2064]	; 0x810
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80028a8:	bf38      	it	cc
 80028aa:	f8c5 780c 	strcc.w	r7, [r5, #2060]	; 0x80c
					pxBlock->pxNextFreeBlock = NULL;
 80028ae:	6033      	str	r3, [r6, #0]
	( void ) xTaskResumeAll();
 80028b0:	f7ff fd1a 	bl	80022e8 <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80028b4:	0763      	lsls	r3, r4, #29
 80028b6:	d00a      	beq.n	80028ce <pvPortMalloc+0x102>
 80028b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028bc:	f383 8811 	msr	BASEPRI, r3
 80028c0:	f3bf 8f6f 	isb	sy
 80028c4:	f3bf 8f4f 	dsb	sy
 80028c8:	e7fe      	b.n	80028c8 <pvPortMalloc+0xfc>
void *pvReturn = NULL;
 80028ca:	2400      	movs	r4, #0
 80028cc:	e7f0      	b.n	80028b0 <pvPortMalloc+0xe4>
}
 80028ce:	4620      	mov	r0, r4
 80028d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80028d4:	200001a8 	.word	0x200001a8

080028d8 <vPortFree>:
{
 80028d8:	b538      	push	{r3, r4, r5, lr}
	if( pv != NULL )
 80028da:	4604      	mov	r4, r0
 80028dc:	b380      	cbz	r0, 8002940 <vPortFree+0x68>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80028de:	4d19      	ldr	r5, [pc, #100]	; (8002944 <vPortFree+0x6c>)
 80028e0:	f850 3c04 	ldr.w	r3, [r0, #-4]
 80028e4:	f8d5 2814 	ldr.w	r2, [r5, #2068]	; 0x814
 80028e8:	4213      	tst	r3, r2
 80028ea:	d108      	bne.n	80028fe <vPortFree+0x26>
 80028ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028f0:	f383 8811 	msr	BASEPRI, r3
 80028f4:	f3bf 8f6f 	isb	sy
 80028f8:	f3bf 8f4f 	dsb	sy
 80028fc:	e7fe      	b.n	80028fc <vPortFree+0x24>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80028fe:	f850 1c08 	ldr.w	r1, [r0, #-8]
 8002902:	b141      	cbz	r1, 8002916 <vPortFree+0x3e>
 8002904:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002908:	f383 8811 	msr	BASEPRI, r3
 800290c:	f3bf 8f6f 	isb	sy
 8002910:	f3bf 8f4f 	dsb	sy
 8002914:	e7fe      	b.n	8002914 <vPortFree+0x3c>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8002916:	ea23 0302 	bic.w	r3, r3, r2
 800291a:	f840 3c04 	str.w	r3, [r0, #-4]
				vTaskSuspendAll();
 800291e:	f7ff fc65 	bl	80021ec <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 8002922:	f8d5 2810 	ldr.w	r2, [r5, #2064]	; 0x810
 8002926:	f854 3c04 	ldr.w	r3, [r4, #-4]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800292a:	f1a4 0008 	sub.w	r0, r4, #8
					xFreeBytesRemaining += pxLink->xBlockSize;
 800292e:	4413      	add	r3, r2
 8002930:	f8c5 3810 	str.w	r3, [r5, #2064]	; 0x810
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8002934:	f7ff ff28 	bl	8002788 <prvInsertBlockIntoFreeList>
}
 8002938:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
				( void ) xTaskResumeAll();
 800293c:	f7ff bcd4 	b.w	80022e8 <xTaskResumeAll>
}
 8002940:	bd38      	pop	{r3, r4, r5, pc}
 8002942:	bf00      	nop
 8002944:	200001a8 	.word	0x200001a8

08002948 <prvTaskExitError>:
}
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
volatile uint32_t ulDummy = 0;
 8002948:	2300      	movs	r3, #0
{
 800294a:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
 800294c:	9301      	str	r3, [sp, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800294e:	4b0d      	ldr	r3, [pc, #52]	; (8002984 <prvTaskExitError+0x3c>)
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	3301      	adds	r3, #1
 8002954:	d008      	beq.n	8002968 <prvTaskExitError+0x20>
 8002956:	f04f 0350 	mov.w	r3, #80	; 0x50
 800295a:	f383 8811 	msr	BASEPRI, r3
 800295e:	f3bf 8f6f 	isb	sy
 8002962:	f3bf 8f4f 	dsb	sy
 8002966:	e7fe      	b.n	8002966 <prvTaskExitError+0x1e>
 8002968:	f04f 0350 	mov.w	r3, #80	; 0x50
 800296c:	f383 8811 	msr	BASEPRI, r3
 8002970:	f3bf 8f6f 	isb	sy
 8002974:	f3bf 8f4f 	dsb	sy
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8002978:	9b01      	ldr	r3, [sp, #4]
 800297a:	2b00      	cmp	r3, #0
 800297c:	d0fc      	beq.n	8002978 <prvTaskExitError+0x30>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800297e:	b002      	add	sp, #8
 8002980:	4770      	bx	lr
 8002982:	bf00      	nop
 8002984:	20000010 	.word	0x20000010

08002988 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8002988:	4808      	ldr	r0, [pc, #32]	; (80029ac <prvPortStartFirstTask+0x24>)
 800298a:	6800      	ldr	r0, [r0, #0]
 800298c:	6800      	ldr	r0, [r0, #0]
 800298e:	f380 8808 	msr	MSP, r0
 8002992:	f04f 0000 	mov.w	r0, #0
 8002996:	f380 8814 	msr	CONTROL, r0
 800299a:	b662      	cpsie	i
 800299c:	b661      	cpsie	f
 800299e:	f3bf 8f4f 	dsb	sy
 80029a2:	f3bf 8f6f 	isb	sy
 80029a6:	df00      	svc	0
 80029a8:	bf00      	nop
 80029aa:	0000      	.short	0x0000
 80029ac:	e000ed08 	.word	0xe000ed08

080029b0 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80029b0:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80029c0 <vPortEnableVFP+0x10>
 80029b4:	6801      	ldr	r1, [r0, #0]
 80029b6:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80029ba:	6001      	str	r1, [r0, #0]
 80029bc:	4770      	bx	lr
 80029be:	0000      	.short	0x0000
 80029c0:	e000ed88 	.word	0xe000ed88

080029c4 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80029c4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80029c8:	f021 0101 	bic.w	r1, r1, #1
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80029cc:	f840 2c20 	str.w	r2, [r0, #-32]
}
 80029d0:	3844      	subs	r0, #68	; 0x44
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80029d2:	6403      	str	r3, [r0, #64]	; 0x40
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80029d4:	4b03      	ldr	r3, [pc, #12]	; (80029e4 <pxPortInitialiseStack+0x20>)
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80029d6:	63c1      	str	r1, [r0, #60]	; 0x3c
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80029d8:	6383      	str	r3, [r0, #56]	; 0x38
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80029da:	f06f 0302 	mvn.w	r3, #2
 80029de:	6203      	str	r3, [r0, #32]
}
 80029e0:	4770      	bx	lr
 80029e2:	bf00      	nop
 80029e4:	08002949 	.word	0x08002949
	...

080029f0 <SVC_Handler>:
	__asm volatile (
 80029f0:	4b07      	ldr	r3, [pc, #28]	; (8002a10 <pxCurrentTCBConst2>)
 80029f2:	6819      	ldr	r1, [r3, #0]
 80029f4:	6808      	ldr	r0, [r1, #0]
 80029f6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80029fa:	f380 8809 	msr	PSP, r0
 80029fe:	f3bf 8f6f 	isb	sy
 8002a02:	f04f 0000 	mov.w	r0, #0
 8002a06:	f380 8811 	msr	BASEPRI, r0
 8002a0a:	4770      	bx	lr
 8002a0c:	f3af 8000 	nop.w

08002a10 <pxCurrentTCBConst2>:
 8002a10:	200000b0 	.word	0x200000b0

08002a14 <vPortEnterCritical>:
 8002a14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a18:	f383 8811 	msr	BASEPRI, r3
 8002a1c:	f3bf 8f6f 	isb	sy
 8002a20:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
 8002a24:	4a0a      	ldr	r2, [pc, #40]	; (8002a50 <vPortEnterCritical+0x3c>)
 8002a26:	6813      	ldr	r3, [r2, #0]
 8002a28:	3301      	adds	r3, #1
	if( uxCriticalNesting == 1 )
 8002a2a:	2b01      	cmp	r3, #1
	uxCriticalNesting++;
 8002a2c:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 8002a2e:	d10d      	bne.n	8002a4c <vPortEnterCritical+0x38>
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8002a30:	4b08      	ldr	r3, [pc, #32]	; (8002a54 <vPortEnterCritical+0x40>)
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f013 0fff 	tst.w	r3, #255	; 0xff
 8002a38:	d008      	beq.n	8002a4c <vPortEnterCritical+0x38>
 8002a3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a3e:	f383 8811 	msr	BASEPRI, r3
 8002a42:	f3bf 8f6f 	isb	sy
 8002a46:	f3bf 8f4f 	dsb	sy
 8002a4a:	e7fe      	b.n	8002a4a <vPortEnterCritical+0x36>
}
 8002a4c:	4770      	bx	lr
 8002a4e:	bf00      	nop
 8002a50:	20000010 	.word	0x20000010
 8002a54:	e000ed04 	.word	0xe000ed04

08002a58 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 8002a58:	4a08      	ldr	r2, [pc, #32]	; (8002a7c <vPortExitCritical+0x24>)
 8002a5a:	6813      	ldr	r3, [r2, #0]
 8002a5c:	b943      	cbnz	r3, 8002a70 <vPortExitCritical+0x18>
 8002a5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a62:	f383 8811 	msr	BASEPRI, r3
 8002a66:	f3bf 8f6f 	isb	sy
 8002a6a:	f3bf 8f4f 	dsb	sy
 8002a6e:	e7fe      	b.n	8002a6e <vPortExitCritical+0x16>
	uxCriticalNesting--;
 8002a70:	3b01      	subs	r3, #1
 8002a72:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8002a74:	b90b      	cbnz	r3, 8002a7a <vPortExitCritical+0x22>
	__asm volatile
 8002a76:	f383 8811 	msr	BASEPRI, r3
}
 8002a7a:	4770      	bx	lr
 8002a7c:	20000010 	.word	0x20000010

08002a80 <PendSV_Handler>:
	__asm volatile
 8002a80:	f3ef 8009 	mrs	r0, PSP
 8002a84:	f3bf 8f6f 	isb	sy
 8002a88:	4b15      	ldr	r3, [pc, #84]	; (8002ae0 <pxCurrentTCBConst>)
 8002a8a:	681a      	ldr	r2, [r3, #0]
 8002a8c:	f01e 0f10 	tst.w	lr, #16
 8002a90:	bf08      	it	eq
 8002a92:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8002a96:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002a9a:	6010      	str	r0, [r2, #0]
 8002a9c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8002aa0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8002aa4:	f380 8811 	msr	BASEPRI, r0
 8002aa8:	f3bf 8f4f 	dsb	sy
 8002aac:	f3bf 8f6f 	isb	sy
 8002ab0:	f7ff fc84 	bl	80023bc <vTaskSwitchContext>
 8002ab4:	f04f 0000 	mov.w	r0, #0
 8002ab8:	f380 8811 	msr	BASEPRI, r0
 8002abc:	bc09      	pop	{r0, r3}
 8002abe:	6819      	ldr	r1, [r3, #0]
 8002ac0:	6808      	ldr	r0, [r1, #0]
 8002ac2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002ac6:	f01e 0f10 	tst.w	lr, #16
 8002aca:	bf08      	it	eq
 8002acc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8002ad0:	f380 8809 	msr	PSP, r0
 8002ad4:	f3bf 8f6f 	isb	sy
 8002ad8:	4770      	bx	lr
 8002ada:	bf00      	nop
 8002adc:	f3af 8000 	nop.w

08002ae0 <pxCurrentTCBConst>:
 8002ae0:	200000b0 	.word	0x200000b0

08002ae4 <xPortSysTickHandler>:
{
 8002ae4:	b508      	push	{r3, lr}
	__asm volatile
 8002ae6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002aea:	f383 8811 	msr	BASEPRI, r3
 8002aee:	f3bf 8f6f 	isb	sy
 8002af2:	f3bf 8f4f 	dsb	sy
		if( xTaskIncrementTick() != pdFALSE )
 8002af6:	f7ff fb83 	bl	8002200 <xTaskIncrementTick>
 8002afa:	b118      	cbz	r0, 8002b04 <xPortSysTickHandler+0x20>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8002afc:	4b03      	ldr	r3, [pc, #12]	; (8002b0c <xPortSysTickHandler+0x28>)
 8002afe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002b02:	601a      	str	r2, [r3, #0]
	__asm volatile
 8002b04:	2300      	movs	r3, #0
 8002b06:	f383 8811 	msr	BASEPRI, r3
}
 8002b0a:	bd08      	pop	{r3, pc}
 8002b0c:	e000ed04 	.word	0xe000ed04

08002b10 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8002b10:	2300      	movs	r3, #0
 8002b12:	4a08      	ldr	r2, [pc, #32]	; (8002b34 <vPortSetupTimerInterrupt+0x24>)
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8002b14:	4908      	ldr	r1, [pc, #32]	; (8002b38 <vPortSetupTimerInterrupt+0x28>)
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8002b16:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8002b18:	600b      	str	r3, [r1, #0]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8002b1a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002b1e:	4b07      	ldr	r3, [pc, #28]	; (8002b3c <vPortSetupTimerInterrupt+0x2c>)
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	fbb3 f3f1 	udiv	r3, r3, r1
 8002b26:	4906      	ldr	r1, [pc, #24]	; (8002b40 <vPortSetupTimerInterrupt+0x30>)
 8002b28:	3b01      	subs	r3, #1
 8002b2a:	600b      	str	r3, [r1, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8002b2c:	2307      	movs	r3, #7
 8002b2e:	6013      	str	r3, [r2, #0]
}
 8002b30:	4770      	bx	lr
 8002b32:	bf00      	nop
 8002b34:	e000e010 	.word	0xe000e010
 8002b38:	e000e018 	.word	0xe000e018
 8002b3c:	20000000 	.word	0x20000000
 8002b40:	e000e014 	.word	0xe000e014

08002b44 <xPortStartScheduler>:
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8002b44:	4b38      	ldr	r3, [pc, #224]	; (8002c28 <xPortStartScheduler+0xe4>)
 8002b46:	4a39      	ldr	r2, [pc, #228]	; (8002c2c <xPortStartScheduler+0xe8>)
{
 8002b48:	b513      	push	{r0, r1, r4, lr}
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8002b4a:	6819      	ldr	r1, [r3, #0]
 8002b4c:	4291      	cmp	r1, r2
 8002b4e:	d108      	bne.n	8002b62 <xPortStartScheduler+0x1e>
	__asm volatile
 8002b50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b54:	f383 8811 	msr	BASEPRI, r3
 8002b58:	f3bf 8f6f 	isb	sy
 8002b5c:	f3bf 8f4f 	dsb	sy
 8002b60:	e7fe      	b.n	8002b60 <xPortStartScheduler+0x1c>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8002b62:	681a      	ldr	r2, [r3, #0]
 8002b64:	4b32      	ldr	r3, [pc, #200]	; (8002c30 <xPortStartScheduler+0xec>)
 8002b66:	429a      	cmp	r2, r3
 8002b68:	d108      	bne.n	8002b7c <xPortStartScheduler+0x38>
 8002b6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b6e:	f383 8811 	msr	BASEPRI, r3
 8002b72:	f3bf 8f6f 	isb	sy
 8002b76:	f3bf 8f4f 	dsb	sy
 8002b7a:	e7fe      	b.n	8002b7a <xPortStartScheduler+0x36>
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8002b7c:	4b2d      	ldr	r3, [pc, #180]	; (8002c34 <xPortStartScheduler+0xf0>)
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002b7e:	2100      	movs	r1, #0
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8002b80:	781a      	ldrb	r2, [r3, #0]
 8002b82:	b2d2      	uxtb	r2, r2
 8002b84:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8002b86:	22ff      	movs	r2, #255	; 0xff
 8002b88:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8002b8a:	781b      	ldrb	r3, [r3, #0]
 8002b8c:	b2db      	uxtb	r3, r3
 8002b8e:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8002b92:	f89d 2003 	ldrb.w	r2, [sp, #3]
 8002b96:	4b28      	ldr	r3, [pc, #160]	; (8002c38 <xPortStartScheduler+0xf4>)
 8002b98:	f002 0250 	and.w	r2, r2, #80	; 0x50
 8002b9c:	701a      	strb	r2, [r3, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8002b9e:	2207      	movs	r2, #7
 8002ba0:	605a      	str	r2, [r3, #4]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002ba2:	f89d 0003 	ldrb.w	r0, [sp, #3]
 8002ba6:	1e54      	subs	r4, r2, #1
 8002ba8:	0600      	lsls	r0, r0, #24
 8002baa:	d40d      	bmi.n	8002bc8 <xPortStartScheduler+0x84>
 8002bac:	b101      	cbz	r1, 8002bb0 <xPortStartScheduler+0x6c>
 8002bae:	605a      	str	r2, [r3, #4]
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8002bb0:	685a      	ldr	r2, [r3, #4]
 8002bb2:	2a03      	cmp	r2, #3
 8002bb4:	d011      	beq.n	8002bda <xPortStartScheduler+0x96>
 8002bb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002bba:	f383 8811 	msr	BASEPRI, r3
 8002bbe:	f3bf 8f6f 	isb	sy
 8002bc2:	f3bf 8f4f 	dsb	sy
 8002bc6:	e7fe      	b.n	8002bc6 <xPortStartScheduler+0x82>
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8002bc8:	f89d 2003 	ldrb.w	r2, [sp, #3]
 8002bcc:	2101      	movs	r1, #1
 8002bce:	0052      	lsls	r2, r2, #1
 8002bd0:	b2d2      	uxtb	r2, r2
 8002bd2:	f88d 2003 	strb.w	r2, [sp, #3]
 8002bd6:	4622      	mov	r2, r4
 8002bd8:	e7e3      	b.n	8002ba2 <xPortStartScheduler+0x5e>
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8002bda:	0212      	lsls	r2, r2, #8
	uxCriticalNesting = 0;
 8002bdc:	2400      	movs	r4, #0
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8002bde:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 8002be2:	605a      	str	r2, [r3, #4]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8002be4:	9b01      	ldr	r3, [sp, #4]
 8002be6:	4a13      	ldr	r2, [pc, #76]	; (8002c34 <xPortStartScheduler+0xf0>)
 8002be8:	b2db      	uxtb	r3, r3
 8002bea:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8002bec:	4b13      	ldr	r3, [pc, #76]	; (8002c3c <xPortStartScheduler+0xf8>)
 8002bee:	681a      	ldr	r2, [r3, #0]
 8002bf0:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 8002bf4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8002bf6:	681a      	ldr	r2, [r3, #0]
 8002bf8:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
 8002bfc:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
 8002bfe:	f7ff ff87 	bl	8002b10 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 8002c02:	4b0f      	ldr	r3, [pc, #60]	; (8002c40 <xPortStartScheduler+0xfc>)
 8002c04:	601c      	str	r4, [r3, #0]
	vPortEnableVFP();
 8002c06:	f7ff fed3 	bl	80029b0 <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8002c0a:	4a0e      	ldr	r2, [pc, #56]	; (8002c44 <xPortStartScheduler+0x100>)
 8002c0c:	6813      	ldr	r3, [r2, #0]
 8002c0e:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8002c12:	6013      	str	r3, [r2, #0]
	prvPortStartFirstTask();
 8002c14:	f7ff feb8 	bl	8002988 <prvPortStartFirstTask>
	vTaskSwitchContext();
 8002c18:	f7ff fbd0 	bl	80023bc <vTaskSwitchContext>
	prvTaskExitError();
 8002c1c:	f7ff fe94 	bl	8002948 <prvTaskExitError>
}
 8002c20:	4620      	mov	r0, r4
 8002c22:	b002      	add	sp, #8
 8002c24:	bd10      	pop	{r4, pc}
 8002c26:	bf00      	nop
 8002c28:	e000ed00 	.word	0xe000ed00
 8002c2c:	410fc271 	.word	0x410fc271
 8002c30:	410fc270 	.word	0x410fc270
 8002c34:	e000e400 	.word	0xe000e400
 8002c38:	200009c0 	.word	0x200009c0
 8002c3c:	e000ed20 	.word	0xe000ed20
 8002c40:	20000010 	.word	0x20000010
 8002c44:	e000ef34 	.word	0xe000ef34

08002c48 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8002c48:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8002c4c:	2b0f      	cmp	r3, #15
 8002c4e:	4a10      	ldr	r2, [pc, #64]	; (8002c90 <vPortValidateInterruptPriority+0x48>)
 8002c50:	d90d      	bls.n	8002c6e <vPortValidateInterruptPriority+0x26>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8002c52:	4910      	ldr	r1, [pc, #64]	; (8002c94 <vPortValidateInterruptPriority+0x4c>)
 8002c54:	5c5b      	ldrb	r3, [r3, r1]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8002c56:	7811      	ldrb	r1, [r2, #0]
 8002c58:	4299      	cmp	r1, r3
 8002c5a:	d908      	bls.n	8002c6e <vPortValidateInterruptPriority+0x26>
 8002c5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c60:	f383 8811 	msr	BASEPRI, r3
 8002c64:	f3bf 8f6f 	isb	sy
 8002c68:	f3bf 8f4f 	dsb	sy
 8002c6c:	e7fe      	b.n	8002c6c <vPortValidateInterruptPriority+0x24>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8002c6e:	4b0a      	ldr	r3, [pc, #40]	; (8002c98 <vPortValidateInterruptPriority+0x50>)
 8002c70:	6852      	ldr	r2, [r2, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002c78:	4293      	cmp	r3, r2
 8002c7a:	d908      	bls.n	8002c8e <vPortValidateInterruptPriority+0x46>
 8002c7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c80:	f383 8811 	msr	BASEPRI, r3
 8002c84:	f3bf 8f6f 	isb	sy
 8002c88:	f3bf 8f4f 	dsb	sy
 8002c8c:	e7fe      	b.n	8002c8c <vPortValidateInterruptPriority+0x44>
	}
 8002c8e:	4770      	bx	lr
 8002c90:	200009c0 	.word	0x200009c0
 8002c94:	e000e3f0 	.word	0xe000e3f0
 8002c98:	e000ed0c 	.word	0xe000ed0c

08002c9c <__libc_init_array>:
 8002c9c:	b570      	push	{r4, r5, r6, lr}
 8002c9e:	4e0d      	ldr	r6, [pc, #52]	; (8002cd4 <__libc_init_array+0x38>)
 8002ca0:	4c0d      	ldr	r4, [pc, #52]	; (8002cd8 <__libc_init_array+0x3c>)
 8002ca2:	1ba4      	subs	r4, r4, r6
 8002ca4:	10a4      	asrs	r4, r4, #2
 8002ca6:	2500      	movs	r5, #0
 8002ca8:	42a5      	cmp	r5, r4
 8002caa:	d109      	bne.n	8002cc0 <__libc_init_array+0x24>
 8002cac:	4e0b      	ldr	r6, [pc, #44]	; (8002cdc <__libc_init_array+0x40>)
 8002cae:	4c0c      	ldr	r4, [pc, #48]	; (8002ce0 <__libc_init_array+0x44>)
 8002cb0:	f000 f82c 	bl	8002d0c <_init>
 8002cb4:	1ba4      	subs	r4, r4, r6
 8002cb6:	10a4      	asrs	r4, r4, #2
 8002cb8:	2500      	movs	r5, #0
 8002cba:	42a5      	cmp	r5, r4
 8002cbc:	d105      	bne.n	8002cca <__libc_init_array+0x2e>
 8002cbe:	bd70      	pop	{r4, r5, r6, pc}
 8002cc0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002cc4:	4798      	blx	r3
 8002cc6:	3501      	adds	r5, #1
 8002cc8:	e7ee      	b.n	8002ca8 <__libc_init_array+0xc>
 8002cca:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002cce:	4798      	blx	r3
 8002cd0:	3501      	adds	r5, #1
 8002cd2:	e7f2      	b.n	8002cba <__libc_init_array+0x1e>
 8002cd4:	08002d6c 	.word	0x08002d6c
 8002cd8:	08002d6c 	.word	0x08002d6c
 8002cdc:	08002d6c 	.word	0x08002d6c
 8002ce0:	08002d70 	.word	0x08002d70

08002ce4 <memcpy>:
 8002ce4:	b510      	push	{r4, lr}
 8002ce6:	1e43      	subs	r3, r0, #1
 8002ce8:	440a      	add	r2, r1
 8002cea:	4291      	cmp	r1, r2
 8002cec:	d100      	bne.n	8002cf0 <memcpy+0xc>
 8002cee:	bd10      	pop	{r4, pc}
 8002cf0:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002cf4:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002cf8:	e7f7      	b.n	8002cea <memcpy+0x6>

08002cfa <memset>:
 8002cfa:	4402      	add	r2, r0
 8002cfc:	4603      	mov	r3, r0
 8002cfe:	4293      	cmp	r3, r2
 8002d00:	d100      	bne.n	8002d04 <memset+0xa>
 8002d02:	4770      	bx	lr
 8002d04:	f803 1b01 	strb.w	r1, [r3], #1
 8002d08:	e7f9      	b.n	8002cfe <memset+0x4>
	...

08002d0c <_init>:
 8002d0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d0e:	bf00      	nop
 8002d10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002d12:	bc08      	pop	{r3}
 8002d14:	469e      	mov	lr, r3
 8002d16:	4770      	bx	lr

08002d18 <_fini>:
 8002d18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d1a:	bf00      	nop
 8002d1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002d1e:	bc08      	pop	{r3}
 8002d20:	469e      	mov	lr, r3
 8002d22:	4770      	bx	lr
